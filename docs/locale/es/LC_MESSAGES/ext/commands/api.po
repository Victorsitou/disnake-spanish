# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2021, Rapptz, 2021-present, EQUENOS
# This file is distributed under the same license as the disnake package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: disnake 2.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-01 22:36-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../ext/commands/api.rst:4
msgid "API Reference"
msgstr ""

#: ../../ext/commands/api.rst:6
msgid ""
"The following section outlines the API of disnake's command extension "
"module."
msgstr ""

#: ../../ext/commands/api.rst:11
msgid "Bots"
msgstr ""

#: ../../ext/commands/api.rst:14
msgid "Bot"
msgstr ""

#: disnake.ext.commands.bot.Bot:1 of
msgid "Represents a discord bot."
msgstr ""

#: disnake.ext.commands.bot.Bot:3 of
msgid ""
"This class is a subclass of :class:`disnake.Client` and as a result "
"anything that you can do with a :class:`disnake.Client` you can do with "
"this bot."
msgstr ""

#: disnake.ext.commands.bot.Bot:7 of
msgid ""
"This class also subclasses :class:`.GroupMixin` to provide the "
"functionality to manage commands."
msgstr ""

#: disnake.ext.commands.bot.Bot:12 of
msgid ""
"The command prefix is what the message content must contain initially to "
"have a command invoked. This prefix could either be a string to indicate "
"what the prefix should be, or a callable that takes in the bot as its "
"first parameter and :class:`disnake.Message` as its second parameter and "
"returns the prefix. This is to facilitate \"dynamic\" command prefixes. "
"This callable can be either a regular function or a coroutine."
msgstr ""

#: disnake.ext.commands.bot.Bot:20 of
msgid ""
"An empty string as the prefix always matches, enabling prefix-less "
"command invocation. While this may be useful in DMs it should be avoided "
"in servers, as it's likely to cause performance issues and unintended "
"command invocations."
msgstr ""

#: disnake.ext.commands.bot.Bot:25 of
msgid ""
"The command prefix could also be an iterable of strings indicating that "
"multiple checks for the prefix should be used and the first one to match "
"will be the invocation prefix. You can get this prefix via "
":attr:`.Context.prefix`. To avoid confusion empty iterables are not "
"allowed."
msgstr ""

#: disnake.ext.commands.bot.Bot:33 of
msgid ""
"When passing multiple prefixes be careful to not pass a prefix that "
"matches a longer prefix occurring later in the sequence.  For example, if"
" the command prefix is ``('!', '!?')``  the ``'!?'`` prefix will never be"
" matched to any message as the previous one matches messages starting "
"with ``!?``. This is especially important when passing an empty string, "
"it should always be last as no prefix after it will be matched."
msgstr ""

#: disnake.ext.commands.bot.Bot:43 of
msgid ""
"Whether the commands should be case insensitive. Defaults to ``False``. "
"This attribute does not carry over to groups. You must set it to every "
"group if you require group commands to be case insensitive as well."
msgstr ""

#: ../../docstring disnake.ext.commands.Bot.activity
#: disnake.ext.commands.Bot.allowed_mentions
#: disnake.ext.commands.Bot.application_flags
#: disnake.ext.commands.Bot.application_id
#: disnake.ext.commands.Bot.cached_messages disnake.ext.commands.Bot.cogs
#: disnake.ext.commands.Bot.commands disnake.ext.commands.Bot.emojis
#: disnake.ext.commands.Bot.extensions disnake.ext.commands.Bot.guilds
#: disnake.ext.commands.Bot.intents disnake.ext.commands.Bot.latency
#: disnake.ext.commands.Bot.persistent_views
#: disnake.ext.commands.Bot.private_channels disnake.ext.commands.Bot.stickers
#: disnake.ext.commands.Bot.user disnake.ext.commands.Bot.users
#: disnake.ext.commands.Bot.voice_clients disnake.ext.commands.Cog.description
#: disnake.ext.commands.Cog.qualified_name
#: disnake.ext.commands.Command.cog_name
#: disnake.ext.commands.Command.full_parent_name
#: disnake.ext.commands.Command.parents
#: disnake.ext.commands.Command.qualified_name
#: disnake.ext.commands.Command.root_parent
#: disnake.ext.commands.Command.short_doc
#: disnake.ext.commands.Command.signature disnake.ext.commands.Context.channel
#: disnake.ext.commands.Context.clean_prefix disnake.ext.commands.Context.cog
#: disnake.ext.commands.Context.guild disnake.ext.commands.Context.valid
#: disnake.ext.commands.Context.voice_client disnake.ext.commands.Flag.required
#: disnake.ext.commands.Group.cog_name disnake.ext.commands.Group.commands
#: disnake.ext.commands.Group.full_parent_name
#: disnake.ext.commands.Group.parents disnake.ext.commands.Group.qualified_name
#: disnake.ext.commands.Group.root_parent disnake.ext.commands.Group.short_doc
#: disnake.ext.commands.Group.signature
#: disnake.ext.commands.GroupMixin.commands
#: disnake.ext.commands.Paginator.pages disnake.ext.commands.bot.Bot
#: disnake.ext.commands.cog.CogMeta disnake.ext.commands.context.Context
#: disnake.ext.commands.converter.clean_content
#: disnake.ext.commands.cooldowns.Cooldown disnake.ext.commands.core.Command
#: disnake.ext.commands.core.Group disnake.ext.commands.core.GroupMixin
#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand
#: disnake.ext.commands.errors.BadBoolArgument
#: disnake.ext.commands.errors.BadColourArgument
#: disnake.ext.commands.errors.BadFlagArgument
#: disnake.ext.commands.errors.BadLiteralArgument
#: disnake.ext.commands.errors.BadUnionArgument
#: disnake.ext.commands.errors.BotMissingAnyRole
#: disnake.ext.commands.errors.BotMissingPermissions
#: disnake.ext.commands.errors.BotMissingRole
#: disnake.ext.commands.errors.ChannelNotFound
#: disnake.ext.commands.errors.ChannelNotReadable
#: disnake.ext.commands.errors.CheckAnyFailure
#: disnake.ext.commands.errors.CommandInvokeError
#: disnake.ext.commands.errors.CommandOnCooldown
#: disnake.ext.commands.errors.CommandRegistrationError
#: disnake.ext.commands.errors.ConversionError
#: disnake.ext.commands.errors.EmojiNotFound
#: disnake.ext.commands.errors.ExpectedClosingQuoteError
#: disnake.ext.commands.errors.ExtensionError
#: disnake.ext.commands.errors.ExtensionFailed
#: disnake.ext.commands.errors.ExtensionNotFound
#: disnake.ext.commands.errors.GuildNotFound
#: disnake.ext.commands.errors.GuildStickerNotFound
#: disnake.ext.commands.errors.InvalidEndOfQuotedStringError
#: disnake.ext.commands.errors.MaxConcurrencyReached
#: disnake.ext.commands.errors.MemberNotFound
#: disnake.ext.commands.errors.MessageNotFound
#: disnake.ext.commands.errors.MissingAnyRole
#: disnake.ext.commands.errors.MissingFlagArgument
#: disnake.ext.commands.errors.MissingPermissions
#: disnake.ext.commands.errors.MissingRequiredArgument
#: disnake.ext.commands.errors.MissingRequiredFlag
#: disnake.ext.commands.errors.MissingRole
#: disnake.ext.commands.errors.PartialEmojiConversionFailure
#: disnake.ext.commands.errors.RoleNotFound
#: disnake.ext.commands.errors.ThreadNotFound
#: disnake.ext.commands.errors.TooManyFlags
#: disnake.ext.commands.errors.UnexpectedQuoteError
#: disnake.ext.commands.errors.UserNotFound disnake.ext.commands.flags.Flag
#: disnake.ext.commands.help.DefaultHelpCommand
#: disnake.ext.commands.help.HelpCommand
#: disnake.ext.commands.help.MinimalHelpCommand
#: disnake.ext.commands.help.Paginator disnake.ext.commands.params.ParamInfo
#: disnake.ext.commands.slash_core.InvokableSlashCommand
#: disnake.ext.commands.slash_core.SubCommand
#: disnake.ext.commands.slash_core.SubCommandGroup of
msgid "type"
msgstr ""

#: disnake.ext.commands.Context.valid:3 disnake.ext.commands.Flag.required:5
#: disnake.ext.commands.bot.Bot:47 disnake.ext.commands.bot.Bot:91
#: disnake.ext.commands.bot.Bot:111 disnake.ext.commands.bot.Bot:119
#: disnake.ext.commands.bot.Bot:129 disnake.ext.commands.bot.Bot:136
#: disnake.ext.commands.bot.Bot:146
#: disnake.ext.commands.common_bot_base.CommonBotBase.is_owner:17
#: disnake.ext.commands.context.Context:97
#: disnake.ext.commands.converter.clean_content:10
#: disnake.ext.commands.converter.clean_content:16
#: disnake.ext.commands.converter.clean_content:22
#: disnake.ext.commands.converter.clean_content:30
#: disnake.ext.commands.core.Command:49 disnake.ext.commands.core.Command:86
#: disnake.ext.commands.core.Command:97 disnake.ext.commands.core.Command:112
#: disnake.ext.commands.core.Command:121 disnake.ext.commands.core.Command:129
#: disnake.ext.commands.core.Command.can_run:16
#: disnake.ext.commands.core.Command.is_on_cooldown:7
#: disnake.ext.commands.core.Group:18 disnake.ext.commands.core.Group:25
#: disnake.ext.commands.core.GroupMixin:15
#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:51
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:51
#: disnake.ext.commands.errors.CommandRegistrationError:18
#: disnake.ext.commands.flags.Flag:48
#: disnake.ext.commands.help.DefaultHelpCommand:18
#: disnake.ext.commands.help.HelpCommand:24
#: disnake.ext.commands.help.MinimalHelpCommand:9
#: disnake.ext.commands.slash_core.InvokableSlashCommand:57 of
msgid ":class:`bool`"
msgstr ""

#: disnake.ext.commands.bot.Bot:51 of
msgid "The content prefixed into the default help message."
msgstr ""

#: disnake.ext.commands.Cog.description:3
#: disnake.ext.commands.Cog.qualified_name:3
#: disnake.ext.commands.Command.full_parent_name:6
#: disnake.ext.commands.Command.qualified_name:7
#: disnake.ext.commands.Command.short_doc:7
#: disnake.ext.commands.Command.signature:3
#: disnake.ext.commands.Context.clean_prefix:5
#: disnake.ext.commands.Group.full_parent_name:6
#: disnake.ext.commands.Group.qualified_name:7
#: disnake.ext.commands.Group.short_doc:7
#: disnake.ext.commands.Group.signature:3
#: disnake.ext.commands.HelpCommand.invoked_with:10
#: disnake.ext.commands.bot.Bot:53 disnake.ext.commands.cog.CogMeta:37
#: disnake.ext.commands.cog.CogMeta:45 disnake.ext.commands.core.Command:10
#: disnake.ext.commands.core.Command:79
#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:10
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:10
#: disnake.ext.commands.errors.BadBoolArgument:11
#: disnake.ext.commands.errors.BadColourArgument:11
#: disnake.ext.commands.errors.ChannelNotFound:11
#: disnake.ext.commands.errors.CommandRegistrationError:12
#: disnake.ext.commands.errors.EmojiNotFound:11
#: disnake.ext.commands.errors.ExpectedClosingQuoteError:9
#: disnake.ext.commands.errors.ExtensionError:9
#: disnake.ext.commands.errors.ExtensionFailed:9
#: disnake.ext.commands.errors.ExtensionNotFound:12
#: disnake.ext.commands.errors.GuildNotFound:11
#: disnake.ext.commands.errors.GuildStickerNotFound:11
#: disnake.ext.commands.errors.InvalidEndOfQuotedStringError:10
#: disnake.ext.commands.errors.MemberNotFound:12
#: disnake.ext.commands.errors.MessageNotFound:11
#: disnake.ext.commands.errors.PartialEmojiConversionFailure:12
#: disnake.ext.commands.errors.RoleNotFound:11
#: disnake.ext.commands.errors.ThreadNotFound:11
#: disnake.ext.commands.errors.UnexpectedQuoteError:9
#: disnake.ext.commands.errors.UserNotFound:12
#: disnake.ext.commands.flags.Flag:11 disnake.ext.commands.flags.Flag:23
#: disnake.ext.commands.help.DefaultHelpCommand:49
#: disnake.ext.commands.help.DefaultHelpCommand:56
#: disnake.ext.commands.help.HelpCommand.command_not_found:13
#: disnake.ext.commands.help.HelpCommand.get_command_signature:7
#: disnake.ext.commands.help.HelpCommand.remove_mentions:6
#: disnake.ext.commands.help.HelpCommand.subcommand_not_found:20
#: disnake.ext.commands.help.MinimalHelpCommand:16
#: disnake.ext.commands.help.MinimalHelpCommand:23
#: disnake.ext.commands.help.MinimalHelpCommand:48
#: disnake.ext.commands.help.MinimalHelpCommand.get_command_signature:7
#: disnake.ext.commands.help.MinimalHelpCommand.get_ending_note:6
#: disnake.ext.commands.help.MinimalHelpCommand.get_opening_note:9
#: disnake.ext.commands.help.Paginator:13
#: disnake.ext.commands.help.Paginator:19
#: disnake.ext.commands.help.Paginator:34
#: disnake.ext.commands.params.ParamInfo:15
#: disnake.ext.commands.params.ParamInfo:21
#: disnake.ext.commands.slash_core.InvokableSlashCommand:10
#: disnake.ext.commands.slash_core.SubCommand:10
#: disnake.ext.commands.slash_core.SubCommandGroup:10 of
msgid ":class:`str`"
msgstr ""

#: disnake.ext.commands.bot.Bot:57 of
msgid ""
"The help command implementation to use. This can be dynamically set at "
"runtime. To remove the help command pass ``None``. For more information "
"on implementing a help command, see :ref:`ext_commands_help_command`."
msgstr ""

#: disnake.ext.commands.bot.Bot:61 of
msgid "Optional[:class:`.HelpCommand`]"
msgstr ""

#: disnake.ext.commands.bot.Bot:65 of
msgid ""
"The user ID that owns the bot. If this is not set and is then queried via"
" :meth:`.is_owner` then it is fetched automatically using "
":meth:`~.Bot.application_info`."
msgstr ""

#: disnake.ext.commands.Bot.application_id:9 disnake.ext.commands.bot.Bot:69
#: disnake.ext.commands.help.DefaultHelpCommand:36
#: disnake.ext.commands.help.MinimalHelpCommand:41 of
msgid "Optional[:class:`int`]"
msgstr ""

#: disnake.ext.commands.bot.Bot:73 of
msgid ""
"The user IDs that owns the bot. This is similar to :attr:`owner_id`. If "
"this is not set and the application is team based, then it is fetched "
"automatically using :meth:`~.Bot.application_info`. For performance "
"reasons it is recommended to use a :class:`set` for the collection. You "
"cannot set both ``owner_id`` and ``owner_ids``."
msgstr ""

#: disnake.ext.commands.bot.Bot:81 of
msgid "Optional[Collection[:class:`int`]]"
msgstr ""

#: disnake.ext.commands.bot.Bot:85 of
msgid ""
"Whether to strip whitespace characters after encountering the command "
"prefix. This allows for ``!   hello`` and ``!hello`` to both work if the "
"``command_prefix`` is set to ``!``. Defaults to ``False``."
msgstr ""

#: disnake.ext.commands.bot.Bot:95 of
msgid ""
"The list of IDs of the guilds where you're going to test your app "
"commands. Defaults to ``None``, which means global registration of "
"commands across all guilds."
msgstr ""

#: disnake.ext.commands.bot.Bot:101 of
msgid "List[:class:`int`]"
msgstr ""

#: disnake.ext.commands.bot.Bot:105 of
msgid ""
"Whether to enable automatic synchronization of application commands in "
"your code. Defaults to ``True``, which means that commands in API are "
"automatically synced with the commands in your code."
msgstr ""

#: disnake.ext.commands.bot.Bot:115 of
msgid ""
"Whether to sync the application commands on cog unload / reload. Defaults"
" to ``True``."
msgstr ""

#: disnake.ext.commands.bot.Bot:123 of
msgid ""
"Whether to enable messages logging the synchronization process. Useful "
"for tracking the commands being registered in the API. Defaults to "
"``False``."
msgstr ""

#: disnake.ext.commands.bot.Bot:133 of
msgid ""
"Whether to enable automatic synchronization of app command permissions in"
" your code. Defaults to ``False``."
msgstr ""

#: disnake.ext.commands.bot.Bot:140 of
msgid ""
"Whether to enable automatic extension reloading on file modification for "
"debugging. Whenever you save an extension with reloading enabled the file"
" will be automatically reloaded for you so you do not have to reload the "
"extension manually. Defaults to ``False``"
msgstr ""

#: disnake.ext.commands.base_core.InvokableApplicationCommand.after_invoke:1
#: disnake.ext.commands.bot_base.BotBase.after_invoke:1
#: disnake.ext.commands.core.Command.after_invoke:1
#: disnake.ext.commands.core.after_invoke:1 of
msgid "A decorator that registers a coroutine as a post-invoke hook."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.after_invoke:3
#: disnake.ext.commands.core.Command.after_invoke:3 of
msgid ""
"A post-invoke hook is called directly after the command is called. This "
"makes it a useful function to clean-up database connections or any type "
"of clean up required."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.after_invoke:7
#: disnake.ext.commands.core.Command.after_invoke:7 of
msgid "This post-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.after_invoke:11 of
msgid ""
"Similar to :meth:`~.Bot.before_invoke`\\, this is not called unless "
"checks and argument parsing procedures succeed. This hook is, however, "
"**always** called regardless of the internal command callback raising an "
"error (i.e. :exc:`.CommandInvokeError`\\). This makes it ideal for clean-"
"up scenarios."
msgstr ""

#: ../../ext/commands/api.rst disnake.abc.Messageable.fetch_message
#: disnake.abc.Messageable.history disnake.abc.Messageable.send
#: disnake.client.Client.add_view disnake.client.Client.before_identify_hook
#: disnake.client.Client.bulk_edit_command_permissions
#: disnake.client.Client.bulk_fetch_command_permissions
#: disnake.client.Client.bulk_overwrite_global_commands
#: disnake.client.Client.bulk_overwrite_guild_commands
#: disnake.client.Client.change_presence disnake.client.Client.connect
#: disnake.client.Client.create_dm disnake.client.Client.create_global_command
#: disnake.client.Client.create_guild
#: disnake.client.Client.create_guild_command
#: disnake.client.Client.delete_global_command
#: disnake.client.Client.delete_guild_command
#: disnake.client.Client.delete_invite
#: disnake.client.Client.edit_command_permissions
#: disnake.client.Client.edit_global_command
#: disnake.client.Client.edit_guild_command
#: disnake.client.Client.fetch_command_permissions
#: disnake.client.Client.fetch_global_command disnake.client.Client.fetch_guild
#: disnake.client.Client.fetch_guild_command
#: disnake.client.Client.fetch_guild_commands
#: disnake.client.Client.fetch_guilds disnake.client.Client.fetch_invite
#: disnake.client.Client.fetch_stage_instance
#: disnake.client.Client.fetch_template disnake.client.Client.fetch_user
#: disnake.client.Client.fetch_widget disnake.client.Client.get_channel
#: disnake.client.Client.get_emoji disnake.client.Client.get_global_command
#: disnake.client.Client.get_global_command_named
#: disnake.client.Client.get_guild
#: disnake.client.Client.get_guild_application_commands
#: disnake.client.Client.get_guild_command
#: disnake.client.Client.get_guild_command_named
#: disnake.client.Client.get_guild_message_commands
#: disnake.client.Client.get_guild_slash_commands
#: disnake.client.Client.get_guild_user_commands
#: disnake.client.Client.get_message disnake.client.Client.get_or_fetch_user
#: disnake.client.Client.get_partial_messageable
#: disnake.client.Client.get_stage_instance disnake.client.Client.get_user
#: disnake.client.Client.login disnake.client.Client.wait_for
#: disnake.ext.commands.base_core.InvokableApplicationCommand.after_invoke
#: disnake.ext.commands.base_core.InvokableApplicationCommand.before_invoke
#: disnake.ext.commands.base_core.InvokableApplicationCommand.error
#: disnake.ext.commands.base_core.guild_permissions
#: disnake.ext.commands.bot_base.BotBase.add_check
#: disnake.ext.commands.bot_base.BotBase.after_invoke
#: disnake.ext.commands.bot_base.BotBase.before_invoke
#: disnake.ext.commands.bot_base.BotBase.get_context
#: disnake.ext.commands.bot_base.BotBase.get_prefix
#: disnake.ext.commands.bot_base.BotBase.invoke
#: disnake.ext.commands.bot_base.BotBase.process_commands
#: disnake.ext.commands.bot_base.BotBase.remove_check
#: disnake.ext.commands.cog.Cog.cog_after_invoke
#: disnake.ext.commands.cog.Cog.cog_before_invoke
#: disnake.ext.commands.cog.Cog.cog_command_error
#: disnake.ext.commands.cog.Cog.listener
#: disnake.ext.commands.common_bot_base.CommonBotBase.add_cog
#: disnake.ext.commands.common_bot_base.CommonBotBase.add_listener
#: disnake.ext.commands.common_bot_base.CommonBotBase.get_cog
#: disnake.ext.commands.common_bot_base.CommonBotBase.is_owner
#: disnake.ext.commands.common_bot_base.CommonBotBase.load_extension
#: disnake.ext.commands.common_bot_base.CommonBotBase.reload_extension
#: disnake.ext.commands.common_bot_base.CommonBotBase.remove_cog
#: disnake.ext.commands.common_bot_base.CommonBotBase.remove_listener
#: disnake.ext.commands.common_bot_base.CommonBotBase.unload_extension
#: disnake.ext.commands.context.Context.invoke
#: disnake.ext.commands.context.Context.reinvoke
#: disnake.ext.commands.context.Context.send_help
#: disnake.ext.commands.converter.CategoryChannelConverter.convert
#: disnake.ext.commands.converter.ColourConverter.convert
#: disnake.ext.commands.converter.Converter.convert
#: disnake.ext.commands.converter.EmojiConverter.convert
#: disnake.ext.commands.converter.GameConverter.convert
#: disnake.ext.commands.converter.GuildChannelConverter.convert
#: disnake.ext.commands.converter.GuildConverter.convert
#: disnake.ext.commands.converter.GuildStickerConverter.convert
#: disnake.ext.commands.converter.InviteConverter.convert
#: disnake.ext.commands.converter.MemberConverter.convert
#: disnake.ext.commands.converter.MessageConverter.convert
#: disnake.ext.commands.converter.ObjectConverter.convert
#: disnake.ext.commands.converter.PartialEmojiConverter.convert
#: disnake.ext.commands.converter.PartialMessageConverter.convert
#: disnake.ext.commands.converter.RoleConverter.convert
#: disnake.ext.commands.converter.StageChannelConverter.convert
#: disnake.ext.commands.converter.StoreChannelConverter.convert
#: disnake.ext.commands.converter.TextChannelConverter.convert
#: disnake.ext.commands.converter.ThreadConverter.convert
#: disnake.ext.commands.converter.UserConverter.convert
#: disnake.ext.commands.converter.VoiceChannelConverter.convert
#: disnake.ext.commands.converter.clean_content.convert
#: disnake.ext.commands.converter.run_converters
#: disnake.ext.commands.cooldowns.Cooldown.get_retry_after
#: disnake.ext.commands.cooldowns.Cooldown.get_tokens
#: disnake.ext.commands.cooldowns.Cooldown.update_rate_limit
#: disnake.ext.commands.core.Command.add_check
#: disnake.ext.commands.core.Command.after_invoke
#: disnake.ext.commands.core.Command.before_invoke
#: disnake.ext.commands.core.Command.can_run
#: disnake.ext.commands.core.Command.error
#: disnake.ext.commands.core.Command.get_cooldown_retry_after
#: disnake.ext.commands.core.Command.is_on_cooldown
#: disnake.ext.commands.core.Command.remove_check
#: disnake.ext.commands.core.Command.reset_cooldown
#: disnake.ext.commands.core.GroupMixin.add_command
#: disnake.ext.commands.core.GroupMixin.get_command
#: disnake.ext.commands.core.GroupMixin.remove_command
#: disnake.ext.commands.core.check disnake.ext.commands.core.check_any
#: disnake.ext.commands.core.command disnake.ext.commands.core.cooldown
#: disnake.ext.commands.core.dynamic_cooldown
#: disnake.ext.commands.core.has_any_role
#: disnake.ext.commands.core.has_permissions disnake.ext.commands.core.has_role
#: disnake.ext.commands.core.max_concurrency
#: disnake.ext.commands.ctx_menus_core.message_command
#: disnake.ext.commands.ctx_menus_core.user_command
#: disnake.ext.commands.errors.NSFWChannelRequired
#: disnake.ext.commands.flags.FlagConverter
#: disnake.ext.commands.flags.FlagConverter.convert
#: disnake.ext.commands.flags.flag
#: disnake.ext.commands.help.DefaultHelpCommand.add_command_formatting
#: disnake.ext.commands.help.DefaultHelpCommand.add_indented_commands
#: disnake.ext.commands.help.HelpCommand.add_check
#: disnake.ext.commands.help.HelpCommand.command_not_found
#: disnake.ext.commands.help.HelpCommand.filter_commands
#: disnake.ext.commands.help.HelpCommand.get_command_signature
#: disnake.ext.commands.help.HelpCommand.get_max_size
#: disnake.ext.commands.help.HelpCommand.on_help_command_error
#: disnake.ext.commands.help.HelpCommand.prepare_help_command
#: disnake.ext.commands.help.HelpCommand.remove_check
#: disnake.ext.commands.help.HelpCommand.send_bot_help
#: disnake.ext.commands.help.HelpCommand.send_cog_help
#: disnake.ext.commands.help.HelpCommand.send_command_help
#: disnake.ext.commands.help.HelpCommand.send_error_message
#: disnake.ext.commands.help.HelpCommand.send_group_help
#: disnake.ext.commands.help.HelpCommand.subcommand_not_found
#: disnake.ext.commands.help.MinimalHelpCommand.add_aliases_formatting
#: disnake.ext.commands.help.MinimalHelpCommand.add_bot_commands_formatting
#: disnake.ext.commands.help.MinimalHelpCommand.add_command_formatting
#: disnake.ext.commands.help.MinimalHelpCommand.add_subcommand_formatting
#: disnake.ext.commands.help.MinimalHelpCommand.get_command_signature
#: disnake.ext.commands.help.Paginator.add_line
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_app_command_check
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_message_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_slash_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_user_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.application_command_check
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_message_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_slash_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_user_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.message_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.process_app_command_autocompletion
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.process_application_commands
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_app_command_check
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_message_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_slash_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_user_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.user_command
#: disnake.ext.commands.params.Param
#: disnake.ext.commands.slash_core.InvokableSlashCommand.autocomplete
#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command
#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command_group
#: disnake.ext.commands.slash_core.SubCommand.autocomplete
#: disnake.ext.commands.slash_core.slash_command of
msgid "Parameters"
msgstr ""

#: disnake.ext.commands.base_core.InvokableApplicationCommand.after_invoke:7
#: disnake.ext.commands.bot_base.BotBase.after_invoke:17
#: disnake.ext.commands.core.Command.after_invoke:11 of
msgid "The coroutine to register as the post-invoke hook."
msgstr ""

#: disnake.abc.Messageable.fetch_message disnake.abc.Messageable.history
#: disnake.abc.Messageable.pins disnake.abc.Messageable.send
#: disnake.client.Client.add_view disnake.client.Client.application_info
#: disnake.client.Client.change_presence disnake.client.Client.connect
#: disnake.client.Client.create_guild disnake.client.Client.delete_invite
#: disnake.client.Client.event disnake.client.Client.fetch_channel
#: disnake.client.Client.fetch_guild disnake.client.Client.fetch_guilds
#: disnake.client.Client.fetch_invite
#: disnake.client.Client.fetch_premium_sticker_packs
#: disnake.client.Client.fetch_stage_instance
#: disnake.client.Client.fetch_sticker disnake.client.Client.fetch_template
#: disnake.client.Client.fetch_user disnake.client.Client.fetch_webhook
#: disnake.client.Client.fetch_widget disnake.client.Client.login
#: disnake.client.Client.start disnake.client.Client.wait_for
#: disnake.ext.commands.base_core.InvokableApplicationCommand.after_invoke
#: disnake.ext.commands.base_core.InvokableApplicationCommand.before_invoke
#: disnake.ext.commands.base_core.InvokableApplicationCommand.error
#: disnake.ext.commands.bot_base.BotBase.after_invoke
#: disnake.ext.commands.bot_base.BotBase.before_invoke
#: disnake.ext.commands.cog.Cog.listener
#: disnake.ext.commands.common_bot_base.CommonBotBase.add_cog
#: disnake.ext.commands.common_bot_base.CommonBotBase.listen
#: disnake.ext.commands.common_bot_base.CommonBotBase.load_extension
#: disnake.ext.commands.common_bot_base.CommonBotBase.reload_extension
#: disnake.ext.commands.common_bot_base.CommonBotBase.unload_extension
#: disnake.ext.commands.context.Context.invoke
#: disnake.ext.commands.context.Context.reinvoke
#: disnake.ext.commands.context.Context.reply
#: disnake.ext.commands.converter.CategoryChannelConverter.convert
#: disnake.ext.commands.converter.ColourConverter.convert
#: disnake.ext.commands.converter.Converter.convert
#: disnake.ext.commands.converter.EmojiConverter.convert
#: disnake.ext.commands.converter.GameConverter.convert
#: disnake.ext.commands.converter.GuildChannelConverter.convert
#: disnake.ext.commands.converter.GuildConverter.convert
#: disnake.ext.commands.converter.GuildStickerConverter.convert
#: disnake.ext.commands.converter.InviteConverter.convert
#: disnake.ext.commands.converter.MemberConverter.convert
#: disnake.ext.commands.converter.MessageConverter.convert
#: disnake.ext.commands.converter.ObjectConverter.convert
#: disnake.ext.commands.converter.PartialEmojiConverter.convert
#: disnake.ext.commands.converter.PartialMessageConverter.convert
#: disnake.ext.commands.converter.RoleConverter.convert
#: disnake.ext.commands.converter.StageChannelConverter.convert
#: disnake.ext.commands.converter.StoreChannelConverter.convert
#: disnake.ext.commands.converter.TextChannelConverter.convert
#: disnake.ext.commands.converter.ThreadConverter.convert
#: disnake.ext.commands.converter.UserConverter.convert
#: disnake.ext.commands.converter.VoiceChannelConverter.convert
#: disnake.ext.commands.converter.clean_content.convert
#: disnake.ext.commands.converter.run_converters
#: disnake.ext.commands.core.Command.after_invoke
#: disnake.ext.commands.core.Command.before_invoke
#: disnake.ext.commands.core.Command.can_run
#: disnake.ext.commands.core.Command.error
#: disnake.ext.commands.core.GroupMixin.add_command
#: disnake.ext.commands.core.check_any disnake.ext.commands.core.command
#: disnake.ext.commands.flags.FlagConverter.convert
#: disnake.ext.commands.help.Paginator.add_line
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_message_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_slash_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_user_command
#: of
msgid "Raises"
msgstr ""

#: disnake.client.Client.event:15
#: disnake.ext.commands.base_core.InvokableApplicationCommand.after_invoke:10
#: disnake.ext.commands.base_core.InvokableApplicationCommand.before_invoke:10
#: disnake.ext.commands.base_core.InvokableApplicationCommand.error:8
#: disnake.ext.commands.bot_base.BotBase.after_invoke:20
#: disnake.ext.commands.bot_base.BotBase.before_invoke:19
#: disnake.ext.commands.core.Command.after_invoke:14
#: disnake.ext.commands.core.Command.before_invoke:14
#: disnake.ext.commands.core.Command.error:10 of
msgid "The coroutine passed is not actually a coroutine."
msgstr ""

#: disnake.ext.commands.base_core.InvokableApplicationCommand.before_invoke:1
#: disnake.ext.commands.bot_base.BotBase.before_invoke:1
#: disnake.ext.commands.core.Command.before_invoke:1
#: disnake.ext.commands.core.before_invoke:1 of
msgid "A decorator that registers a coroutine as a pre-invoke hook."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.before_invoke:3
#: disnake.ext.commands.core.Command.before_invoke:3 of
msgid ""
"A pre-invoke hook is called directly before the command is called. This "
"makes it a useful function to set up database connections or any type of "
"set up required."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.before_invoke:7
#: disnake.ext.commands.core.Command.before_invoke:7 of
msgid "This pre-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.before_invoke:11 of
msgid ""
"The :meth:`~.Bot.before_invoke` and :meth:`~.Bot.after_invoke` hooks are "
"only called if all checks and argument parsing procedures pass without "
"error. If any check or argument parsing procedures fail then the hooks "
"are not called."
msgstr ""

#: disnake.ext.commands.base_core.InvokableApplicationCommand.before_invoke:7
#: disnake.ext.commands.bot_base.BotBase.before_invoke:16
#: disnake.ext.commands.core.Command.before_invoke:11 of
msgid "The coroutine to register as the pre-invoke hook."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.check:1
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.application_command_check:1
#: of
msgid "A decorator that adds a global check to the bot."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.check:3 of
msgid ""
"A global check is similar to a :func:`.check` that is applied on a per "
"command basis except it is run before any command checks have been "
"verified and applies to every command the bot has."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.check:9
#: disnake.ext.commands.bot_base.BotBase.check_once:19
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.application_command_check:9
#: of
msgid "This function can either be a regular function or a coroutine."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.check:11
#: disnake.ext.commands.bot_base.BotBase.check_once:21 of
msgid ""
"Similar to a command :func:`.check`\\, this takes a single parameter of "
"type :class:`.Context` and can only raise exceptions inherited from "
":exc:`.CommandError`."
msgstr ""

#: disnake.client.Client.change_presence:6 disnake.client.Client.event:8
#: disnake.ext.commands.bot_base.BotBase.check:16
#: disnake.ext.commands.bot_base.BotBase.check_once:26
#: disnake.ext.commands.bot_base.when_mentioned_or:6
#: disnake.ext.commands.common_bot_base.CommonBotBase.add_listener:9
#: disnake.ext.commands.common_bot_base.CommonBotBase.listen:8
#: disnake.ext.commands.core.before_invoke:9
#: disnake.ext.commands.core.has_any_role:20
#: disnake.ext.commands.core.has_permissions:16
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.application_command_check:16
#: of
msgid "Example"
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.check_once:1 of
msgid "A decorator that adds a \"call once\" global check to the bot."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.check_once:3 of
msgid ""
"Unlike regular global checks, this one is called only once per "
":meth:`.invoke` call."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.check_once:6 of
msgid ""
"Regular global checks are called whenever a command is called or "
":meth:`.Command.can_run` is called. This type of check bypasses that and "
"ensures that it's called only once, even inside the default help command."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.check_once:13 of
msgid ""
"When using this function the :class:`.Context` sent to a group subcommand"
" may only parse the parent command and not the subcommands due to it "
"being invoked once per :meth:`.Bot.invoke` call."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.command:1 of
msgid ""
"A shortcut decorator that invokes :func:`.command` and adds it to the "
"internal command list via :meth:`~.GroupMixin.add_command`."
msgstr ""

#: disnake.abc.Messageable.fetch_message disnake.abc.Messageable.pins
#: disnake.abc.Messageable.send disnake.client.Client.application_info
#: disnake.client.Client.bulk_edit_command_permissions
#: disnake.client.Client.bulk_overwrite_global_commands
#: disnake.client.Client.bulk_overwrite_guild_commands
#: disnake.client.Client.create_dm disnake.client.Client.create_global_command
#: disnake.client.Client.create_guild
#: disnake.client.Client.create_guild_command
#: disnake.client.Client.edit_command_permissions
#: disnake.client.Client.edit_global_command
#: disnake.client.Client.edit_guild_command disnake.client.Client.fetch_channel
#: disnake.client.Client.fetch_command_permissions
#: disnake.client.Client.fetch_global_command
#: disnake.client.Client.fetch_global_commands
#: disnake.client.Client.fetch_guild disnake.client.Client.fetch_guild_command
#: disnake.client.Client.fetch_guild_commands
#: disnake.client.Client.fetch_invite
#: disnake.client.Client.fetch_premium_sticker_packs
#: disnake.client.Client.fetch_stage_instance
#: disnake.client.Client.fetch_sticker disnake.client.Client.fetch_template
#: disnake.client.Client.fetch_user disnake.client.Client.fetch_webhook
#: disnake.client.Client.fetch_widget disnake.client.Client.get_channel
#: disnake.client.Client.get_emoji disnake.client.Client.get_global_command
#: disnake.client.Client.get_global_command_named
#: disnake.client.Client.get_guild
#: disnake.client.Client.get_guild_application_commands
#: disnake.client.Client.get_guild_command
#: disnake.client.Client.get_guild_command_named
#: disnake.client.Client.get_guild_message_commands
#: disnake.client.Client.get_guild_slash_commands
#: disnake.client.Client.get_guild_user_commands
#: disnake.client.Client.get_message disnake.client.Client.get_or_fetch_user
#: disnake.client.Client.get_partial_messageable
#: disnake.client.Client.get_stage_instance disnake.client.Client.get_sticker
#: disnake.client.Client.get_user disnake.client.Client.wait_for
#: disnake.ext.commands.HelpCommand.cog
#: disnake.ext.commands.HelpCommand.invoked_with
#: disnake.ext.commands.bot_base.BotBase.get_context
#: disnake.ext.commands.bot_base.BotBase.get_prefix
#: disnake.ext.commands.cog.Cog.get_application_commands
#: disnake.ext.commands.cog.Cog.get_commands
#: disnake.ext.commands.cog.Cog.get_listeners
#: disnake.ext.commands.cog.Cog.get_message_commands
#: disnake.ext.commands.cog.Cog.get_slash_commands
#: disnake.ext.commands.cog.Cog.get_user_commands
#: disnake.ext.commands.common_bot_base.CommonBotBase.get_cog
#: disnake.ext.commands.common_bot_base.CommonBotBase.is_owner
#: disnake.ext.commands.common_bot_base.CommonBotBase.remove_cog
#: disnake.ext.commands.context.Context.reply
#: disnake.ext.commands.context.Context.send_help
#: disnake.ext.commands.converter.run_converters
#: disnake.ext.commands.cooldowns.Cooldown.copy
#: disnake.ext.commands.cooldowns.Cooldown.get_retry_after
#: disnake.ext.commands.cooldowns.Cooldown.get_tokens
#: disnake.ext.commands.cooldowns.Cooldown.update_rate_limit
#: disnake.ext.commands.core.Command.can_run
#: disnake.ext.commands.core.Command.copy
#: disnake.ext.commands.core.Command.get_cooldown_retry_after
#: disnake.ext.commands.core.Command.is_on_cooldown
#: disnake.ext.commands.core.Group.copy
#: disnake.ext.commands.core.GroupMixin.command
#: disnake.ext.commands.core.GroupMixin.get_command
#: disnake.ext.commands.core.GroupMixin.group
#: disnake.ext.commands.core.GroupMixin.remove_command
#: disnake.ext.commands.ctx_menus_core.message_command
#: disnake.ext.commands.ctx_menus_core.user_command
#: disnake.ext.commands.flags.FlagConverter.convert
#: disnake.ext.commands.help.DefaultHelpCommand.get_destination
#: disnake.ext.commands.help.HelpCommand.command_not_found
#: disnake.ext.commands.help.HelpCommand.filter_commands
#: disnake.ext.commands.help.HelpCommand.get_command_signature
#: disnake.ext.commands.help.HelpCommand.get_destination
#: disnake.ext.commands.help.HelpCommand.get_max_size
#: disnake.ext.commands.help.HelpCommand.remove_mentions
#: disnake.ext.commands.help.HelpCommand.subcommand_not_found
#: disnake.ext.commands.help.MinimalHelpCommand.get_command_signature
#: disnake.ext.commands.help.MinimalHelpCommand.get_destination
#: disnake.ext.commands.help.MinimalHelpCommand.get_ending_note
#: disnake.ext.commands.help.MinimalHelpCommand.get_opening_note
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_message_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_slash_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_user_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.message_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_message_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_slash_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_user_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.user_command
#: disnake.ext.commands.params.Param
#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command
#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command_group
#: disnake.ext.commands.slash_core.SubCommandGroup.sub_command
#: disnake.ext.commands.slash_core.slash_command of
msgid "Returns"
msgstr ""

#: disnake.ext.commands.core.GroupMixin.command:4 of
msgid ""
"A decorator that converts the provided method into a Command, adds it to "
"the bot, then returns it."
msgstr ""

#: disnake.abc.Messageable.fetch_message disnake.abc.Messageable.pins
#: disnake.abc.Messageable.send disnake.client.Client.application_info
#: disnake.client.Client.bulk_edit_command_permissions
#: disnake.client.Client.bulk_overwrite_global_commands
#: disnake.client.Client.bulk_overwrite_guild_commands
#: disnake.client.Client.create_dm disnake.client.Client.create_global_command
#: disnake.client.Client.create_guild
#: disnake.client.Client.create_guild_command
#: disnake.client.Client.edit_command_permissions
#: disnake.client.Client.edit_global_command
#: disnake.client.Client.edit_guild_command disnake.client.Client.fetch_channel
#: disnake.client.Client.fetch_command_permissions
#: disnake.client.Client.fetch_global_command
#: disnake.client.Client.fetch_global_commands
#: disnake.client.Client.fetch_guild disnake.client.Client.fetch_guild_command
#: disnake.client.Client.fetch_guild_commands
#: disnake.client.Client.fetch_invite
#: disnake.client.Client.fetch_premium_sticker_packs
#: disnake.client.Client.fetch_stage_instance
#: disnake.client.Client.fetch_sticker disnake.client.Client.fetch_template
#: disnake.client.Client.fetch_user disnake.client.Client.fetch_webhook
#: disnake.client.Client.fetch_widget disnake.client.Client.get_channel
#: disnake.client.Client.get_emoji disnake.client.Client.get_global_command
#: disnake.client.Client.get_global_command_named
#: disnake.client.Client.get_guild
#: disnake.client.Client.get_guild_application_commands
#: disnake.client.Client.get_guild_command
#: disnake.client.Client.get_guild_command_named
#: disnake.client.Client.get_guild_message_commands
#: disnake.client.Client.get_guild_slash_commands
#: disnake.client.Client.get_guild_user_commands
#: disnake.client.Client.get_message disnake.client.Client.get_or_fetch_user
#: disnake.client.Client.get_partial_messageable
#: disnake.client.Client.get_stage_instance disnake.client.Client.get_sticker
#: disnake.client.Client.get_user disnake.client.Client.wait_for
#: disnake.ext.commands.HelpCommand.cog
#: disnake.ext.commands.HelpCommand.invoked_with
#: disnake.ext.commands.bot_base.BotBase.get_context
#: disnake.ext.commands.bot_base.BotBase.get_prefix
#: disnake.ext.commands.cog.Cog.get_application_commands
#: disnake.ext.commands.cog.Cog.get_commands
#: disnake.ext.commands.cog.Cog.get_listeners
#: disnake.ext.commands.cog.Cog.get_message_commands
#: disnake.ext.commands.cog.Cog.get_slash_commands
#: disnake.ext.commands.cog.Cog.get_user_commands
#: disnake.ext.commands.common_bot_base.CommonBotBase.get_cog
#: disnake.ext.commands.common_bot_base.CommonBotBase.is_owner
#: disnake.ext.commands.common_bot_base.CommonBotBase.remove_cog
#: disnake.ext.commands.context.Context.reply
#: disnake.ext.commands.context.Context.send_help
#: disnake.ext.commands.converter.run_converters
#: disnake.ext.commands.cooldowns.Cooldown.copy
#: disnake.ext.commands.cooldowns.Cooldown.get_retry_after
#: disnake.ext.commands.cooldowns.Cooldown.get_tokens
#: disnake.ext.commands.cooldowns.Cooldown.update_rate_limit
#: disnake.ext.commands.core.Command.can_run
#: disnake.ext.commands.core.Command.copy
#: disnake.ext.commands.core.Command.get_cooldown_retry_after
#: disnake.ext.commands.core.Command.is_on_cooldown
#: disnake.ext.commands.core.Group.copy
#: disnake.ext.commands.core.GroupMixin.command
#: disnake.ext.commands.core.GroupMixin.get_command
#: disnake.ext.commands.core.GroupMixin.group
#: disnake.ext.commands.core.GroupMixin.remove_command
#: disnake.ext.commands.ctx_menus_core.message_command
#: disnake.ext.commands.ctx_menus_core.user_command
#: disnake.ext.commands.flags.FlagConverter.convert
#: disnake.ext.commands.help.DefaultHelpCommand.get_destination
#: disnake.ext.commands.help.HelpCommand.command_not_found
#: disnake.ext.commands.help.HelpCommand.filter_commands
#: disnake.ext.commands.help.HelpCommand.get_command_signature
#: disnake.ext.commands.help.HelpCommand.get_destination
#: disnake.ext.commands.help.HelpCommand.get_max_size
#: disnake.ext.commands.help.HelpCommand.remove_mentions
#: disnake.ext.commands.help.HelpCommand.subcommand_not_found
#: disnake.ext.commands.help.MinimalHelpCommand.get_command_signature
#: disnake.ext.commands.help.MinimalHelpCommand.get_destination
#: disnake.ext.commands.help.MinimalHelpCommand.get_ending_note
#: disnake.ext.commands.help.MinimalHelpCommand.get_opening_note
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_message_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_slash_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_user_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.message_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_message_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_slash_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_user_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.user_command
#: disnake.ext.commands.params.Param
#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command
#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command_group
#: disnake.ext.commands.slash_core.SubCommandGroup.sub_command
#: disnake.ext.commands.slash_core.slash_command of
msgid "Return type"
msgstr ""

#: disnake.ext.commands.core.GroupMixin.command:5 of
msgid "Callable[..., :class:`Command`]"
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command:1
#: of
msgid ""
"A shortcut decorator that invokes :func:`.slash_command` and adds it to "
"the internal command list."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.message_command:4
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command:4
#: disnake.ext.commands.slash_core.slash_command:3 of
msgid "whether to automatically register the command or not. Defaults to ``True``"
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command:6
#: disnake.ext.commands.slash_core.slash_command:5 of
msgid ""
"name of the slash command you want to respond to (equals to function name"
" by default)."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command:8
#: disnake.ext.commands.slash_core.slash_command:7 of
msgid "the description of the slash command. It will be visible in Discord."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command:10
#: disnake.ext.commands.slash_core.slash_command:9 of
msgid ""
"the list of slash command options. The options will be visible in "
"Discord. This is the old way of specifying options. Consider using "
":ref:`param_syntax` instead."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.message_command:5
#: disnake.ext.commands.ctx_menus_core.user_command:5
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.message_command:8
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command:13
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.user_command:8
#: disnake.ext.commands.slash_core.slash_command:12 of
msgid ""
"whether the command is enabled by default when the app is added to a "
"guild."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command:15
#: disnake.ext.commands.slash_core.slash_command:14 of
msgid ""
"if specified, the client will register a command in these guilds. "
"Otherwise this command will be registered globally in ~1 hour."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command:18
#: disnake.ext.commands.slash_core.slash_command:17 of
msgid ""
"binds function names to option names. If the name of an option already "
"matches the corresponding function param, you don't have to specify the "
"connectors. Connectors template: ``{\"option-name\": \"param_name\", "
"...}``. If you're using :ref:`param_syntax`, you don't need to specify "
"this."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command:25
#: of
msgid ""
"A decorator that converts the provided method into a "
"InvokableSlashCommand, adds it to the bot, then returns it."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command:26
#: disnake.ext.commands.slash_core.slash_command:25 of
msgid "Callable[..., :class:`InvokableSlashCommand`]"
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.user_command:1
#: of
msgid ""
"A shortcut decorator that invokes :func:`.user_command` and adds it to "
"the internal command list."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.user_command:4
#: of
msgid ""
"whether to automatically register the command or not. Defaults to "
"``True``."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.user_command:3
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.user_command:6
#: of
msgid ""
"name of the user command you want to respond to (equals to function name "
"by default)."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.message_command:9
#: disnake.ext.commands.ctx_menus_core.user_command:9
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.message_command:10
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.user_command:10
#: of
msgid ""
"if specified, the client will register the command in these guilds. "
"Otherwise this command will be registered globally in ~1 hour."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.message_command:14
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.user_command:14
#: of
msgid ""
"A decorator that converts the provided method into a "
"InvokableUserCommand, adds it to the bot, then returns it."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.user_command:14
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.message_command:15
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.user_command:15
#: of
msgid "Callable[..., :class:`InvokableUserCommand`]"
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.message_command:1
#: of
msgid ""
"A shortcut decorator that invokes :func:`.message_command` and adds it to"
" the internal command list."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.message_command:3
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.message_command:6
#: of
msgid ""
"name of the message command you want to respond to (equals to function "
"name by default)."
msgstr ""

#: disnake.client.Client.event:1 of
msgid "A decorator that registers an event to listen to."
msgstr ""

#: disnake.client.Client.event:3 of
msgid ""
"You can find more info about the events on the :ref:`documentation below "
"<discord-api-events>`."
msgstr ""

#: disnake.client.Client.event:5 of
msgid ""
"The events must be a :ref:`coroutine <coroutine>`, if not, "
":exc:`TypeError` is raised."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.group:1 of
msgid ""
"A shortcut decorator that invokes :func:`.group` and adds it to the "
"internal command list via :meth:`~.GroupMixin.add_command`."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.group:4 of
msgid ""
"A decorator that converts the provided method into a Group, adds it to "
"the bot, then returns it."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.group:5 of
msgid "Callable[..., :class:`Group`]"
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.listen:1 of
msgid ""
"A decorator that registers another function as an external event "
"listener. Basically this allows you to listen to multiple events from "
"different places e.g. such as :func:`.on_ready`"
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.listen:5 of
msgid "The functions being listened to must be a :ref:`coroutine <coroutine>`."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.listen:21 of
msgid "Would print one and two in an unspecified order."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.listen:23 of
msgid "The function being listened to is not a coroutine."
msgstr ""

#: disnake.ext.commands.Bot.activity:1 of
msgid "The activity being used upon logging in."
msgstr ""

#: disnake.ext.commands.Bot.activity:4 of
msgid "Optional[:class:`.BaseActivity`]"
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.add_check:1
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_app_command_check:1
#: of
msgid "Adds a global check to the bot."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.add_check:3
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_app_command_check:3
#: of
msgid ""
"This is the non-decorator interface to :meth:`.check`, "
":meth:`.check_once`, :meth:`.slash_command_check` and etc."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.add_check:6
#: disnake.ext.commands.bot_base.BotBase.remove_check:6
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_app_command_check:6
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_app_command_check:6
#: of
msgid "If none of bool params are specified, the check is for text commands only."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.add_check:9
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_app_command_check:9
#: of
msgid "The function that was used as a global check."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.add_check:10
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_app_command_check:10
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.application_command_check:23
#: of
msgid "If the function should only be called once per :meth:`.invoke` call."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_app_command_check:13
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.application_command_check:28
#: of
msgid "If this check is for slash commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_app_command_check:15
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.application_command_check:30
#: of
msgid "If this check is for user commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_app_command_check:17
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.application_command_check:32
#: of
msgid "If this check is for message commands."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.add_cog:1 of
msgid "Adds a \"cog\" to the bot."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.add_cog:3 of
msgid "A cog is a class that has its own event listeners and commands."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.add_cog:7 of
msgid ""
":exc:`.ClientException` is raised when a cog with the same name is "
"already loaded."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.add_cog:10 of
msgid "The cog to register to the bot."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.add_cog:12 of
msgid ""
"If a previously loaded cog with the same name should be ejected instead "
"of raising an error.  .. versionadded:: 2.0"
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.add_cog:12 of
msgid ""
"If a previously loaded cog with the same name should be ejected instead "
"of raising an error."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.add_cog:18 of
msgid "The cog does not inherit from :class:`.Cog`."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.add_cog:19 of
msgid "An error happened during loading."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.add_cog:20 of
msgid "A cog with the same name is already loaded."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.add_command:1 of
msgid "Adds a :class:`.Command` into the internal list of commands."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.add_command:3 of
msgid ""
"This is usually not called, instead the :meth:`~.GroupMixin.command` or "
":meth:`~.GroupMixin.group` shortcut decorators are used instead."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.add_command:6 of
msgid ""
"Raise :exc:`.CommandRegistrationError` instead of generic "
":exc:`.ClientException`"
msgstr ""

#: disnake.ext.commands.core.GroupMixin.add_command:9 of
msgid "The command to add."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.add_command:12 of
msgid "If the command or its alias is already registered by different command."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.add_command:13 of
msgid "If the command passed is not a subclass of :class:`.Command`."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.add_listener:1 of
msgid "The non decorator alternative to :meth:`.listen`."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.add_listener:3 of
msgid "The function to call."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.add_listener:5 of
msgid "The name of the event to listen for. Defaults to ``func.__name__``."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_message_command:1
#: of
msgid ""
"Adds an :class:`.InvokableMessageCommand` into the internal list of "
"message commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_message_command:3
#: of
msgid ""
"This is usually not called, instead the :meth:`.message_command` or "
"shortcut decorators are used."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_message_command:6
#: of
msgid "The message command to add."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_message_command:9
#: of
msgid "If the message command is already registered."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_message_command:10
#: of
msgid ""
"If the message command passed is not an instance of "
":class:`.InvokableMessageCommand`."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_slash_command:1
#: of
msgid ""
"Adds an :class:`.InvokableSlashCommand` into the internal list of slash "
"commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_slash_command:3
#: of
msgid ""
"This is usually not called, instead the :meth:`.slash_command` or "
"shortcut decorators are used."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_slash_command:6
#: of
msgid "The slash command to add."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_slash_command:9
#: of
msgid "If the slash command is already registered."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_slash_command:10
#: of
msgid ""
"If the slash command passed is not an instance of "
":class:`.InvokableSlashCommand`."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_user_command:1
#: of
msgid ""
"Adds an :class:`.InvokableUserCommand` into the internal list of user "
"commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_user_command:3
#: of
msgid ""
"This is usually not called, instead the :meth:`.user_command` or shortcut"
" decorators are used."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_user_command:6
#: of
msgid "The user command to add."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_user_command:9
#: of
msgid "If the user command is already registered."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.add_user_command:10
#: of
msgid ""
"If the user command passed is not an instance of "
":class:`.InvokableUserCommand`."
msgstr ""

#: disnake.client.Client.add_view:1 of
msgid "Registers a :class:`~disnake.ui.View` for persistent listening."
msgstr ""

#: disnake.client.Client.add_view:3 of
msgid ""
"This method should be used for when a view is comprised of components "
"that last longer than the lifecycle of the program."
msgstr ""

#: disnake.client.Client.add_view:8 of
msgid "The view to register for dispatching."
msgstr ""

#: disnake.client.Client.add_view:10 of
msgid ""
"The message ID that the view is attached to. This is currently used to "
"refresh the view's state during message update events. If not given then "
"message update events are not propagated for the view."
msgstr ""

#: disnake.client.Client.add_view:15 of
msgid "A view was not passed."
msgstr ""

#: disnake.client.Client.add_view:16 of
msgid ""
"The view is not persistent. A persistent view has no timeout     and all "
"their components have an explicitly provided custom_id."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.after_message_command_invoke:1
#: of
msgid "Similar to :meth:`.after_invoke` but for message commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.after_slash_command_invoke:1
#: of
msgid "Similar to :meth:`.after_invoke` but for slash commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.after_user_command_invoke:1
#: of
msgid "Similar to :meth:`.after_invoke` but for user commands."
msgstr ""

#: disnake.ext.commands.Bot.allowed_mentions:1 of
msgid "The allowed mention configuration."
msgstr ""

#: disnake.ext.commands.Bot.allowed_mentions:5 of
msgid "Optional[:class:`~disnake.AllowedMentions`]"
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.application_command_check:3
#: of
msgid ""
"A global check is similar to a :func:`.check` that is applied on a per "
"command basis except it is run before any application command checks have"
" been verified and applies to every application command the bot has."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.application_command_check:11
#: of
msgid ""
"Similar to a command :func:`.check`\\, this takes a single parameter of "
"type :class:`.ApplicationCommandInteraction` and can only raise "
"exceptions inherited from :exc:`.CommandError`."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.application_command_check:26
#: of
msgid "If this check is for text commands."
msgstr ""

#: disnake.ext.commands.Bot.application_flags:1 of
msgid "The client's application flags."
msgstr ""

#: disnake.ext.commands.Bot.application_flags:5 of
msgid ":class:`~disnake.ApplicationFlags`"
msgstr ""

#: disnake.ext.commands.Bot.application_id:1 of
msgid "The client's application ID."
msgstr ""

#: disnake.ext.commands.Bot.application_id:3 of
msgid ""
"If this is not passed via ``__init__`` then this is retrieved through the"
" gateway when an event contains the data. Usually after "
":func:`~disnake.on_connect` is called."
msgstr ""

#: disnake.abc.Messageable.fetch_message:1 disnake.abc.Messageable.pins:1
#: disnake.abc.Messageable.send:1 disnake.abc.Messageable.trigger_typing:1
#: disnake.client.Client.application_info:1
#: disnake.client.Client.before_identify_hook:1
#: disnake.client.Client.bulk_edit_command_permissions:1
#: disnake.client.Client.bulk_fetch_command_permissions:1
#: disnake.client.Client.bulk_overwrite_global_commands:1
#: disnake.client.Client.bulk_overwrite_guild_commands:1
#: disnake.client.Client.change_presence:1 disnake.client.Client.connect:1
#: disnake.client.Client.create_dm:1
#: disnake.client.Client.create_global_command:1
#: disnake.client.Client.create_guild:1
#: disnake.client.Client.create_guild_command:1
#: disnake.client.Client.delete_global_command:1
#: disnake.client.Client.delete_guild_command:1
#: disnake.client.Client.delete_invite:1
#: disnake.client.Client.edit_global_command:1
#: disnake.client.Client.edit_guild_command:1
#: disnake.client.Client.fetch_channel:1
#: disnake.client.Client.fetch_command_permissions:1
#: disnake.client.Client.fetch_global_command:1
#: disnake.client.Client.fetch_global_commands:1
#: disnake.client.Client.fetch_guild:1
#: disnake.client.Client.fetch_guild_command:1
#: disnake.client.Client.fetch_guild_commands:1
#: disnake.client.Client.fetch_invite:1
#: disnake.client.Client.fetch_premium_sticker_packs:1
#: disnake.client.Client.fetch_stage_instance:1
#: disnake.client.Client.fetch_sticker:1 disnake.client.Client.fetch_template:1
#: disnake.client.Client.fetch_user:1 disnake.client.Client.fetch_webhook:1
#: disnake.client.Client.fetch_widget:1
#: disnake.client.Client.get_or_fetch_user:1 disnake.client.Client.login:1
#: disnake.client.Client.on_error:1 disnake.client.Client.start:1
#: disnake.client.Client.wait_for:1
#: disnake.client.Client.wait_until_first_connect:1
#: disnake.client.Client.wait_until_ready:1
#: disnake.ext.commands.bot_base.BotBase.get_context:1
#: disnake.ext.commands.bot_base.BotBase.get_prefix:1
#: disnake.ext.commands.bot_base.BotBase.invoke:1
#: disnake.ext.commands.bot_base.BotBase.on_command_error:1
#: disnake.ext.commands.bot_base.BotBase.process_commands:1
#: disnake.ext.commands.common_bot_base.CommonBotBase.close:1
#: disnake.ext.commands.common_bot_base.CommonBotBase.is_owner:1
#: disnake.ext.commands.context.Context.invoke:1
#: disnake.ext.commands.context.Context.reinvoke:1
#: disnake.ext.commands.context.Context.reply:1
#: disnake.ext.commands.context.Context.send_help:1
#: disnake.ext.commands.converter.CategoryChannelConverter.convert:1
#: disnake.ext.commands.converter.ColourConverter.convert:1
#: disnake.ext.commands.converter.Converter.convert:1
#: disnake.ext.commands.converter.EmojiConverter.convert:1
#: disnake.ext.commands.converter.GameConverter.convert:1
#: disnake.ext.commands.converter.GuildChannelConverter.convert:1
#: disnake.ext.commands.converter.GuildConverter.convert:1
#: disnake.ext.commands.converter.GuildStickerConverter.convert:1
#: disnake.ext.commands.converter.InviteConverter.convert:1
#: disnake.ext.commands.converter.MemberConverter.convert:1
#: disnake.ext.commands.converter.MessageConverter.convert:1
#: disnake.ext.commands.converter.ObjectConverter.convert:1
#: disnake.ext.commands.converter.PartialEmojiConverter.convert:1
#: disnake.ext.commands.converter.PartialMessageConverter.convert:1
#: disnake.ext.commands.converter.RoleConverter.convert:1
#: disnake.ext.commands.converter.StageChannelConverter.convert:1
#: disnake.ext.commands.converter.StoreChannelConverter.convert:1
#: disnake.ext.commands.converter.TextChannelConverter.convert:1
#: disnake.ext.commands.converter.ThreadConverter.convert:1
#: disnake.ext.commands.converter.UserConverter.convert:1
#: disnake.ext.commands.converter.VoiceChannelConverter.convert:1
#: disnake.ext.commands.converter.clean_content.convert:1
#: disnake.ext.commands.converter.run_converters:1
#: disnake.ext.commands.core.Command.__call__:1
#: disnake.ext.commands.core.Command.can_run:1
#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand.__call__:1
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand.__call__:1
#: disnake.ext.commands.flags.FlagConverter.convert:1
#: disnake.ext.commands.help.HelpCommand.command_callback:1
#: disnake.ext.commands.help.HelpCommand.filter_commands:1
#: disnake.ext.commands.help.HelpCommand.on_help_command_error:1
#: disnake.ext.commands.help.HelpCommand.prepare_help_command:1
#: disnake.ext.commands.help.HelpCommand.send_bot_help:1
#: disnake.ext.commands.help.HelpCommand.send_cog_help:1
#: disnake.ext.commands.help.HelpCommand.send_command_help:1
#: disnake.ext.commands.help.HelpCommand.send_error_message:1
#: disnake.ext.commands.help.HelpCommand.send_group_help:1
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.process_app_command_autocompletion:1
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.process_application_commands:1
#: of
msgid "|coro|"
msgstr ""

#: disnake.client.Client.application_info:3 of
msgid "Retrieves the bot's application information."
msgstr ""

#: disnake.client.Client.application_info:5 of
msgid "Retrieving the information failed somehow."
msgstr ""

#: disnake.client.Client.application_info:7 of
msgid "The bot's application information."
msgstr ""

#: disnake.client.Client.application_info:8 of
msgid ":class:`.AppInfo`"
msgstr ""

#: disnake.client.Client.before_identify_hook:3 of
msgid ""
"A hook that is called before IDENTIFYing a session. This is useful if you"
" wish to have more control over the synchronization of multiple "
"IDENTIFYing clients."
msgstr ""

#: disnake.client.Client.before_identify_hook:7 of
msgid "The default implementation sleeps for 5 seconds."
msgstr ""

#: disnake.client.Client.before_identify_hook:11 of
msgid "The shard ID that requested being IDENTIFY'd"
msgstr ""

#: disnake.client.Client.before_identify_hook:13 of
msgid "Whether this IDENTIFY is the first initial IDENTIFY."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.before_message_command_invoke:1
#: of
msgid "Similar to :meth:`.before_invoke` but for message commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.before_slash_command_invoke:1
#: of
msgid "Similar to :meth:`.before_invoke` but for slash commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.before_user_command_invoke:1
#: of
msgid "Similar to :meth:`.before_invoke` but for user commands."
msgstr ""

#: disnake.client.Client.bulk_edit_command_permissions:3 of
msgid "Edits guild permissions of multiple application commands at once."
msgstr ""

#: disnake.client.Client.bulk_edit_command_permissions:7
#: disnake.client.Client.edit_command_permissions:3 of
msgid "The ID of the guild where the permissions should be applied."
msgstr ""

#: disnake.client.Client.bulk_edit_command_permissions:9 of
msgid "A list of partial permissions for each app command you want to edit."
msgstr ""

#: disnake.client.Client.bulk_edit_command_permissions:12 of
msgid "A list of edited permissions of application commands."
msgstr ""

#: disnake.client.Client.bulk_edit_command_permissions:13 of
msgid "List[:class:`.GuildApplicationCommandPermissions`]"
msgstr ""

#: disnake.client.Client.bulk_fetch_command_permissions:3 of
msgid ""
"Requests a list of :class:`.GuildApplicationCommandPermissions` "
"configured for this guild."
msgstr ""

#: disnake.client.Client.bulk_fetch_command_permissions:7
#: disnake.client.Client.fetch_command_permissions:7 of
msgid "The ID of the guild to inspect."
msgstr ""

#: disnake.client.Client.bulk_overwrite_global_commands:3 of
msgid "Overwrites several global application commands in one API request."
msgstr ""

#: disnake.client.Client.bulk_overwrite_global_commands:7
#: disnake.client.Client.bulk_overwrite_guild_commands:9 of
msgid "a list of application commands to insert instead of the existing commands."
msgstr ""

#: disnake.client.Client.bulk_overwrite_global_commands:10
#: disnake.client.Client.bulk_overwrite_guild_commands:12 of
msgid "A list of registered application commands."
msgstr ""

#: disnake.client.Client.bulk_overwrite_global_commands:11
#: disnake.client.Client.bulk_overwrite_guild_commands:13
#: disnake.client.Client.fetch_global_commands:8
#: disnake.client.Client.fetch_guild_commands:11
#: disnake.client.Client.get_guild_application_commands:7 of
msgid "List[:class:`.ApplicationCommand`]"
msgstr ""

#: disnake.client.Client.bulk_overwrite_guild_commands:3 of
msgid "Overwrites several guild application commands in one API request."
msgstr ""

#: disnake.client.Client.bulk_overwrite_guild_commands:7 of
msgid "the ID of the guild where the commands should be overwritten."
msgstr ""

#: disnake.ext.commands.Bot.cached_messages:1 of
msgid "Read-only list of messages the connected client has cached."
msgstr ""

#: disnake.ext.commands.Bot.cached_messages:5 of
msgid "Sequence[:class:`.Message`]"
msgstr ""

#: disnake.client.Client.change_presence:3 of
msgid "Changes the client's presence."
msgstr ""

#: disnake.client.Client.change_presence:12 of
msgid "Removed the ``afk`` keyword-only parameter."
msgstr ""

#: disnake.client.Client.change_presence:15 of
msgid "The activity being done. ``None`` if no currently active activity is done."
msgstr ""

#: disnake.client.Client.change_presence:17 of
msgid ""
"Indicates what status to change to. If ``None``, then "
":attr:`.Status.online` is used."
msgstr ""

#: disnake.client.Client.change_presence:21 of
msgid "If the ``activity`` parameter is not the proper type."
msgstr ""

#: disnake.client.Client.clear:1 of
msgid "Clears the internal state of the bot."
msgstr ""

#: disnake.client.Client.clear:3 of
msgid ""
"After this, the bot can be considered \"re-opened\", i.e. "
":meth:`is_closed` and :meth:`is_ready` both return ``False`` along with "
"the bot's internal cache cleared."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.close:3 of
msgid "Closes the connection to Discord."
msgstr ""

#: disnake.ext.commands.Bot.cogs:1 of
msgid "A read-only mapping of cog name to cog."
msgstr ""

#: disnake.ext.commands.Bot.cogs:3 of
msgid "Mapping[:class:`str`, :class:`Cog`]"
msgstr ""

#: disnake.ext.commands.Bot.commands:1 disnake.ext.commands.Group.commands:1
#: disnake.ext.commands.GroupMixin.commands:1 of
msgid "A unique set of commands without aliases that are registered."
msgstr ""

#: disnake.ext.commands.Bot.commands:3 disnake.ext.commands.Group.commands:3
#: disnake.ext.commands.GroupMixin.commands:3 of
msgid "Set[:class:`.Command`]"
msgstr ""

#: disnake.client.Client.connect:3 of
msgid ""
"Creates a websocket connection and lets the websocket listen to messages "
"from Discord. This is a loop that runs the entire event system and "
"miscellaneous aspects of the library. Control is not resumed until the "
"WebSocket connection is terminated."
msgstr ""

#: disnake.client.Client.connect:8 of
msgid ""
"If we should attempt reconnecting, either due to internet failure or a "
"specific failure on Discord's part. Certain disconnects that lead to bad "
"state will not be handled (such as invalid sharding payloads or bad "
"tokens)."
msgstr ""

#: disnake.client.Client.connect:14 of
msgid ""
"If the gateway to connect to Discord is not found. Usually if this     is"
" thrown then there is a Discord API outage."
msgstr ""

#: disnake.client.Client.connect:15 of
msgid "The websocket connection has been terminated."
msgstr ""

#: disnake.client.Client.create_dm:3 of
msgid "Creates a :class:`.DMChannel` with this user."
msgstr ""

#: disnake.client.Client.create_dm:5 of
msgid ""
"This should be rarely called, as this is done transparently for most "
"people."
msgstr ""

#: disnake.client.Client.create_dm:10 of
msgid "The user to create a DM with."
msgstr ""

#: disnake.client.Client.create_dm:13 of
msgid "The channel that was created."
msgstr ""

#: disnake.client.Client.create_dm:14 of
msgid ":class:`.DMChannel`"
msgstr ""

#: disnake.client.Client.create_global_command:3 of
msgid "Creates a global application command."
msgstr ""

#: disnake.client.Client.create_global_command:7
#: disnake.client.Client.create_guild_command:9 of
msgid "an object representing the application command."
msgstr ""

#: disnake.client.Client.create_global_command:10
#: disnake.client.Client.create_guild_command:12 of
msgid "The application command that was created."
msgstr ""

#: disnake.client.Client.create_global_command:11
#: disnake.client.Client.create_guild_command:13
#: disnake.client.Client.edit_global_command:13
#: disnake.client.Client.edit_guild_command:15
#: disnake.client.Client.fetch_global_command:11
#: disnake.client.Client.fetch_guild_command:13
#: disnake.client.Client.get_global_command:7
#: disnake.client.Client.get_global_command_named:9
#: disnake.client.Client.get_guild_command:9
#: disnake.client.Client.get_guild_command_named:11 of
msgid ":class:`.ApplicationCommand`"
msgstr ""

#: disnake.client.Client.create_guild:3 of
msgid "Creates a :class:`.Guild`."
msgstr ""

#: disnake.client.Client.create_guild:5 of
msgid "Bot accounts in more than 10 guilds are not allowed to create guilds."
msgstr ""

#: disnake.client.Client.create_guild:7 of
msgid "The name of the guild."
msgstr ""

#: disnake.client.Client.create_guild:9 of
msgid ""
"The region for the voice communication server. Defaults to "
":attr:`.VoiceRegion.us_west`."
msgstr ""

#: disnake.client.Client.create_guild:12 of
msgid ""
"The :term:`py:bytes-like object` representing the icon. See "
":meth:`.ClientUser.edit` for more details on what is expected."
msgstr ""

#: disnake.client.Client.create_guild:15 of
msgid "The code for a template to create the guild with.  .. versionadded:: 1.4"
msgstr ""

#: disnake.client.Client.create_guild:15 of
msgid "The code for a template to create the guild with."
msgstr ""

#: disnake.client.Client.create_guild:20 of
msgid "Guild creation failed."
msgstr ""

#: disnake.client.Client.create_guild:21 of
msgid "Invalid icon image format given. Must be PNG or JPG."
msgstr ""

#: disnake.client.Client.create_guild:23 of
msgid "The guild created. This is not the same guild that is added to cache."
msgstr ""

#: disnake.client.Client.create_guild:25 disnake.client.Client.fetch_guild:21
#: of
msgid ":class:`.Guild`"
msgstr ""

#: disnake.client.Client.create_guild_command:3 of
msgid "Creates a guild application command."
msgstr ""

#: disnake.client.Client.create_guild_command:7 of
msgid "the ID of the guild where the command should be inserted."
msgstr ""

#: disnake.client.Client.delete_global_command:3 of
msgid "Deletes a global application command."
msgstr ""

#: disnake.client.Client.delete_global_command:7
#: disnake.client.Client.delete_guild_command:9 of
msgid "the ID of the command to delete."
msgstr ""

#: disnake.client.Client.delete_guild_command:3 of
msgid "Deletes a guild application command."
msgstr ""

#: disnake.client.Client.delete_guild_command:7 of
msgid "the ID of the guild where the command should be deleted."
msgstr ""

#: disnake.client.Client.delete_invite:3 of
msgid "Revokes an :class:`.Invite`, URL, or ID to an invite."
msgstr ""

#: disnake.client.Client.delete_invite:5 of
msgid ""
"You must have the :attr:`~.Permissions.manage_channels` permission in the"
" associated guild to do this."
msgstr ""

#: disnake.client.Client.delete_invite:8 of
msgid "The invite to revoke."
msgstr ""

#: disnake.client.Client.delete_invite:11 of
msgid "You do not have permissions to revoke invites."
msgstr ""

#: disnake.client.Client.delete_invite:12 of
msgid "The invite is invalid or expired."
msgstr ""

#: disnake.client.Client.delete_invite:13 of
msgid "Revoking the invite failed."
msgstr ""

#: disnake.client.Client.edit_command_permissions:1 of
msgid "Edits guild permissions of a single command."
msgstr ""

#: disnake.client.Client.edit_command_permissions:5 of
msgid "The ID of the app command you want to apply these permissions to."
msgstr ""

#: disnake.client.Client.edit_command_permissions:7 of
msgid ""
"Roles or users to booleans. ``True`` means \"allow\", ``False`` means "
"\"deny\"."
msgstr ""

#: disnake.client.Client.edit_command_permissions:9 of
msgid "Role IDs to booleans."
msgstr ""

#: disnake.client.Client.edit_command_permissions:11 of
msgid "User IDs to booleans."
msgstr ""

#: disnake.client.Client.edit_command_permissions:14 of
msgid "The object representing the edited app command permissions."
msgstr ""

#: disnake.client.Client.edit_command_permissions:15
#: disnake.client.Client.fetch_command_permissions:13 of
msgid ":class:`.GuildApplicationCommandPermissions`"
msgstr ""

#: disnake.client.Client.edit_global_command:3 of
msgid "Edits a global application command."
msgstr ""

#: disnake.client.Client.edit_global_command:7
#: disnake.client.Client.edit_guild_command:9 of
msgid "the ID of the command to edit."
msgstr ""

#: disnake.client.Client.edit_global_command:9
#: disnake.client.Client.edit_guild_command:11 of
msgid "an object representing the edited command."
msgstr ""

#: disnake.client.Client.edit_global_command:12
#: disnake.client.Client.edit_guild_command:14 of
msgid "The edited application command."
msgstr ""

#: disnake.client.Client.edit_guild_command:3 of
msgid "Edits a guild application command."
msgstr ""

#: disnake.client.Client.edit_guild_command:7 of
msgid "the ID of the guild where the command should be edited."
msgstr ""

#: disnake.ext.commands.Bot.emojis:1 of
msgid "The emojis that the connected client has."
msgstr ""

#: disnake.ext.commands.Bot.emojis:3 of
msgid "List[:class:`.Emoji`]"
msgstr ""

#: disnake.ext.commands.Bot.extensions:1 of
msgid "A read-only mapping of extension name to extension."
msgstr ""

#: disnake.ext.commands.Bot.extensions:3 of
msgid "Mapping[:class:`str`, :class:`py:types.ModuleType`]"
msgstr ""

#: disnake.client.Client.fetch_channel:3 of
msgid ""
"Retrieves a :class:`.abc.GuildChannel`, :class:`.abc.PrivateChannel`, or "
":class:`.Thread` with the specified ID."
msgstr ""

#: disnake.client.Client.fetch_channel:7 of
msgid ""
"This method is an API call. For general usage, consider "
":meth:`get_channel` instead."
msgstr ""

#: disnake.client.Client.fetch_channel:11 of
msgid "An unknown channel type was received from Discord."
msgstr ""

#: disnake.client.Client.fetch_channel:12 of
msgid "Retrieving the channel failed."
msgstr ""

#: disnake.client.Client.fetch_channel:13 of
msgid "Invalid Channel ID."
msgstr ""

#: disnake.client.Client.fetch_channel:14 of
msgid "You do not have permission to fetch this channel."
msgstr ""

#: disnake.client.Client.fetch_channel:16 of
msgid "The channel from the ID."
msgstr ""

#: disnake.client.Client.fetch_channel:17 of
msgid ""
"Union[:class:`.abc.GuildChannel`, :class:`.abc.PrivateChannel`, "
":class:`.Thread`]"
msgstr ""

#: disnake.client.Client.fetch_command_permissions:3 of
msgid ""
"Requests :class:`.GuildApplicationCommandPermissions` for a specific "
"command."
msgstr ""

#: disnake.client.Client.fetch_command_permissions:9 of
msgid "The ID of the application command"
msgstr ""

#: disnake.client.Client.fetch_command_permissions:12 of
msgid "The edited app command permissions."
msgstr ""

#: disnake.client.Client.fetch_global_command:3 of
msgid "Requests a global application command."
msgstr ""

#: disnake.client.Client.fetch_global_command:7
#: disnake.client.Client.fetch_guild_command:9 of
msgid "the ID of the command to request."
msgstr ""

#: disnake.client.Client.fetch_global_command:10
#: disnake.client.Client.fetch_guild_command:12 of
msgid "The requested application command."
msgstr ""

#: disnake.client.Client.fetch_global_commands:3 of
msgid "Requests a list of global application commands."
msgstr ""

#: disnake.client.Client.fetch_global_commands:7
#: disnake.client.Client.fetch_guild_commands:10 of
msgid "A list of application commands."
msgstr ""

#: disnake.client.Client.fetch_guild:3 of
msgid "Retrieves a :class:`.Guild` from an ID."
msgstr ""

#: disnake.client.Client.fetch_guild:7 of
msgid ""
"Using this, you will **not** receive :attr:`.Guild.channels`, "
":attr:`.Guild.members`, :attr:`.Member.activity` and "
":attr:`.Member.voice` per :class:`.Member`."
msgstr ""

#: disnake.client.Client.fetch_guild:12 of
msgid ""
"This method is an API call. For general usage, consider :meth:`get_guild`"
" instead."
msgstr ""

#: disnake.client.Client.fetch_guild:14 of
msgid "The guild's ID to fetch from."
msgstr ""

#: disnake.client.Client.fetch_guild:17 of
msgid "You do not have access to the guild."
msgstr ""

#: disnake.client.Client.fetch_guild:18 of
msgid "Getting the guild failed."
msgstr ""

#: disnake.client.Client.fetch_guild:20 of
msgid "The guild from the ID."
msgstr ""

#: disnake.client.Client.fetch_guild_command:3 of
msgid "Requests a guild application command."
msgstr ""

#: disnake.client.Client.fetch_guild_command:7 of
msgid "the ID of the guild to fetch command from."
msgstr ""

#: disnake.client.Client.fetch_guild_commands:3 of
msgid "Requests a list of guild application commands."
msgstr ""

#: disnake.client.Client.fetch_guild_commands:7 of
msgid "the ID of the guild to fetch commands from."
msgstr ""

#: disnake.client.Client.fetch_guilds:1 of
msgid "Retrieves an :class:`.AsyncIterator` that enables receiving your guilds."
msgstr ""

#: disnake.client.Client.fetch_guilds:5 of
msgid ""
"Using this, you will only receive :attr:`.Guild.owner`, "
":attr:`.Guild.icon`, :attr:`.Guild.id`, and :attr:`.Guild.name` per "
":class:`.Guild`."
msgstr ""

#: disnake.client.Client.fetch_guilds:10 of
msgid ""
"This method is an API call. For general usage, consider :attr:`guilds` "
"instead."
msgstr ""

#: disnake.abc.Messageable.history:6 disnake.client.Client.fetch_guilds:13
#: disnake.client.Client.wait_for:22 disnake.ext.commands.core.check:37
#: disnake.ext.commands.core.check_any:20 of
msgid "Examples"
msgstr ""

#: disnake.abc.Messageable.history:7 disnake.client.Client.fetch_guilds:14 of
msgid "Usage ::"
msgstr ""

#: disnake.client.Client.fetch_guilds:19 of
msgid "Flattening into a list ::"
msgstr ""

#: disnake.abc.Messageable.history:19 disnake.client.Client.fetch_guilds:24 of
msgid "All parameters are optional."
msgstr ""

#: disnake.client.Client.fetch_guilds:26 of
msgid ""
"The number of guilds to retrieve. If ``None``, it retrieves every guild "
"you have access to. Note, however, that this would make it a slow "
"operation. Defaults to ``100``."
msgstr ""

#: disnake.client.Client.fetch_guilds:31 of
msgid ""
"Retrieves guilds before this date or object. If a datetime is provided, "
"it is recommended to use a UTC aware datetime. If the datetime is naive, "
"it is assumed to be local time."
msgstr ""

#: disnake.client.Client.fetch_guilds:35 of
msgid ""
"Retrieve guilds after this date or object. If a datetime is provided, it "
"is recommended to use a UTC aware datetime. If the datetime is naive, it "
"is assumed to be local time."
msgstr ""

#: disnake.client.Client.fetch_guilds:40 of
msgid "Getting the guilds failed."
msgstr ""

#: disnake.abc.Messageable.history disnake.client.Client.fetch_guilds
#: disnake.client.Client.get_all_channels disnake.client.Client.get_all_members
#: disnake.ext.commands.cog.Cog.walk_commands
#: disnake.ext.commands.core.GroupMixin.walk_commands of
msgid "Yields"
msgstr ""

#: disnake.client.Client.fetch_guilds:42 of
msgid ":class:`.Guild` -- The guild with the guild data parsed."
msgstr ""

#: disnake.client.Client.fetch_invite:3 of
msgid "Gets an :class:`.Invite` from a discord.gg URL or ID."
msgstr ""

#: disnake.client.Client.fetch_invite:7 of
msgid ""
"If the invite is for a guild you have not joined, the guild and channel "
"attributes of the returned :class:`.Invite` will be "
":class:`.PartialInviteGuild` and :class:`.PartialInviteChannel` "
"respectively."
msgstr ""

#: disnake.client.Client.fetch_invite:11 of
msgid "The Discord invite ID or URL (must be a discord.gg URL)."
msgstr ""

#: disnake.client.Client.fetch_invite:13 of
msgid ""
"Whether to include count information in the invite. This fills the "
":attr:`.Invite.approximate_member_count` and "
":attr:`.Invite.approximate_presence_count` fields."
msgstr ""

#: disnake.client.Client.fetch_invite:17 of
msgid ""
"Whether to include the expiration date of the invite. This fills the "
":attr:`.Invite.expires_at` field.  .. versionadded:: 2.0"
msgstr ""

#: disnake.client.Client.fetch_invite:17 of
msgid ""
"Whether to include the expiration date of the invite. This fills the "
":attr:`.Invite.expires_at` field."
msgstr ""

#: disnake.client.Client.fetch_invite:23 of
msgid "The invite has expired or is invalid."
msgstr ""

#: disnake.client.Client.fetch_invite:24 of
msgid "Getting the invite failed."
msgstr ""

#: disnake.client.Client.fetch_invite:26 of
msgid "The invite from the URL/ID."
msgstr ""

#: disnake.client.Client.fetch_invite:27 of
msgid ":class:`.Invite`"
msgstr ""

#: disnake.client.Client.fetch_premium_sticker_packs:3 of
msgid "Retrieves all available premium sticker packs."
msgstr ""

#: disnake.client.Client.fetch_premium_sticker_packs:7 of
msgid "Retrieving the sticker packs failed."
msgstr ""

#: disnake.client.Client.fetch_premium_sticker_packs:9 of
msgid "All available premium sticker packs."
msgstr ""

#: disnake.client.Client.fetch_premium_sticker_packs:10 of
msgid "List[:class:`.StickerPack`]"
msgstr ""

#: disnake.client.Client.fetch_stage_instance:3 of
msgid "Gets a :class:`.StageInstance` for a stage channel id."
msgstr ""

#: disnake.client.Client.fetch_stage_instance:7 of
msgid "The stage channel ID."
msgstr ""

#: disnake.client.Client.fetch_stage_instance:10 of
msgid "The stage instance or channel could not be found."
msgstr ""

#: disnake.client.Client.fetch_stage_instance:11 of
msgid "Getting the stage instance failed."
msgstr ""

#: disnake.client.Client.fetch_stage_instance:13 of
msgid "The stage instance from the stage channel ID."
msgstr ""

#: disnake.client.Client.fetch_stage_instance:14 of
msgid ":class:`.StageInstance`"
msgstr ""

#: disnake.client.Client.fetch_sticker:3 of
msgid "Retrieves a :class:`.Sticker` with the specified ID."
msgstr ""

#: disnake.client.Client.fetch_sticker:7 of
msgid "Retrieving the sticker failed."
msgstr ""

#: disnake.client.Client.fetch_sticker:8 of
msgid "Invalid sticker ID."
msgstr ""

#: disnake.client.Client.fetch_sticker:10 of
msgid "The sticker you requested."
msgstr ""

#: disnake.client.Client.fetch_sticker:11 of
msgid "Union[:class:`.StandardSticker`, :class:`.GuildSticker`]"
msgstr ""

#: disnake.client.Client.fetch_template:3 of
msgid "Gets a :class:`.Template` from a disnake.new URL or code."
msgstr ""

#: disnake.client.Client.fetch_template:5 of
msgid "The Discord Template Code or URL (must be a disnake.new URL)."
msgstr ""

#: disnake.client.Client.fetch_template:8 of
msgid "The template is invalid."
msgstr ""

#: disnake.client.Client.fetch_template:9 of
msgid "Getting the template failed."
msgstr ""

#: disnake.client.Client.fetch_template:11 of
msgid "The template from the URL/code."
msgstr ""

#: disnake.client.Client.fetch_template:12 of
msgid ":class:`.Template`"
msgstr ""

#: disnake.client.Client.fetch_user:3 of
msgid ""
"Retrieves a :class:`~disnake.User` based on their ID. You do not have to "
"share any guilds with the user to get this information, however many "
"operations do require that you do."
msgstr ""

#: disnake.client.Client.fetch_user:9 of
msgid ""
"This method is an API call. If you have :attr:`disnake.Intents.members` "
"and member cache enabled, consider :meth:`get_user` instead."
msgstr ""

#: disnake.client.Client.fetch_user:11 of
msgid "The user's ID to fetch from."
msgstr ""

#: disnake.client.Client.fetch_user:14 of
msgid "A user with this ID does not exist."
msgstr ""

#: disnake.client.Client.fetch_user:15 of
msgid "Fetching the user failed."
msgstr ""

#: disnake.client.Client.fetch_user:17 of
msgid "The user you requested."
msgstr ""

#: disnake.client.Client.fetch_user:18
#: disnake.client.Client.get_or_fetch_user:10 of
msgid ":class:`~disnake.User`"
msgstr ""

#: disnake.client.Client.fetch_webhook:3 of
msgid "Retrieves a :class:`.Webhook` with the specified ID."
msgstr ""

#: disnake.client.Client.fetch_webhook:5 of
msgid "Retrieving the webhook failed."
msgstr ""

#: disnake.client.Client.fetch_webhook:6 of
msgid "Invalid webhook ID."
msgstr ""

#: disnake.client.Client.fetch_webhook:7 of
msgid "You do not have permission to fetch this webhook."
msgstr ""

#: disnake.client.Client.fetch_webhook:9 of
msgid "The webhook you requested."
msgstr ""

#: disnake.client.Client.fetch_webhook:10 of
msgid ":class:`.Webhook`"
msgstr ""

#: disnake.client.Client.fetch_widget:3 of
msgid "Gets a :class:`.Widget` from a guild ID."
msgstr ""

#: disnake.client.Client.fetch_widget:7 of
msgid "The guild must have the widget enabled to get this information."
msgstr ""

#: disnake.client.Client.fetch_widget:9 of
msgid "The ID of the guild."
msgstr ""

#: disnake.client.Client.fetch_widget:12 of
msgid "The widget for this guild is disabled."
msgstr ""

#: disnake.client.Client.fetch_widget:13 of
msgid "Retrieving the widget failed."
msgstr ""

#: disnake.client.Client.fetch_widget:15 of
msgid "The guild's widget."
msgstr ""

#: disnake.client.Client.fetch_widget:16 of
msgid ":class:`.Widget`"
msgstr ""

#: disnake.client.Client.get_all_channels:1 of
msgid ""
"A generator that retrieves every :class:`.abc.GuildChannel` the client "
"can 'access'."
msgstr ""

#: disnake.client.Client.get_all_channels:3
#: disnake.client.Client.get_all_members:3 of
msgid "This is equivalent to: ::"
msgstr ""

#: disnake.client.Client.get_all_channels:11 of
msgid ""
"Just because you receive a :class:`.abc.GuildChannel` does not mean that "
"you can communicate in said channel. "
":meth:`.abc.GuildChannel.permissions_for` should be used for that."
msgstr ""

#: disnake.client.Client.get_all_channels:15 of
msgid ":class:`.abc.GuildChannel` -- A channel the client can 'access'."
msgstr ""

#: disnake.client.Client.get_all_members:1 of
msgid "Returns a generator with every :class:`.Member` the client can see."
msgstr ""

#: disnake.client.Client.get_all_members:9 of
msgid ":class:`.Member` -- A member the client can see."
msgstr ""

#: disnake.client.Client.get_channel:1 of
msgid "Returns a channel or thread with the given ID."
msgstr ""

#: disnake.client.Client.get_channel:3 disnake.client.Client.get_emoji:3
#: disnake.client.Client.get_global_command:3 disnake.client.Client.get_guild:3
#: disnake.client.Client.get_guild_application_commands:3
#: disnake.client.Client.get_guild_message_commands:3
#: disnake.client.Client.get_guild_slash_commands:3
#: disnake.client.Client.get_guild_user_commands:3
#: disnake.client.Client.get_or_fetch_user:6
#: disnake.client.Client.get_stage_instance:5 disnake.client.Client.get_user:3
#: of
msgid "The ID to search for."
msgstr ""

#: disnake.client.Client.get_channel:6 of
msgid "The returned channel or ``None`` if not found."
msgstr ""

#: disnake.client.Client.get_channel:7 of
msgid ""
"Optional[Union[:class:`.abc.GuildChannel`, :class:`.Thread`, "
":class:`.abc.PrivateChannel`]]"
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.get_cog:1 of
msgid "Gets the cog instance requested."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.get_cog:3 of
msgid "If the cog is not found, ``None`` is returned instead."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.get_cog:5 of
msgid ""
"The name of the cog you are requesting. This is equivalent to the name "
"passed via keyword argument in class creation or the class name if "
"unspecified."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.get_cog:10 of
msgid "The cog that was requested. If not found, returns ``None``."
msgstr ""

#: disnake.ext.commands.HelpCommand.cog:10
#: disnake.ext.commands.common_bot_base.CommonBotBase.get_cog:11
#: disnake.ext.commands.core.Command:62
#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:28
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:28
#: disnake.ext.commands.slash_core.InvokableSlashCommand:28
#: disnake.ext.commands.slash_core.SubCommand:28
#: disnake.ext.commands.slash_core.SubCommandGroup:28 of
msgid "Optional[:class:`Cog`]"
msgstr ""

#: disnake.ext.commands.core.GroupMixin.get_command:1 of
msgid "Get a :class:`.Command` from the internal list of commands."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.get_command:4 of
msgid "This could also be used as a way to get aliases."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.get_command:6 of
msgid ""
"The name could be fully qualified (e.g. ``'foo bar'``) will get the "
"subcommand ``bar`` of the group command ``foo``. If a subcommand is not "
"found then ``None`` is returned just as usual."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.get_command:10 of
msgid "The name of the command to get."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.get_command:13 of
msgid "The command that was requested. If not found, returns ``None``."
msgstr ""

#: disnake.ext.commands.context.Context:56
#: disnake.ext.commands.context.Context:81
#: disnake.ext.commands.core.Command:103
#: disnake.ext.commands.core.GroupMixin.get_command:14 of
msgid "Optional[:class:`Command`]"
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.get_context:3 of
msgid "Returns the invocation context from the message."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.get_context:5 of
msgid ""
"This is a more low-level counter-part for :meth:`.process_commands` to "
"allow users more fine grained control over the processing."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.get_context:8 of
msgid ""
"The returned context is not guaranteed to be a valid invocation context, "
":attr:`.Context.valid` must be checked to make sure it is. If the context"
" is not valid then it is not a valid candidate to be invoked under "
":meth:`~.Bot.invoke`."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.get_context:13 of
msgid "The message to get the invocation context from."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.get_context:15 of
msgid ""
"The factory class that will be used to create the context. By default, "
"this is :class:`.Context`. Should a custom class be provided, it must be "
"similar enough to :class:`.Context`\\'s interface."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.get_context:20 of
msgid ""
"The invocation context. The type of this can change via the ``cls`` "
"parameter."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.get_context:22 of
msgid ":class:`.Context`"
msgstr ""

#: disnake.client.Client.get_emoji:1 of
msgid "Returns an emoji with the given ID."
msgstr ""

#: disnake.client.Client.get_emoji:6 of
msgid "The custom emoji or ``None`` if not found."
msgstr ""

#: disnake.client.Client.get_emoji:7 of
msgid "Optional[:class:`.Emoji`]"
msgstr ""

#: disnake.client.Client.get_global_command:1 of
msgid "Returns a global application command."
msgstr ""

#: disnake.client.Client.get_global_command:6
#: disnake.client.Client.get_global_command_named:8
#: disnake.client.Client.get_guild_command:8
#: disnake.client.Client.get_guild_command_named:10 of
msgid "The application command."
msgstr ""

#: disnake.client.Client.get_global_command_named:1 of
msgid "Returns a global application command matching the specified name."
msgstr ""

#: disnake.client.Client.get_global_command_named:3 of
msgid "The name to look for."
msgstr ""

#: disnake.client.Client.get_global_command_named:5
#: disnake.client.Client.get_guild_command_named:7 of
msgid "The type to look for. By default, no types are checked."
msgstr ""

#: disnake.client.Client.get_guild:1 of
msgid "Returns a guild with the given ID."
msgstr ""

#: disnake.client.Client.get_guild:6 of
msgid "The guild or ``None`` if not found."
msgstr ""

#: ../../docstring disnake.client.Client.get_guild:7
#: disnake.ext.commands.Context.guild:3 of
msgid "Optional[:class:`.Guild`]"
msgstr ""

#: disnake.client.Client.get_guild_application_commands:1 of
msgid "Returns a list of all application commands in the guild."
msgstr ""

#: disnake.client.Client.get_guild_application_commands:6 of
msgid "The list of application commands."
msgstr ""

#: disnake.client.Client.get_guild_command:1 of
msgid "Returns a guild application command."
msgstr ""

#: disnake.client.Client.get_guild_command:3
#: disnake.client.Client.get_guild_command_named:3 of
msgid "The guild ID to search for."
msgstr ""

#: disnake.client.Client.get_guild_command:5 of
msgid "The command ID to search for."
msgstr ""

#: disnake.client.Client.get_guild_command_named:1 of
msgid "Returns a guild application command matching the name."
msgstr ""

#: disnake.client.Client.get_guild_command_named:5 of
msgid "The command name to search for."
msgstr ""

#: disnake.client.Client.get_guild_message_commands:1 of
msgid "Returns a list of all message commands in the guild."
msgstr ""

#: disnake.client.Client.get_guild_message_commands:6 of
msgid "The list of message commands."
msgstr ""

#: disnake.client.Client.get_guild_message_commands:7 of
msgid "List[:class:`.MessageCommand`]"
msgstr ""

#: disnake.client.Client.get_guild_slash_commands:1 of
msgid "Returns a list of all slash commands in the guild."
msgstr ""

#: disnake.client.Client.get_guild_slash_commands:6 of
msgid "The list of slash commands."
msgstr ""

#: disnake.client.Client.get_guild_slash_commands:7 of
msgid "List[:class:`.SlashCommand`]"
msgstr ""

#: disnake.client.Client.get_guild_user_commands:1 of
msgid "Returns a list of all user commands in the guild."
msgstr ""

#: disnake.client.Client.get_guild_user_commands:6 of
msgid "The list of user commands."
msgstr ""

#: disnake.client.Client.get_guild_user_commands:7 of
msgid "List[:class:`.UserCommand`]"
msgstr ""

#: disnake.client.Client.get_message:1 of
msgid "Gets the message with the ID from the bot's message cache."
msgstr ""

#: disnake.client.Client.get_message:3 of
msgid "The ID of the message to look for."
msgstr ""

#: disnake.client.Client.get_message:6 of
msgid "The corresponding message."
msgstr ""

#: disnake.client.Client.get_message:7 of
msgid "Optional[:class:`.Message`]"
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_message_command:1
#: of
msgid ""
"Get a :class:`.InvokableMessageCommand` from the internal list of "
"commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_message_command:4
#: of
msgid "The name of the message command to get."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_message_command:7
#: of
msgid "The message command that was requested. If not found, returns ``None``."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_message_command:8
#: of
msgid "Optional[:class:`InvokableMessageCommand`]"
msgstr ""

#: disnake.client.Client.get_or_fetch_user:3 of
msgid ""
"Tries to get the user from the cache. If fails, it tries to fetch the "
"user from the API."
msgstr ""

#: disnake.client.Client.get_or_fetch_user:9 of
msgid "The user with the given ID"
msgstr ""

#: disnake.client.Client.get_partial_messageable:1 of
msgid "Returns a partial messageable with the given channel ID."
msgstr ""

#: disnake.client.Client.get_partial_messageable:3 of
msgid ""
"This is useful if you have a channel_id but don't want to do an API call "
"to send messages to it."
msgstr ""

#: disnake.client.Client.get_partial_messageable:8 of
msgid "The channel ID to create a partial messageable for."
msgstr ""

#: disnake.client.Client.get_partial_messageable:10 of
msgid "The underlying channel type for the partial messageable."
msgstr ""

#: disnake.client.Client.get_partial_messageable:13 of
msgid "The partial messageable"
msgstr ""

#: disnake.client.Client.get_partial_messageable:14 of
msgid ":class:`.PartialMessageable`"
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.get_prefix:3 of
msgid ""
"Retrieves the prefix the bot is listening to with the message as a "
"context."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.get_prefix:6 of
msgid "The message context to get the prefix of."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.get_prefix:9 of
msgid ""
"A list of prefixes or a single prefix that the bot is listening for. None"
" if the bot isn't listening for prefixes."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.get_prefix:11 of
msgid "Optional[Union[List[:class:`str`], :class:`str`]]"
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_slash_command:1
#: of
msgid "Get a :class:`.InvokableSlashCommand` from the internal list of commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_slash_command:4
#: of
msgid "The name of the slash command to get."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_slash_command:7
#: of
msgid "The slash command that was requested. If not found, returns ``None``."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_slash_command:8
#: of
msgid "Optional[:class:`InvokableSlashCommand`]"
msgstr ""

#: disnake.client.Client.get_stage_instance:1 of
msgid "Returns a stage instance with the given stage channel ID."
msgstr ""

#: disnake.client.Client.get_stage_instance:8 of
msgid "The returns stage instance of ``None`` if not found."
msgstr ""

#: disnake.client.Client.get_stage_instance:9 of
msgid "Optional[:class:`.StageInstance`]"
msgstr ""

#: disnake.client.Client.get_sticker:1 of
msgid "Returns a guild sticker with the given ID."
msgstr ""

#: disnake.client.Client.get_sticker:7 of
msgid ""
"To retrieve standard stickers, use :meth:`.fetch_sticker`. or "
":meth:`.fetch_premium_sticker_packs`."
msgstr ""

#: disnake.client.Client.get_sticker:10 of
msgid "The sticker or ``None`` if not found."
msgstr ""

#: disnake.client.Client.get_sticker:11 of
msgid "Optional[:class:`.GuildSticker`]"
msgstr ""

#: disnake.client.Client.get_user:1 of
msgid "Returns a user with the given ID."
msgstr ""

#: disnake.client.Client.get_user:6 of
msgid "The user or ``None`` if not found."
msgstr ""

#: disnake.client.Client.get_user:7 of
msgid "Optional[:class:`~disnake.User`]"
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_user_command:1
#: of
msgid "Get a :class:`.InvokableUserCommand` from the internal list of commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_user_command:4
#: of
msgid "The name of the user command to get."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_user_command:7
#: of
msgid "The user command that was requested. If not found, returns ``None``."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.get_user_command:8
#: of
msgid "Optional[:class:`InvokableUserCommand`]"
msgstr ""

#: disnake.ext.commands.Bot.guilds:1 of
msgid "The guilds that the connected client is a member of."
msgstr ""

#: disnake.ext.commands.Bot.guilds:3 of
msgid "List[:class:`.Guild`]"
msgstr ""

#: disnake.ext.commands.Bot.intents:1 of
msgid "The intents configured for this connection."
msgstr ""

#: disnake.ext.commands.Bot.intents:5 of
msgid ":class:`~disnake.Intents`"
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.invoke:3 of
msgid ""
"Invokes the command given under the invocation context and handles all "
"the internal event dispatch mechanisms."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.invoke:6 of
msgid "The invocation context to invoke."
msgstr ""

#: disnake.client.Client.is_closed:1 of
msgid ":class:`bool`: Indicates if the websocket connection is closed."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.is_owner:3 of
msgid ""
"Checks if a :class:`~disnake.User` or :class:`~disnake.Member` is the "
"owner of this bot."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.is_owner:6 of
msgid ""
"If an :attr:`owner_id` is not set, it is fetched automatically through "
"the use of :meth:`~.Bot.application_info`."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.is_owner:9 of
msgid ""
"The function also checks if the application is team-owned if "
":attr:`owner_ids` is not set."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.is_owner:13 of
msgid "The user to check for."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.is_owner:16 of
msgid "Whether the user is the owner."
msgstr ""

#: disnake.client.Client.is_ready:1 of
msgid ":class:`bool`: Specifies if the client's internal cache is ready for use."
msgstr ""

#: disnake.client.Client.is_ws_ratelimited:1 of
msgid ":class:`bool`: Whether the websocket is currently rate limited."
msgstr ""

#: disnake.client.Client.is_ws_ratelimited:3 of
msgid ""
"This can be useful to know when deciding whether you should query members"
" using HTTP or via the gateway."
msgstr ""

#: disnake.ext.commands.Bot.latency:1 of
msgid "Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds."
msgstr ""

#: disnake.ext.commands.Bot.latency:3 of
msgid "This could be referred to as the Discord WebSocket protocol latency."
msgstr ""

#: disnake.ext.commands.Bot.latency:5
#: disnake.ext.commands.cooldowns.Cooldown:13
#: disnake.ext.commands.cooldowns.Cooldown.get_retry_after:8
#: disnake.ext.commands.core.Command.get_cooldown_retry_after:10
#: disnake.ext.commands.errors.CommandOnCooldown:22
#: disnake.ext.commands.params.ParamInfo:33
#: disnake.ext.commands.params.ParamInfo:39 of
msgid ":class:`float`"
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.load_extension:1 of
msgid "Loads an extension."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.load_extension:3 of
msgid ""
"An extension is a python module that contains commands, cogs, or "
"listeners."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.load_extension:6 of
msgid ""
"An extension must have a global function, ``setup`` defined as the entry "
"point on what to do when the extension is loaded. This entry point must "
"have a single argument, the ``bot``."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.load_extension:10 of
msgid ""
"The extension name to load. It must be dot separated like regular Python "
"imports if accessing a sub-module. e.g. ``foo.test`` if you want to "
"import ``foo/test.py``."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.load_extension:14 of
msgid ""
"The package name to resolve relative imports with. This is required when "
"loading an extension using a relative path, e.g ``.foo.test``. Defaults "
"to ``None``.  .. versionadded:: 1.7"
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.load_extension:14 of
msgid ""
"The package name to resolve relative imports with. This is required when "
"loading an extension using a relative path, e.g ``.foo.test``. Defaults "
"to ``None``."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.load_extension:21
#: disnake.ext.commands.common_bot_base.CommonBotBase.reload_extension:20 of
msgid ""
"The extension could not be imported.     This is also raised if the name "
"of the extension could not     be resolved using the provided ``package``"
" parameter."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.load_extension:22 of
msgid "The extension is already loaded."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.load_extension:23
#: disnake.ext.commands.common_bot_base.CommonBotBase.reload_extension:21 of
msgid "The extension does not have a setup function."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.load_extension:24 of
msgid "The extension or its setup function had an execution error."
msgstr ""

#: disnake.client.Client.login:3 of
msgid "Logs in the client with the specified credentials."
msgstr ""

#: disnake.client.Client.login:6 of
msgid ""
"The authentication token. Do not prefix this token with anything as the "
"library will do it for you."
msgstr ""

#: disnake.client.Client.login:10 of
msgid "The wrong credentials are passed."
msgstr ""

#: disnake.client.Client.login:11 of
msgid ""
"An unknown HTTP related error occurred,     usually when it isn't 200 or "
"the known incorrect credentials     passing status code."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.message_command_check:1
#: of
msgid "Similar to :meth:`.check` but for message commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.message_command_check_once:1
#: of
msgid "Similar to :meth:`.check_once` but for message commands."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.on_command_error:3 of
msgid "The default command error handler provided by the bot."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.on_command_error:5 of
msgid ""
"By default this prints to :data:`sys.stderr` however it could be "
"overridden to have a different implementation."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.on_command_error:8 of
msgid "This only fires if you do not specify any listeners for command error."
msgstr ""

#: disnake.client.Client.on_error:3 of
msgid "The default error handler provided by the client."
msgstr ""

#: disnake.client.Client.on_error:5 of
msgid ""
"By default this prints to :data:`sys.stderr` however it could be "
"overridden to have a different implementation. Check "
":func:`~disnake.on_error` for more details."
msgstr ""

#: disnake.ext.commands.Bot.persistent_views:1 of
msgid "A sequence of persistent views added to the client."
msgstr ""

#: disnake.ext.commands.Bot.persistent_views:5 of
msgid "Sequence[:class:`.View`]"
msgstr ""

#: disnake.ext.commands.Bot.private_channels:1 of
msgid "The private channels that the connected client is participating on."
msgstr ""

#: disnake.ext.commands.Bot.private_channels:5 of
msgid ""
"This returns only up to 128 most recent private channels due to an "
"internal working on how Discord deals with private channels."
msgstr ""

#: disnake.ext.commands.Bot.private_channels:8 of
msgid "List[:class:`.abc.PrivateChannel`]"
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.process_app_command_autocompletion:3
#: of
msgid ""
"This function processes the application command autocompletions. Without "
"this coroutine, none of the autocompletions will be performed."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.process_app_command_autocompletion:6
#: of
msgid ""
"By default, this coroutine is called inside the "
":func:`.on_application_command_autocompletion` event. If you choose to "
"override the :func:`.on_application_command_autocompletion` event, then "
"you should invoke this coroutine as well."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.process_app_command_autocompletion:10
#: of
msgid "The interaction to process."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.process_application_commands:3
#: of
msgid ""
"This function processes the application commands that have been "
"registered to the bot and other groups. Without this coroutine, none of "
"the application commands will be triggered."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.process_application_commands:7
#: of
msgid ""
"By default, this coroutine is called inside the "
":func:`.on_application_command` event. If you choose to override the "
":func:`.on_application_command` event, then you should invoke this "
"coroutine as well."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.process_application_commands:11
#: of
msgid "The interaction to process commands for."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.process_commands:3 of
msgid ""
"This function processes the commands that have been registered to the bot"
" and other groups. Without this coroutine, none of the commands will be "
"triggered."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.process_commands:7 of
msgid ""
"By default, this coroutine is called inside the :func:`.on_message` "
"event. If you choose to override the :func:`.on_message` event, then you "
"should invoke this coroutine as well."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.process_commands:11 of
msgid ""
"This is built using other low level tools, and is equivalent to a call to"
" :meth:`~.Bot.get_context` followed by a call to :meth:`~.Bot.invoke`."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.process_commands:14 of
msgid ""
"This also checks if the message's author is a bot and doesn't call "
":meth:`~.Bot.get_context` or :meth:`~.Bot.invoke` if so."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.process_commands:17 of
msgid "The message to process commands for."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.reload_extension:1 of
msgid "Atomically reloads an extension."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.reload_extension:3 of
msgid ""
"This replaces the extension with the same extension, only refreshed. This"
" is equivalent to a :meth:`unload_extension` followed by a "
":meth:`load_extension` except done in an atomic way. That is, if an "
"operation fails mid-reload then the bot will roll-back to the prior "
"working state."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.reload_extension:8 of
msgid ""
"The extension name to reload. It must be dot separated like regular "
"Python imports if accessing a sub-module. e.g. ``foo.test`` if you want "
"to import ``foo/test.py``."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.reload_extension:12 of
msgid ""
"The package name to resolve relative imports with. This is required when "
"reloading an extension using a relative path, e.g ``.foo.test``. Defaults"
" to ``None``.  .. versionadded:: 1.7"
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.reload_extension:12 of
msgid ""
"The package name to resolve relative imports with. This is required when "
"reloading an extension using a relative path, e.g ``.foo.test``. Defaults"
" to ``None``."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.reload_extension:19
#: disnake.ext.commands.common_bot_base.CommonBotBase.unload_extension:23 of
msgid "The extension was not loaded."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.reload_extension:22 of
msgid "The extension setup function had an execution error."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.remove_check:1
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_app_command_check:1
#: of
msgid "Removes a global check from the bot."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.remove_check:3
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_app_command_check:3
#: of
msgid ""
"This function is idempotent and will not raise an exception if the "
"function is not in the global checks."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.remove_check:9
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_app_command_check:9
#: of
msgid "The function to remove from the global checks."
msgstr ""

#: disnake.ext.commands.bot_base.BotBase.remove_check:10
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_app_command_check:10
#: of
msgid ""
"If the function was added with ``call_once=True`` in the "
":meth:`.Bot.add_check` call or using :meth:`.check_once`."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_app_command_check:13
#: of
msgid "If this check was for slash commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_app_command_check:15
#: of
msgid "If this check was for user commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_app_command_check:17
#: of
msgid "If this check was for message commands."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.remove_cog:1 of
msgid "Removes a cog from the bot and returns it."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.remove_cog:3 of
msgid ""
"All registered commands and event listeners that the cog has registered "
"will be removed as well."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.remove_cog:6 of
msgid "If no cog is found then this method has no effect."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.remove_cog:8 of
msgid "The name of the cog to remove."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.remove_cog:11 of
msgid "The cog that was removed. ``None`` if not found."
msgstr ""

#: disnake.ext.commands.Context.cog:3
#: disnake.ext.commands.common_bot_base.CommonBotBase.remove_cog:12 of
msgid "Optional[:class:`.Cog`]"
msgstr ""

#: disnake.ext.commands.core.GroupMixin.remove_command:1 of
msgid "Remove a :class:`.Command` from the internal list of commands."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.remove_command:4 of
msgid "This could also be used as a way to remove aliases."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.remove_command:6
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_message_command:4
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_slash_command:4
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_user_command:4
#: of
msgid "The name of the command to remove."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.remove_command:9
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_message_command:7
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_slash_command:7
#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_user_command:7
#: of
msgid ""
"The command that was removed. If the name is not valid then ``None`` is "
"returned instead."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.remove_command:11 of
msgid "Optional[:class:`.Command`]"
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.remove_listener:1 of
msgid "Removes a listener from the pool of listeners."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.remove_listener:3 of
msgid "The function that was used as a listener to remove."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.remove_listener:4 of
msgid "The name of the event we want to remove. Defaults to ``func.__name__``."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_message_command:1
#: of
msgid ""
"Remove a :class:`.InvokableMessageCommand` from the internal list of "
"message commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_message_command:9
#: of
msgid "Optional[:class:`.InvokableMessageCommand`]"
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_slash_command:1
#: of
msgid ""
"Remove a :class:`.InvokableSlashCommand` from the internal list of slash "
"commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_slash_command:9
#: of
msgid "Optional[:class:`.InvokableSlashCommand`]"
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_user_command:1
#: of
msgid ""
"Remove a :class:`.InvokableUserCommand` from the internal list of user "
"commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.remove_user_command:9
#: of
msgid "Optional[:class:`.InvokableUserCommand`]"
msgstr ""

#: disnake.client.Client.run:1 of
msgid ""
"A blocking call that abstracts away the event loop initialisation from "
"you."
msgstr ""

#: disnake.client.Client.run:4 of
msgid ""
"If you want more control over the event loop then this function should "
"not be used. Use :meth:`start` coroutine or :meth:`connect` + "
":meth:`login`."
msgstr ""

#: disnake.client.Client.run:8 of
msgid "Roughly Equivalent to: ::"
msgstr ""

#: disnake.client.Client.run:20 of
msgid ""
"This function must be the last function to call due to the fact that it "
"is blocking. That means that registration of events or anything being "
"called after this function call will not execute until it returns."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command_check:1
#: of
msgid "Similar to :meth:`.check` but for slash commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.slash_command_check_once:1
#: of
msgid "Similar to :meth:`.check_once` but for slash commands."
msgstr ""

#: disnake.client.Client.start:3 of
msgid "A shorthand coroutine for :meth:`login` + :meth:`connect`."
msgstr ""

#: disnake.client.Client.start:5 of
msgid "An unexpected keyword argument was received."
msgstr ""

#: disnake.ext.commands.Bot.status:1 of
msgid ":class:`.Status`: The status being used upon logging on to Discord."
msgstr ""

#: disnake.ext.commands.Bot.stickers:1 of
msgid "The stickers that the connected client has."
msgstr ""

#: disnake.ext.commands.Bot.stickers:5 of
msgid "List[:class:`.GuildSticker`]"
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.unload_extension:1 of
msgid "Unloads an extension."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.unload_extension:3 of
msgid ""
"When the extension is unloaded, all commands, listeners, and cogs are "
"removed from the bot and the module is un-imported."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.unload_extension:6 of
msgid ""
"The extension can provide an optional global function, ``teardown``, to "
"do miscellaneous clean-up if necessary. This function takes a single "
"parameter, the ``bot``, similar to ``setup`` from "
":meth:`~.Bot.load_extension`."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.unload_extension:11 of
msgid ""
"The extension name to unload. It must be dot separated like regular "
"Python imports if accessing a sub-module. e.g. ``foo.test`` if you want "
"to import ``foo/test.py``."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.unload_extension:15 of
msgid ""
"The package name to resolve relative imports with. This is required when "
"unloading an extension using a relative path, e.g ``.foo.test``. Defaults"
" to ``None``.  .. versionadded:: 1.7"
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.unload_extension:15 of
msgid ""
"The package name to resolve relative imports with. This is required when "
"unloading an extension using a relative path, e.g ``.foo.test``. Defaults"
" to ``None``."
msgstr ""

#: disnake.ext.commands.common_bot_base.CommonBotBase.unload_extension:22 of
msgid ""
"The name of the extension could not     be resolved using the provided "
"``package`` parameter."
msgstr ""

#: disnake.ext.commands.Bot.user:1 of
msgid "Represents the connected client. ``None`` if not logged in."
msgstr ""

#: disnake.ext.commands.Bot.user:3 of
msgid "Optional[:class:`.ClientUser`]"
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.user_command_check:1
#: of
msgid "Similar to :meth:`.check` but for user commands."
msgstr ""

#: disnake.ext.commands.interaction_bot_base.InteractionBotBase.user_command_check_once:1
#: of
msgid "Similar to :meth:`.check_once` but for user commands."
msgstr ""

#: disnake.ext.commands.Bot.users:1 of
msgid "Returns a list of all the users the bot can see."
msgstr ""

#: disnake.ext.commands.Bot.users:3 of
msgid "List[:class:`~disnake.User`]"
msgstr ""

#: disnake.ext.commands.Bot.voice_clients:1 of
msgid "Represents a list of voice connections."
msgstr ""

#: disnake.ext.commands.Bot.voice_clients:3 of
msgid "These are usually :class:`.VoiceClient` instances."
msgstr ""

#: disnake.ext.commands.Bot.voice_clients:5 of
msgid "List[:class:`.VoiceProtocol`]"
msgstr ""

#: disnake.client.Client.wait_for:3 of
msgid "Waits for a WebSocket event to be dispatched."
msgstr ""

#: disnake.client.Client.wait_for:5 of
msgid ""
"This could be used to wait for a user to reply to a message, or to react "
"to a message, or to edit a message in a self-contained way."
msgstr ""

#: disnake.client.Client.wait_for:9 of
msgid ""
"The ``timeout`` parameter is passed onto :func:`asyncio.wait_for`. By "
"default, it does not timeout. Note that this does propagate the "
":exc:`asyncio.TimeoutError` for you in case of timeout and is provided "
"for ease of use."
msgstr ""

#: disnake.client.Client.wait_for:14 of
msgid ""
"In case the event returns multiple arguments, a :class:`tuple` containing"
" those arguments is returned instead. Please check the "
":ref:`documentation <discord-api-events>` for a list of events and their "
"parameters."
msgstr ""

#: disnake.client.Client.wait_for:19 of
msgid "This function returns the **first event that meets the requirements**."
msgstr ""

#: disnake.client.Client.wait_for:23 of
msgid "Waiting for a user reply: ::"
msgstr ""

#: disnake.client.Client.wait_for:37 of
msgid "Waiting for a thumbs up reaction from the message author: ::"
msgstr ""

#: disnake.client.Client.wait_for:55 of
msgid ""
"The event name, similar to the :ref:`event reference <discord-api-"
"events>`, but without the ``on_`` prefix, to wait for."
msgstr ""

#: disnake.client.Client.wait_for:58 of
msgid ""
"A predicate to check what to wait for. The arguments must meet the "
"parameters of the event being waited for."
msgstr ""

#: disnake.client.Client.wait_for:61 of
msgid ""
"The number of seconds to wait before timing out and raising "
":exc:`asyncio.TimeoutError`."
msgstr ""

#: disnake.client.Client.wait_for:65 of
msgid "If a timeout is provided and it was reached."
msgstr ""

#: disnake.client.Client.wait_for:67 of
msgid ""
"Returns no arguments, a single argument, or a :class:`tuple` of multiple "
"arguments that mirrors the parameters passed in the :ref:`event reference"
" <discord-api-events>`."
msgstr ""

#: disnake.client.Client.wait_until_first_connect:3 of
msgid "Waits until the first connect."
msgstr ""

#: disnake.client.Client.wait_until_ready:3 of
msgid "Waits until the client's internal cache is all ready."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.walk_commands:1 of
msgid "An iterator that recursively walks through all commands and subcommands."
msgstr ""

#: disnake.ext.commands.core.GroupMixin.walk_commands:3 of
msgid "Duplicates due to aliases are no longer returned"
msgstr ""

#: disnake.ext.commands.core.GroupMixin.walk_commands:6 of
msgid ""
"Union[:class:`.Command`, :class:`.Group`] -- A command or group from the "
"internal list of commands."
msgstr ""

#: ../../ext/commands/api.rst:57
msgid "AutoShardedBot"
msgstr ""

#: disnake.ext.commands.bot.AutoShardedBot:1 of
msgid ""
"This is similar to :class:`.Bot` except that it is inherited from "
":class:`disnake.AutoShardedClient` instead."
msgstr ""

#: ../../ext/commands/api.rst:65
msgid "Prefix Helpers"
msgstr ""

#: disnake.ext.commands.bot_base.when_mentioned:1 of
msgid "A callable that implements a command prefix equivalent to being mentioned."
msgstr ""

#: disnake.ext.commands.bot_base.when_mentioned:3
#: disnake.ext.commands.bot_base.when_mentioned_or:3 of
msgid ""
"These are meant to be passed into the :attr:`.Bot.command_prefix` "
"attribute."
msgstr ""

#: disnake.ext.commands.bot_base.when_mentioned_or:1 of
msgid "A callable that implements when mentioned or other prefixes provided."
msgstr ""

#: disnake.ext.commands.bot_base.when_mentioned_or:13 of
msgid ""
"This callable returns another callable, so if this is done inside a "
"custom callable, you must call the returned callable, for example:"
msgstr ""

#: disnake.ext.commands.bot_base.when_mentioned_or:23 of
msgid ":func:`.when_mentioned`"
msgstr ""

#: ../../ext/commands/api.rst:74
msgid "Event Reference"
msgstr ""

#: ../../ext/commands/api.rst:76
msgid ""
"These events function similar to :ref:`the regular events <discord-api-"
"events>`, except they are custom to the command extension module."
msgstr ""

#: ../../ext/commands/api.rst:81
msgid ""
"An error handler that is called when an error is raised inside a command "
"either through user input error, check failure, or an error in your own "
"code."
msgstr ""

#: ../../ext/commands/api.rst:85
msgid "A default one is provided (:meth:`.Bot.on_command_error`)."
msgstr ""

#: ../../ext/commands/api.rst:87 ../../ext/commands/api.rst:138
#: ../../ext/commands/api.rst:178
#: disnake.ext.commands.cog.Cog.cog_after_invoke:7
#: disnake.ext.commands.cog.Cog.cog_before_invoke:7
#: disnake.ext.commands.flags.FlagConverter.convert:7
#: disnake.ext.commands.help.HelpCommand.on_help_command_error:11
#: disnake.ext.commands.help.HelpCommand.prepare_help_command:15 of
msgid "The invocation context."
msgstr ""

#: ../../ext/commands/api.rst:89 ../../ext/commands/api.rst:102
#: ../../ext/commands/api.rst:115 ../../ext/commands/api.rst:128
#: disnake.ext.commands.help.HelpCommand.on_help_command_error:13 of
msgid "The error that was raised."
msgstr ""

#: ../../ext/commands/api.rst:94
msgid ""
"An error handler that is called when an error is raised inside a slash "
"command either through user input error, check failure, or an error in "
"your own code."
msgstr ""

#: ../../ext/commands/api.rst:98
msgid "A default one is provided (:meth:`.Bot.on_slash_command_error`)."
msgstr ""

#: ../../ext/commands/api.rst:100 ../../ext/commands/api.rst:148
msgid "The interaction that invoked this slash command."
msgstr ""

#: ../../ext/commands/api.rst:107
msgid ""
"An error handler that is called when an error is raised inside a user "
"command either through check failure, or an error in your own code."
msgstr ""

#: ../../ext/commands/api.rst:111
msgid "A default one is provided (:meth:`.Bot.on_user_command_error`)."
msgstr ""

#: ../../ext/commands/api.rst:113 ../../ext/commands/api.rst:158
msgid "The interaction that invoked this user command."
msgstr ""

#: ../../ext/commands/api.rst:120
msgid ""
"An error handler that is called when an error is raised inside a message "
"command either through check failure, or an error in your own code."
msgstr ""

#: ../../ext/commands/api.rst:124
msgid "A default one is provided (:meth:`.Bot.on_message_command_error`)."
msgstr ""

#: ../../ext/commands/api.rst:126 ../../ext/commands/api.rst:168
msgid "The interaction that invoked this message command."
msgstr ""

#: ../../ext/commands/api.rst:133
msgid ""
"An event that is called when a command is found and is about to be "
"invoked."
msgstr ""

#: ../../ext/commands/api.rst:135
msgid ""
"This event is called regardless of whether the command itself succeeds "
"via error or completes."
msgstr ""

#: ../../ext/commands/api.rst:143
msgid ""
"An event that is called when a slash command is found and is about to be "
"invoked."
msgstr ""

#: ../../ext/commands/api.rst:145
msgid ""
"This event is called regardless of whether the slash command itself "
"succeeds via error or completes."
msgstr ""

#: ../../ext/commands/api.rst:153
msgid ""
"An event that is called when a user command is found and is about to be "
"invoked."
msgstr ""

#: ../../ext/commands/api.rst:155
msgid ""
"This event is called regardless of whether the user command itself "
"succeeds via error or completes."
msgstr ""

#: ../../ext/commands/api.rst:163
msgid ""
"An event that is called when a message command is found and is about to "
"be invoked."
msgstr ""

#: ../../ext/commands/api.rst:165
msgid ""
"This event is called regardless of whether the message command itself "
"succeeds via error or completes."
msgstr ""

#: ../../ext/commands/api.rst:173
msgid "An event that is called when a command has completed its invocation."
msgstr ""

#: ../../ext/commands/api.rst:175
msgid ""
"This event is called only if the command succeeded, i.e. all checks have "
"passed and the user input it correctly."
msgstr ""

#: ../../ext/commands/api.rst:184
msgid "Commands"
msgstr ""

#: ../../ext/commands/api.rst:187
msgid "Decorators"
msgstr ""

#: disnake.ext.commands.core.command:1 of
msgid ""
"A decorator that transforms a function into a :class:`.Command` or if "
"called with :func:`.group`, :class:`.Group`."
msgstr ""

#: disnake.ext.commands.core.command:4 of
msgid ""
"By default the ``help`` attribute is received automatically from the "
"docstring of the function and is cleaned up with the use of "
"``inspect.cleandoc``. If the docstring is ``bytes``, then it is decoded "
"into :class:`str` using utf-8 encoding."
msgstr ""

#: disnake.ext.commands.core.command:9 of
msgid ""
"All checks added using the :func:`.check` & co. decorators are added into"
" the function. There is no way to supply your own checks through this "
"decorator."
msgstr ""

#: disnake.ext.commands.core.command:13 of
msgid ""
"The name to create the command with. By default this uses the function "
"name unchanged."
msgstr ""

#: disnake.ext.commands.core.command:16 of
msgid ""
"The class to construct with. By default this is :class:`.Command`. You "
"usually do not change this."
msgstr ""

#: disnake.ext.commands.core.command:18 of
msgid ""
"Keyword arguments to pass into the construction of the class denoted by "
"``cls``."
msgstr ""

#: disnake.ext.commands.core.command:21 of
msgid "If the function is not a coroutine or is already a command."
msgstr ""

#: disnake.ext.commands.slash_core.slash_command:1 of
msgid "A decorator that builds a slash command."
msgstr ""

#: disnake.ext.commands.slash_core.slash_command:24 of
msgid ""
"A decorator that converts the provided method into a "
"InvokableSlashCommand and returns it."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.user_command:1 of
msgid "A shortcut decorator that builds a user command."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.message_command:7
#: disnake.ext.commands.ctx_menus_core.user_command:7 of
msgid ""
"whether to automatically register / edit the command or not. Defaults to "
"``True``."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.user_command:13 of
msgid ""
"A decorator that converts the provided method into a InvokableUserCommand"
" and returns it."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.message_command:1 of
msgid "A decorator that builds a message command."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.message_command:13 of
msgid ""
"A decorator that converts the provided method into a "
"InvokableMessageCommand and then returns it."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.message_command:14 of
msgid "Callable[..., :class:`InvokableMessageCommand`]"
msgstr ""

#: disnake.ext.commands.core.group:1 of
msgid "A decorator that transforms a function into a :class:`.Group`."
msgstr ""

#: disnake.ext.commands.core.group:3 of
msgid ""
"This is similar to the :func:`.command` decorator but the ``cls`` "
"parameter is set to :class:`Group` by default."
msgstr ""

#: disnake.ext.commands.core.group:6 of
msgid "The ``cls`` parameter can now be passed."
msgstr ""

#: ../../ext/commands/api.rst:205
msgid "Helper Functions"
msgstr ""

#: disnake.ext.commands.params.Param:1 of
msgid ""
"A special function that creates an instance of :class:`ParamInfo` that "
"contains some information about a slash command option. This instance "
"should be assigned to a parameter of a function representing your slash "
"command."
msgstr ""

#: disnake.ext.commands.params.Param:4 of
msgid "See :ref:`param_syntax` for more info."
msgstr ""

#: disnake.ext.commands.params.Param:6 of
msgid ""
"The actual default value of the function parameter that should be passed "
"instead of the :class:`ParamInfo` instance."
msgstr ""

#: disnake.ext.commands.params.Param:8 of
msgid "The name of the option. By default, the option name is the parameter name."
msgstr ""

#: disnake.ext.commands.params.Param:10 of
msgid ""
"The description of the option. You can skip this kwarg and use "
"docstrings. See :ref:`param_syntax`. Kwarg aliases: ``desc``."
msgstr ""

#: disnake.ext.commands.params.Param:13 of
msgid "A list of choices for this option."
msgstr ""

#: disnake.ext.commands.params.Param:15 of
msgid "The lowest allowed value for this option. Kwarg aliases: ``ge``, ``gt``."
msgstr ""

#: disnake.ext.commands.params.Param:17 of
msgid "The greatest allowed value for this option. Kwarg aliases: ``le``, ``lt``."
msgstr ""

#: disnake.ext.commands.params.Param:19 of
msgid ""
"A function that will suggest possible autocomplete options while typing. "
"See :ref:`param_syntax`. Kwarg aliases: ``autocomp``."
msgstr ""

#: disnake.ext.commands.params.Param:22 of
msgid ""
"A function that will convert the original input to a desired format. "
"Kwarg aliases: ``conv``."
msgstr ""

#: disnake.ext.commands.params.Param:26 of
msgid "An instance with the option info."
msgstr ""

#: disnake.ext.commands.params.Param:27 of
msgid ":class:`ParamInfo`"
msgstr ""

#: ../../ext/commands/api.rst:210
msgid "Slash Command"
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand:1 of
msgid "A class that implements the protocol for a bot slash command."
msgstr ""

#: disnake.ext.commands.core.Command:3
#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:3
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:3
#: disnake.ext.commands.slash_core.InvokableSlashCommand:3
#: disnake.ext.commands.slash_core.SubCommand:3
#: disnake.ext.commands.slash_core.SubCommandGroup:3 of
msgid ""
"These are not created manually, instead they are created via the "
"decorator or functional interface."
msgstr ""

#: disnake.ext.commands.core.Command:8
#: disnake.ext.commands.slash_core.InvokableSlashCommand:8 of
msgid "The name of the command."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:14
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:14
#: disnake.ext.commands.slash_core.InvokableSlashCommand:14 of
msgid "An object being registered in the API."
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand:16 of
msgid ":class:`.SlashCommand`"
msgstr ""

#: disnake.ext.commands.core.Command:14
#: disnake.ext.commands.slash_core.InvokableSlashCommand:20 of
msgid "The coroutine that is executed when the command is called."
msgstr ""

#: disnake.ext.commands.core.Command:16
#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:22
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:22
#: disnake.ext.commands.slash_core.InvokableSlashCommand:22
#: disnake.ext.commands.slash_core.SubCommand:22
#: disnake.ext.commands.slash_core.SubCommandGroup:22 of
msgid ":ref:`coroutine <coroutine>`"
msgstr ""

#: disnake.ext.commands.core.Command:60
#: disnake.ext.commands.slash_core.InvokableSlashCommand:26 of
msgid "The cog that this command belongs to. ``None`` if there isn't one."
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand:32 of
msgid ""
"A list of predicates that verifies if the command could be executed with "
"the given :class:`.ApplicationCommandInteraction` as the sole parameter. "
"If an exception is necessary to be thrown to signal failure, then one "
"inherited from :exc:`.CommandError` should be used. Note that if the "
"checks fail then :exc:`.CheckFailure` exception is raised to the "
":func:`.on_slash_command_error` event."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:39
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:39
#: disnake.ext.commands.slash_core.InvokableSlashCommand:39
#: disnake.ext.commands.slash_core.SubCommand:39
#: disnake.ext.commands.slash_core.SubCommandGroup:39 of
msgid "List[Callable[[:class:`.ApplicationCommandInteraction`], :class:`bool`]]"
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:43
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:43
#: disnake.ext.commands.slash_core.InvokableSlashCommand:43 of
msgid ""
"The list of IDs of the guilds where the command is synced. ``None`` if "
"this command is global."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:45
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:45
#: disnake.ext.commands.slash_core.InvokableSlashCommand:45 of
msgid "Optional[List[:class:`int`]]"
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand:49
#: disnake.ext.commands.slash_core.SubCommand:43 of
msgid ""
"A mapping of option names to function parameter names, mainly for "
"internal processes."
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand:51
#: disnake.ext.commands.slash_core.SubCommand:45 of
msgid "Dict[:class:`str`, :class:`str`]"
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:49
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:49
#: disnake.ext.commands.slash_core.InvokableSlashCommand:55 of
msgid "Whether to sync the command in the API with ``body`` or not."
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command:1 of
msgid "A decorator that creates a subcommand under the base command."
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command:3 of
msgid "the name of the subcommand. Defaults to the function name"
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command:5 of
msgid "the description of the subcommand"
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command:7 of
msgid "the options of the subcommand for registration in API"
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command:9 of
msgid ""
"which function param states for each option. If the name of an option "
"already matches the corresponding function param, you don't have to "
"specify the connectors. Connectors template: ``{\"option-name\": "
"\"param_name\", ...}``"
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command:15 of
msgid ""
"A decorator that converts the provided method into a :class:`SubCommand`,"
" adds it to the bot, then returns it."
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command:16
#: disnake.ext.commands.slash_core.SubCommandGroup.sub_command:6 of
msgid "Callable[..., :class:`SubCommand`]"
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command_group:1 of
msgid "A decorator that creates a subcommand group under the base command."
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command_group:3 of
msgid "the name of the subcommand group. Defaults to the function name"
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command_group:6 of
msgid ""
"A decorator that converts the provided method into a "
":class:`SubCommandGroup`, adds it to the bot, then returns it."
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.sub_command_group:7 of
msgid "Callable[..., :class:`SubCommandGroup`]"
msgstr ""

#: disnake.ext.commands.base_core.InvokableApplicationCommand.after_invoke:3 of
msgid "A post-invoke hook is called directly after the command is called."
msgstr ""

#: disnake.ext.commands.base_core.InvokableApplicationCommand.after_invoke:5 of
msgid ""
"This post-invoke hook takes a sole parameter, a "
":class:`.ApplicationCommandInteraction`."
msgstr ""

#: disnake.ext.commands.base_core.InvokableApplicationCommand.before_invoke:3
#: of
msgid "A pre-invoke hook is called directly before the command is called."
msgstr ""

#: disnake.ext.commands.base_core.InvokableApplicationCommand.before_invoke:5
#: of
msgid ""
"This pre-invoke hook takes a sole parameter, a "
":class:`.ApplicationCommandInteraction`."
msgstr ""

#: disnake.ext.commands.base_core.InvokableApplicationCommand.error:1
#: disnake.ext.commands.core.Command.error:1 of
msgid "A decorator that registers a coroutine as a local error handler."
msgstr ""

#: disnake.ext.commands.base_core.InvokableApplicationCommand.error:3 of
msgid ""
"A local error handler is an error event limited to a single application "
"command."
msgstr ""

#: disnake.ext.commands.base_core.InvokableApplicationCommand.error:5
#: disnake.ext.commands.core.Command.error:7 of
msgid "The coroutine to register as the local error handler."
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.autocomplete:1
#: disnake.ext.commands.slash_core.SubCommand.autocomplete:1 of
msgid ""
"A decorator that registers an autocomplete function for the specified "
"option."
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.autocomplete:3
#: disnake.ext.commands.slash_core.SubCommand.autocomplete:3 of
msgid "The name of the slash command option."
msgstr ""

#: disnake.ext.commands.slash_core.InvokableSlashCommand.invoke:1
#: disnake.ext.commands.slash_core.SubCommand.invoke:1 of
msgid ""
"This method isn't really usable in this class, but it's usable in "
"subclasses."
msgstr ""

#: ../../ext/commands/api.rst:235
msgid "Slash Subcommand"
msgstr ""

#: disnake.ext.commands.slash_core.SubCommand:1 of
msgid "A class that implements the protocol for a bot slash subcommand."
msgstr ""

#: disnake.ext.commands.slash_core.SubCommand:8 of
msgid "The name of the subcommand."
msgstr ""

#: disnake.ext.commands.slash_core.SubCommand:14
#: disnake.ext.commands.slash_core.SubCommandGroup:14 of
msgid "API representation of this subcommand."
msgstr ""

#: disnake.ext.commands.slash_core.SubCommand:16
#: disnake.ext.commands.slash_core.SubCommandGroup:16 of
msgid ":class:`.Option`"
msgstr ""

#: disnake.ext.commands.slash_core.SubCommand:20 of
msgid "The coroutine that is executed when the subcommand is called."
msgstr ""

#: disnake.ext.commands.slash_core.SubCommand:26 of
msgid "The cog that this subcommand belongs to. ``None`` if there isn't one."
msgstr ""

#: disnake.ext.commands.slash_core.SubCommand:32 of
msgid ""
"A list of predicates that verifies if the subcommand could be executed "
"with the given :class:`.ApplicationCommandInteraction` as the sole "
"parameter. If an exception is necessary to be thrown to signal failure, "
"then one inherited from :exc:`.CommandError` should be used. Note that if"
" the checks fail then :exc:`.CheckFailure` exception is raised to the "
":func:`.on_slash_command_error` event."
msgstr ""

#: ../../ext/commands/api.rst:253
msgid "Slash Subcommand Group"
msgstr ""

#: disnake.ext.commands.slash_core.SubCommandGroup:1 of
msgid "A class that implements the protocol for a bot slash command group."
msgstr ""

#: disnake.ext.commands.slash_core.SubCommandGroup:8 of
msgid "The name of the group."
msgstr ""

#: disnake.ext.commands.slash_core.SubCommandGroup:20 of
msgid "The coroutine that is executed when the command group is invoked."
msgstr ""

#: disnake.ext.commands.slash_core.SubCommandGroup:26 of
msgid "The cog that this group belongs to. ``None`` if there isn't one."
msgstr ""

#: disnake.ext.commands.slash_core.SubCommandGroup:32 of
msgid ""
"A list of predicates that verifies if the group could be executed with "
"the given :class:`.ApplicationCommandInteraction` as the sole parameter. "
"If an exception is necessary to be thrown to signal failure, then one "
"inherited from :exc:`.CommandError` should be used. Note that if the "
"checks fail then :exc:`.CheckFailure` exception is raised to the "
":func:`.on_slash_command_error` event."
msgstr ""

#: disnake.ext.commands.slash_core.SubCommandGroup.sub_command:1 of
msgid ""
"A decorator that creates a subcommand in the subcommand group. Parameters"
" are the same as in :class:`InvokableSlashCommand.sub_command`"
msgstr ""

#: disnake.ext.commands.slash_core.SubCommandGroup.sub_command:5 of
msgid ""
"A decorator that converts the provided method into a SubCommand, adds it "
"to the bot, then returns it."
msgstr ""

#: ../../ext/commands/api.rst:274
msgid "ParamInfo"
msgstr ""

#: disnake.ext.commands.params.ParamInfo:1 of
msgid ""
"A class that basically connects function params with slash command "
"options. The instances of this class are not created manually, but via "
"the functional interface instead. See :func:`Param`."
msgstr ""

#: disnake.ext.commands.params.ParamInfo:7 of
msgid "The actual default value for the corresponding function param."
msgstr ""

#: disnake.ext.commands.flags.Flag:29 disnake.ext.commands.flags.Flag:35
#: disnake.ext.commands.params.ParamInfo:9
#: disnake.ext.commands.params.ParamInfo:45 of
msgid "Any"
msgstr ""

#: disnake.ext.commands.params.ParamInfo:13 of
msgid "The name of this slash command option."
msgstr ""

#: disnake.ext.commands.params.ParamInfo:19 of
msgid "The description of this slash command option."
msgstr ""

#: disnake.ext.commands.params.ParamInfo:25 of
msgid "The list of choices of this slash command option."
msgstr ""

#: disnake.ext.commands.params.ParamInfo:27 of
msgid "Iterable[Any]"
msgstr ""

#: disnake.ext.commands.params.ParamInfo:31 of
msgid "The lowest allowed value for this option."
msgstr ""

#: disnake.ext.commands.params.ParamInfo:37 of
msgid "The greatest allowed value for this option."
msgstr ""

#: disnake.ext.commands.params.ParamInfo:43 of
msgid "The type of the parameter."
msgstr ""

#: disnake.ext.commands.params.ParamInfo:49 of
msgid "The list of channel types supported by this slash command option."
msgstr ""

#: disnake.ext.commands.params.ParamInfo:51 of
msgid "List[:class:`ChannelType`]"
msgstr ""

#: disnake.ext.commands.params.ParamInfo:55 of
msgid "The function that will suggest possible autocomplete options while typing."
msgstr ""

#: disnake.ext.commands.params.ParamInfo:57 of
msgid "Callable[[:class:`ApplicationCommandInteraction`, :class:`str`], Any]"
msgstr ""

#: disnake.ext.commands.params.ParamInfo:61 of
msgid "The function that will convert the original input to a desired format."
msgstr ""

#: disnake.ext.commands.params.ParamInfo:63 of
msgid "Callable[[:class:`ApplicationCommandInteraction`, Any], Any]"
msgstr ""

#: ../../ext/commands/api.rst:281
msgid "User Command"
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:1 of
msgid ""
"A class that implements the protocol for a bot user command (context "
"menu)."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:8 of
msgid "The name of the user command."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:16 of
msgid ":class:`.UserCommand`"
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:20 of
msgid "The coroutine that is executed when the user command is called."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:26 of
msgid "The cog that this user command belongs to. ``None`` if there isn't one."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand:32 of
msgid ""
"A list of predicates that verifies if the command could be executed with "
"the given :class:`.ApplicationCommandInteraction` as the sole parameter. "
"If an exception is necessary to be thrown to signal failure, then one "
"inherited from :exc:`.CommandError` should be used. Note that if the "
"checks fail then :exc:`.CheckFailure` exception is raised to the "
":func:`.on_user_command_error` event."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand.__call__:3
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand.__call__:3 of
msgid "Calls the internal callback that the application command holds."
msgstr ""

#: disnake.ext.commands.core.Command.__call__:7
#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand.__call__:7
#: disnake.ext.commands.ctx_menus_core.InvokableUserCommand.__call__:7 of
msgid ""
"This bypasses all mechanisms -- including checks, converters, invoke "
"hooks, cooldowns, etc. You must take care to pass the proper arguments "
"and types to this function."
msgstr ""

#: ../../ext/commands/api.rst:300
msgid "Message Command"
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:1 of
msgid ""
"A class that implements the protocol for a bot message command (context "
"menu)."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:8 of
msgid "The name of the message command."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:16 of
msgid ":class:`.MessageCommand`"
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:20 of
msgid "The coroutine that is executed when the message command is called."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:26 of
msgid "The cog that this message command belongs to. ``None`` if there isn't one."
msgstr ""

#: disnake.ext.commands.ctx_menus_core.InvokableMessageCommand:32 of
msgid ""
"A list of predicates that verifies if the command could be executed with "
"the given :class:`.ApplicationCommandInteraction` as the sole parameter. "
"If an exception is necessary to be thrown to signal failure, then one "
"inherited from :exc:`.CommandError` should be used. Note that if the "
"checks fail then :exc:`.CheckFailure` exception is raised to the "
":func:`.on_message_command_error` event."
msgstr ""

#: ../../ext/commands/api.rst:319
msgid "Command"
msgstr ""

#: disnake.ext.commands.core.Command:1 of
msgid "A class that implements the protocol for a bot text command."
msgstr ""

#: disnake.ext.commands.core.Command:20 of
msgid "The long help text for the command."
msgstr ""

#: disnake.ext.commands.Command.cog_name:3
#: disnake.ext.commands.Group.cog_name:3
#: disnake.ext.commands.context.Context:50
#: disnake.ext.commands.context.Context:63
#: disnake.ext.commands.context.Context:90 disnake.ext.commands.core.Command:22
#: disnake.ext.commands.core.Command:28 disnake.ext.commands.core.Command:34 of
msgid "Optional[:class:`str`]"
msgstr ""

#: disnake.ext.commands.core.Command:26 of
msgid "The short help text for the command."
msgstr ""

#: disnake.ext.commands.core.Command:32 of
msgid "A replacement for arguments in the default help text."
msgstr ""

#: disnake.ext.commands.core.Command:38 of
msgid "The list of aliases the command can be invoked under."
msgstr ""

#: disnake.ext.commands.core.Command:40 of
msgid "Union[List[:class:`str`], Tuple[:class:`str`]]"
msgstr ""

#: disnake.ext.commands.core.Command:44 of
msgid ""
"A boolean that indicates if the command is currently enabled. If the "
"command is invoked while it is disabled, then :exc:`.DisabledCommand` is "
"raised to the :func:`.on_command_error` event. Defaults to ``True``."
msgstr ""

#: disnake.ext.commands.core.Command:53 of
msgid ""
"The parent group that this command belongs to. ``None`` if there isn't "
"one."
msgstr ""

#: disnake.ext.commands.Command.root_parent:7
#: disnake.ext.commands.Group.root_parent:7
#: disnake.ext.commands.core.Command:56 of
msgid "Optional[:class:`Group`]"
msgstr ""

#: disnake.ext.commands.core.Command:66 of
msgid ""
"A list of predicates that verifies if the command could be executed with "
"the given :class:`.Context` as the sole parameter. If an exception is "
"necessary to be thrown to signal failure, then one inherited from "
":exc:`.CommandError` should be used. Note that if the checks fail then "
":exc:`.CheckFailure` exception is raised to the :func:`.on_command_error`"
" event."
msgstr ""

#: disnake.ext.commands.core.Command:73 of
msgid "List[Callable[[:class:`.Context`], :class:`bool`]]"
msgstr ""

#: disnake.ext.commands.core.Command:77 of
msgid "The message prefixed into the default help command."
msgstr ""

#: disnake.ext.commands.core.Command:83 of
msgid ""
"If ``True``\\, the default help command does not show this in the help "
"output."
msgstr ""

#: disnake.ext.commands.core.Command:90 of
msgid ""
"If ``False`` and a keyword-only argument is provided then the keyword "
"only argument is stripped and handled as if it was a regular argument "
"that handles :exc:`.MissingRequiredArgument` and default values in a "
"regular matter rather than passing the rest completely raw. If ``True`` "
"then the keyword-only argument will pass in the rest of the arguments in "
"a completely raw matter. Defaults to ``False``."
msgstr ""

#: disnake.ext.commands.core.Command:101 of
msgid "The subcommand that was invoked, if any."
msgstr ""

#: disnake.ext.commands.core.Command:107 of
msgid ""
"If ``True`` and a variadic positional argument is specified, requires the"
" user to specify at least one argument. Defaults to ``False``."
msgstr ""

#: disnake.ext.commands.core.Command:116 of
msgid ""
"If ``True``\\, ignores extraneous strings passed to a command if all its "
"requirements are met (e.g. ``?foo a b c`` when only expecting ``a`` and "
"``b``). Otherwise :func:`.on_command_error` and local error handlers are "
"called with :exc:`.TooManyArguments`. Defaults to ``True``."
msgstr ""

#: disnake.ext.commands.core.Command:125 of
msgid ""
"If ``True``\\, cooldown processing is done after argument parsing, which "
"calls converters. If ``False`` then cooldown processing is done first and"
" then the converters are called second. Defaults to ``False``."
msgstr ""

#: disnake.ext.commands.core.Command:133 of
msgid "A dict of user provided extras to attach to the Command."
msgstr ""

#: disnake.ext.commands.core.Command:136 of
msgid "This object may be copied by the library."
msgstr ""

#: disnake.ext.commands.cog.CogMeta:65 disnake.ext.commands.context.Context:35
#: disnake.ext.commands.core.Command:138 disnake.ext.commands.core.GroupMixin:9
#: disnake.ext.commands.help.HelpCommand:44 of
msgid ":class:`dict`"
msgstr ""

#: disnake.ext.commands.core.Command.after_invoke:9 of
msgid "See :meth:`.Bot.after_invoke` for more info."
msgstr ""

#: disnake.ext.commands.core.Command.before_invoke:9 of
msgid "See :meth:`.Bot.before_invoke` for more info."
msgstr ""

#: disnake.ext.commands.core.Command.error:3 of
msgid ""
"A local error handler is an :func:`.on_command_error` event limited to a "
"single command. However, the :func:`.on_command_error` is still invoked "
"afterwards as the catch-all."
msgstr ""

#: disnake.ext.commands.core.Command.add_check:1 of
msgid "Adds a check to the command."
msgstr ""

#: disnake.ext.commands.core.Command.add_check:3 of
msgid "This is the non-decorator interface to :func:`.check`."
msgstr ""

#: disnake.ext.commands.core.Command.add_check:7
#: disnake.ext.commands.help.HelpCommand.add_check:5 of
msgid "The function that will be used as a check."
msgstr ""

#: disnake.ext.commands.core.Command.remove_check:1 of
msgid "Removes a check from the command."
msgstr ""

#: disnake.ext.commands.core.Command.remove_check:3
#: disnake.ext.commands.help.HelpCommand.remove_check:3 of
msgid ""
"This function is idempotent and will not raise an exception if the "
"function is not in the command's checks."
msgstr ""

#: disnake.ext.commands.core.Command.remove_check:8
#: disnake.ext.commands.help.HelpCommand.remove_check:8 of
msgid "The function to remove from the checks."
msgstr ""

#: disnake.ext.commands.core.Command.update:1 of
msgid "Updates :class:`Command` instance with updated attribute."
msgstr ""

#: disnake.ext.commands.core.Command.update:3 of
msgid ""
"This works similarly to the :func:`.command` decorator in terms of "
"parameters in that they are passed to the :class:`Command` or subclass "
"constructors, sans the name and callback."
msgstr ""

#: disnake.ext.commands.core.Command.__call__:3 of
msgid "Calls the internal callback that the command holds."
msgstr ""

#: disnake.ext.commands.core.Command.copy:1 of
msgid "Creates a copy of this command."
msgstr ""

#: disnake.ext.commands.core.Command.copy:3 of
msgid "A new instance of this command."
msgstr ""

#: disnake.ext.commands.core.Command.copy:4 of
msgid ":class:`Command`"
msgstr ""

#: disnake.ext.commands.Command.clean_params:1
#: disnake.ext.commands.Group.clean_params:1 of
msgid ""
"Dict[:class:`str`, :class:`inspect.Parameter`]: Retrieves the parameter "
"dictionary without the context or self parameters."
msgstr ""

#: disnake.ext.commands.Command.clean_params:4
#: disnake.ext.commands.Group.clean_params:4 of
msgid "Useful for inspecting signature."
msgstr ""

#: disnake.ext.commands.Command.full_parent_name:1
#: disnake.ext.commands.Group.full_parent_name:1 of
msgid "Retrieves the fully qualified parent command name."
msgstr ""

#: disnake.ext.commands.Command.full_parent_name:3
#: disnake.ext.commands.Group.full_parent_name:3 of
msgid ""
"This the base command name required to execute it. For example, in ``?one"
" two three`` the parent name would be ``one two``."
msgstr ""

#: disnake.ext.commands.Command.parents:1 disnake.ext.commands.Group.parents:1
#: of
msgid "Retrieves the parents of this command."
msgstr ""

#: disnake.ext.commands.Command.parents:3 disnake.ext.commands.Group.parents:3
#: of
msgid "If the command has no parents then it returns an empty :class:`list`."
msgstr ""

#: disnake.ext.commands.Command.parents:5 disnake.ext.commands.Group.parents:5
#: of
msgid "For example in commands ``?a b c test``, the parents are ``[c, b, a]``."
msgstr ""

#: disnake.ext.commands.Command.parents:9 disnake.ext.commands.Group.parents:9
#: of
msgid "List[:class:`Group`]"
msgstr ""

#: disnake.ext.commands.Command.root_parent:1
#: disnake.ext.commands.Group.root_parent:1 of
msgid "Retrieves the root parent of this command."
msgstr ""

#: disnake.ext.commands.Command.root_parent:3
#: disnake.ext.commands.Group.root_parent:3 of
msgid "If the command has no parents then it returns ``None``."
msgstr ""

#: disnake.ext.commands.Command.root_parent:5
#: disnake.ext.commands.Group.root_parent:5 of
msgid "For example in commands ``?a b c test``, the root parent is ``a``."
msgstr ""

#: disnake.ext.commands.Command.qualified_name:1
#: disnake.ext.commands.Group.qualified_name:1 of
msgid "Retrieves the fully qualified command name."
msgstr ""

#: disnake.ext.commands.Command.qualified_name:3
#: disnake.ext.commands.Group.qualified_name:3 of
msgid ""
"This is the full parent name with the command name as well. For example, "
"in ``?one two three`` the qualified name would be ``one two three``."
msgstr ""

#: disnake.ext.commands.core.Command.is_on_cooldown:1 of
msgid "Checks whether the command is currently on cooldown."
msgstr ""

#: disnake.ext.commands.core.Command.is_on_cooldown:3 of
msgid "The invocation context to use when checking the commands cooldown status."
msgstr ""

#: disnake.ext.commands.core.Command.is_on_cooldown:6 of
msgid "A boolean indicating if the command is on cooldown."
msgstr ""

#: disnake.ext.commands.core.Command.reset_cooldown:1 of
msgid "Resets the cooldown on this command."
msgstr ""

#: disnake.ext.commands.core.Command.reset_cooldown:3 of
msgid "The invocation context to reset the cooldown under."
msgstr ""

#: disnake.ext.commands.core.Command.get_cooldown_retry_after:1 of
msgid "Retrieves the amount of seconds before this command can be tried again."
msgstr ""

#: disnake.ext.commands.core.Command.get_cooldown_retry_after:5 of
msgid "The invocation context to retrieve the cooldown from."
msgstr ""

#: disnake.ext.commands.core.Command.get_cooldown_retry_after:8 of
msgid ""
"The amount of time left on this command's cooldown in seconds. If this is"
" ``0.0`` then the command isn't on cooldown."
msgstr ""

#: disnake.ext.commands.core.Command.has_error_handler:1 of
msgid ":class:`bool`: Checks whether the command has an error handler registered."
msgstr ""

#: disnake.ext.commands.Command.cog_name:1
#: disnake.ext.commands.Group.cog_name:1 of
msgid "The name of the cog this command belongs to, if any."
msgstr ""

#: disnake.ext.commands.Command.short_doc:1
#: disnake.ext.commands.Group.short_doc:1 of
msgid "Gets the \"short\" documentation of a command."
msgstr ""

#: disnake.ext.commands.Command.short_doc:3
#: disnake.ext.commands.Group.short_doc:3 of
msgid ""
"By default, this is the :attr:`.brief` attribute. If that lookup leads to"
" an empty string then the first line of the :attr:`.help` attribute is "
"used instead."
msgstr ""

#: disnake.ext.commands.Command.signature:1
#: disnake.ext.commands.Group.signature:1 of
msgid "Returns a POSIX-like signature useful for help command output."
msgstr ""

#: disnake.ext.commands.core.Command.can_run:3 of
msgid ""
"Checks if the command can be executed by checking all the predicates "
"inside the :attr:`~Command.checks` attribute. This also checks whether "
"the command is disabled."
msgstr ""

#: disnake.ext.commands.core.Command.can_run:7 of
msgid "Checks whether the command is disabled or not"
msgstr ""

#: disnake.ext.commands.core.Command.can_run:10 of
msgid "The ctx of the command currently being invoked."
msgstr ""

#: disnake.ext.commands.core.Command.can_run:13 of
msgid ""
"Any command error that was raised during a check call will be propagated"
"     by this function."
msgstr ""

#: disnake.ext.commands.core.Command.can_run:15 of
msgid "A boolean indicating if the command can be invoked."
msgstr ""

#: ../../ext/commands/api.rst:338
msgid "Group"
msgstr ""

#: disnake.ext.commands.core.Group:1 of
msgid ""
"A class that implements a grouping protocol for commands to be executed "
"as subcommands."
msgstr ""

#: disnake.ext.commands.core.Group:4 of
msgid ""
"This class is a subclass of :class:`.Command` and thus all options valid "
"in :class:`.Command` are valid in here as well."
msgstr ""

#: disnake.ext.commands.core.Group:9 of
msgid ""
"Indicates if the group callback should begin parsing and invocation only "
"if no subcommand was found. Useful for making it an error handling "
"function to tell the user that no subcommand was found or to have "
"different functionality in case no subcommand was found. If this is "
"``False``, then the group callback will always be invoked first. This "
"means that the checks and the parsing dictated by its parameters will be "
"executed. Defaults to ``False``."
msgstr ""

#: disnake.ext.commands.core.Group:22 of
msgid ""
"Indicates if the group's commands should be case insensitive. Defaults to"
" ``False``."
msgstr ""

#: disnake.ext.commands.core.Group.copy:1 of
msgid "Creates a copy of this :class:`Group`."
msgstr ""

#: disnake.ext.commands.core.Group.copy:3 of
msgid "A new instance of this group."
msgstr ""

#: disnake.ext.commands.core.Group.copy:4 of
msgid ":class:`Group`"
msgstr ""

#: ../../ext/commands/api.rst:363
msgid "GroupMixin"
msgstr ""

#: disnake.ext.commands.core.GroupMixin:1 of
msgid ""
"A mixin that implements common functionality for classes that behave "
"similar to :class:`.Group` and are allowed to register commands."
msgstr ""

#: disnake.ext.commands.core.GroupMixin:6 of
msgid "A mapping of command name to :class:`.Command` objects."
msgstr ""

#: disnake.ext.commands.core.GroupMixin:13 of
msgid "Whether the commands should be case insensitive. Defaults to ``False``."
msgstr ""

#: ../../ext/commands/api.rst:380
msgid "Cogs"
msgstr ""

#: ../../ext/commands/api.rst:383
msgid "Cog"
msgstr ""

#: disnake.ext.commands.cog.Cog:1 of
msgid "The base class that all cogs must inherit from."
msgstr ""

#: disnake.ext.commands.cog.Cog:3 of
msgid ""
"A cog is a collection of commands, listeners, and optional state to help "
"group commands together. More information on them can be found on the "
":ref:`ext_commands_cogs` page."
msgstr ""

#: disnake.ext.commands.cog.Cog:7 of
msgid ""
"When inheriting from this class, the options shown in :class:`CogMeta` "
"are equally valid here."
msgstr ""

#: disnake.ext.commands.cog.Cog.get_commands:1 of
msgid ""
"A :class:`list` of :class:`.Command`\\s that are defined inside this cog."
"  .. note::      This does not include subcommands."
msgstr ""

#: disnake.ext.commands.cog.Cog.get_commands:1 of
msgid "A :class:`list` of :class:`.Command`\\s that are defined inside this cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.get_application_commands:6
#: disnake.ext.commands.cog.Cog.get_commands:6
#: disnake.ext.commands.cog.Cog.get_slash_commands:6 of
msgid "This does not include subcommands."
msgstr ""

#: disnake.ext.commands.cog.Cog.get_commands:7 of
msgid "List[:class:`.Command`]"
msgstr ""

#: disnake.ext.commands.cog.Cog.get_application_commands:1 of
msgid ""
"A :class:`list` of :class:`.InvokableApplicationCommand`\\s that are "
"defined inside this cog.  .. note::      This does not include "
"subcommands."
msgstr ""

#: disnake.ext.commands.cog.Cog.get_application_commands:1 of
msgid ""
"A :class:`list` of :class:`.InvokableApplicationCommand`\\s that are "
"defined inside this cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.get_application_commands:7 of
msgid "List[:class:`.InvokableApplicationCommand`]"
msgstr ""

#: disnake.ext.commands.cog.Cog.get_slash_commands:1 of
msgid ""
"A :class:`list` of :class:`.InvokableSlashCommand`\\s that are defined "
"inside this cog.  .. note::      This does not include subcommands."
msgstr ""

#: disnake.ext.commands.cog.Cog.get_slash_commands:1 of
msgid ""
"A :class:`list` of :class:`.InvokableSlashCommand`\\s that are defined "
"inside this cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.get_slash_commands:7 of
msgid "List[:class:`.InvokableSlashCommand`]"
msgstr ""

#: disnake.ext.commands.cog.Cog.get_user_commands:1 of
msgid ""
"A :class:`list` of :class:`.InvokableUserCommand`\\s that are defined "
"inside this cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.get_user_commands:3 of
msgid "List[:class:`.InvokableUserCommand`]"
msgstr ""

#: disnake.ext.commands.cog.Cog.get_message_commands:1 of
msgid ""
"A :class:`list` of :class:`.InvokableMessageCommand`\\s that are defined "
"inside this cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.get_message_commands:3 of
msgid "List[:class:`.InvokableMessageCommand`]"
msgstr ""

#: disnake.ext.commands.Cog.qualified_name:1 of
msgid "Returns the cog's specified name, not the class name."
msgstr ""

#: disnake.ext.commands.Cog.description:1 of
msgid "Returns the cog's description, typically the cleaned docstring."
msgstr ""

#: disnake.ext.commands.cog.Cog.walk_commands:1 of
msgid ""
"An iterator that recursively walks through this cog's commands and "
"subcommands."
msgstr ""

#: disnake.ext.commands.cog.Cog.walk_commands:3 of
msgid ""
"Union[:class:`.Command`, :class:`.Group`] -- A command or group from the "
"cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.get_listeners:1 of
msgid ""
"Returns a :class:`list` of (name, function) listener pairs that are "
"defined in this cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.get_listeners:3 of
msgid "The listeners defined in this cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.get_listeners:4 of
msgid "List[Tuple[:class:`str`, :ref:`coroutine <coroutine>`]]"
msgstr ""

#: disnake.ext.commands.cog.Cog.listener:1 of
msgid "A decorator that marks a function as a listener."
msgstr ""

#: disnake.ext.commands.cog.Cog.listener:3 of
msgid "This is the cog equivalent of :meth:`.Bot.listen`."
msgstr ""

#: disnake.ext.commands.cog.Cog.listener:5 of
msgid ""
"The name of the event being listened to. If not provided, it defaults to "
"the function's name."
msgstr ""

#: disnake.ext.commands.cog.Cog.listener:9 of
msgid ""
"The function is not a coroutine function or a string was not passed as"
"     the name."
msgstr ""

#: disnake.ext.commands.cog.Cog.has_error_handler:1 of
msgid ":class:`bool`: Checks whether the cog has an error handler."
msgstr ""

#: disnake.ext.commands.cog.Cog.has_message_error_handler:1
#: disnake.ext.commands.cog.Cog.has_slash_error_handler:1
#: disnake.ext.commands.cog.Cog.has_user_error_handler:1 of
msgid ":class:`bool`: Checks whether the cog has a slash error handler."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_load:1 of
msgid "A special method that is called as a task when the cog is added."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_unload:1 of
msgid "A special method that is called when the cog gets removed."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_unload:3 of
msgid "This function **cannot** be a coroutine. It must be a regular function."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_unload:6 of
msgid "Subclasses must replace this if they want special unloading behaviour."
msgstr ""

#: disnake.ext.commands.cog.Cog.bot_check_once:1 of
msgid "A special method that registers as a :meth:`.Bot.check_once` check."
msgstr ""

#: disnake.ext.commands.cog.Cog.bot_check:4
#: disnake.ext.commands.cog.Cog.bot_check_once:4
#: disnake.ext.commands.cog.Cog.cog_check:4 of
msgid ""
"This function **can** be a coroutine and must take a sole parameter, "
"``ctx``, to represent the :class:`.Context`."
msgstr ""

#: disnake.ext.commands.cog.Cog.bot_check:1 of
msgid "A special method that registers as a :meth:`.Bot.check` check."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_check:1 of
msgid ""
"A special method that registers as a :func:`~disnake.ext.commands.check` "
"for every command and subcommand in this cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_slash_command_check:1 of
msgid ""
"A special method that registers as a :func:`~disnake.ext.commands.check` "
"for every slash command and subcommand in this cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_message_command_check:4
#: disnake.ext.commands.cog.Cog.cog_slash_command_check:4
#: disnake.ext.commands.cog.Cog.cog_user_command_check:4 of
msgid ""
"This function **can** be a coroutine and must take a sole parameter, "
"``inter``, to represent the :class:`.ApplicationCommandInteraction`."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_user_command_check:1 of
msgid ""
"A special method that registers as a :func:`~disnake.ext.commands.check` "
"for every user command in this cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_message_command_check:1 of
msgid ""
"A special method that registers as a :func:`~disnake.ext.commands.check` "
"for every message command in this cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_command_error:1 of
msgid ""
"A special method that is called whenever an error is dispatched inside "
"this cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_command_error:4 of
msgid ""
"This is similar to :func:`.on_command_error` except only applying to the "
"commands inside this cog."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_after_invoke:5
#: disnake.ext.commands.cog.Cog.cog_before_invoke:5
#: disnake.ext.commands.cog.Cog.cog_command_error:7 of
msgid "This **must** be a coroutine."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_command_error:9 of
msgid "The invocation context where the error happened."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_command_error:11 of
msgid "The error that happened."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_before_invoke:1 of
msgid "A special method that acts as a cog local pre-invoke hook."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_before_invoke:3 of
msgid "This is similar to :meth:`.Command.before_invoke`."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_after_invoke:1 of
msgid "A special method that acts as a cog local post-invoke hook."
msgstr ""

#: disnake.ext.commands.cog.Cog.cog_after_invoke:3 of
msgid "This is similar to :meth:`.Command.after_invoke`."
msgstr ""

#: ../../ext/commands/api.rst:391
msgid "CogMeta"
msgstr ""

#: disnake.ext.commands.cog.CogMeta:1 of
msgid "A metaclass for defining a cog."
msgstr ""

#: disnake.ext.commands.cog.CogMeta:3 of
msgid ""
"Note that you should probably not use this directly. It is exposed purely"
" for documentation purposes along with making custom metaclasses to "
"intermix with other metaclasses such as the :class:`abc.ABCMeta` "
"metaclass."
msgstr ""

#: disnake.ext.commands.cog.CogMeta:7 of
msgid ""
"For example, to create an abstract cog mixin class, the following would "
"be done."
msgstr ""

#: disnake.ext.commands.cog.CogMeta:24 of
msgid ""
"When passing an attribute of a metaclass that is documented below, note "
"that you must pass it as a keyword-only argument to the class creation "
"like the following example:"
msgstr ""

#: disnake.ext.commands.cog.CogMeta:35 of
msgid ""
"The cog name. By default, it is the name of the class with no "
"modification."
msgstr ""

#: disnake.ext.commands.cog.CogMeta:41 of
msgid "The cog description. By default, it is the cleaned docstring of the class."
msgstr ""

#: disnake.ext.commands.cog.CogMeta:49 of
msgid ""
"A list of attributes to apply to every command inside this cog. The "
"dictionary is passed into the :class:`Command` options at ``__init__``. "
"If you specify attributes inside the command attribute in the class, it "
"will override the one specified inside this attribute. For example:"
msgstr ""

#: ../../ext/commands/api.rst:401
msgid "Help Commands"
msgstr ""

#: ../../ext/commands/api.rst:404
msgid "HelpCommand"
msgstr ""

#: disnake.ext.commands.help.HelpCommand:1 of
msgid "The base implementation for help command formatting."
msgstr ""

#: disnake.ext.commands.help.HelpCommand:5 of
msgid ""
"Internally instances of this class are deep copied every time the command"
" itself is invoked to prevent a race condition mentioned in "
":issue:`2123`."
msgstr ""

#: disnake.ext.commands.help.HelpCommand:9 of
msgid ""
"This means that relying on the state of this class to be the same between"
" command invocations would not work as expected."
msgstr ""

#: disnake.ext.commands.help.HelpCommand:14 of
msgid ""
"The context that invoked this help formatter. This is generally set after"
" the help command assigned, :func:`command_callback`\\, has been called."
msgstr ""

#: disnake.ext.commands.help.HelpCommand:17 of
msgid "Optional[:class:`Context`]"
msgstr ""

#: disnake.ext.commands.help.HelpCommand:21 of
msgid ""
"Specifies if hidden commands should be shown in the output. Defaults to "
"``False``."
msgstr ""

#: disnake.ext.commands.help.HelpCommand:28 of
msgid ""
"Specifies if commands should have their :attr:`.Command.checks` called "
"and verified. If ``True``, always calls :attr:`.Command.checks`. If "
"``None``, only calls :attr:`.Command.checks` in a guild setting. If "
"``False``, never calls :attr:`.Command.checks`. Defaults to ``True``."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand:29
#: disnake.ext.commands.help.HelpCommand:35
#: disnake.ext.commands.help.MinimalHelpCommand:34 of
msgid "Optional[:class:`bool`]"
msgstr ""

#: disnake.ext.commands.help.HelpCommand:39 of
msgid ""
"A dictionary of options to pass in for the construction of the help "
"command. This allows you to change the command behaviour without actually"
" changing the implementation of the command. The attributes will be the "
"same as the ones passed in the :class:`.Command` constructor."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.add_check:1 of
msgid "Adds a check to the help command."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.remove_check:1 of
msgid "Removes a check from the help command."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.get_bot_mapping:1 of
msgid "Retrieves the bot mapping passed to :meth:`send_bot_help`."
msgstr ""

#: disnake.ext.commands.HelpCommand.invoked_with:1 of
msgid ""
"Similar to :attr:`Context.invoked_with` except properly handles the case "
"where :meth:`Context.send_help` is used."
msgstr ""

#: disnake.ext.commands.HelpCommand.invoked_with:4 of
msgid ""
"If the help command was used regularly then this returns the "
":attr:`Context.invoked_with` attribute. Otherwise, if it the help command"
" was called using :meth:`Context.send_help` then it returns the internal "
"command name of the help command."
msgstr ""

#: disnake.ext.commands.HelpCommand.invoked_with:9 of
msgid "The command name that triggered this invocation."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.get_command_signature:1
#: disnake.ext.commands.help.MinimalHelpCommand.get_command_signature:1 of
msgid "Retrieves the signature portion of the help page."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.get_command_signature:3
#: disnake.ext.commands.help.MinimalHelpCommand.get_command_signature:3 of
msgid "The command to get the signature of."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.get_command_signature:6
#: disnake.ext.commands.help.MinimalHelpCommand.get_command_signature:6 of
msgid "The signature for the command."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.remove_mentions:1 of
msgid "Removes mentions from the string to prevent abuse."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.remove_mentions:3 of
msgid "This includes ``@everyone``, ``@here``, member mentions and role mentions."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.remove_mentions:5 of
msgid "The string with mentions removed."
msgstr ""

#: disnake.ext.commands.HelpCommand.cog:1 of
msgid "A property for retrieving or setting the cog for the help command."
msgstr ""

#: disnake.ext.commands.HelpCommand.cog:3 of
msgid ""
"When a cog is set for the help command, it is as-if the help command "
"belongs to that cog. All cog special methods will apply to the help "
"command and it will be automatically unset on unload."
msgstr ""

#: disnake.ext.commands.HelpCommand.cog:7 of
msgid "To unbind the cog from the help command, you can set it to ``None``."
msgstr ""

#: disnake.ext.commands.HelpCommand.cog:9 of
msgid "The cog that is currently set for the help command."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_not_found:1
#: disnake.ext.commands.help.HelpCommand.subcommand_not_found:1 of
msgid "|maybecoro|"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_not_found:3 of
msgid ""
"A method called when a command is not found in the help command. This is "
"useful to override for i18n."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_not_found:6 of
msgid "Defaults to ``No command called {0} found.``"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_not_found:8 of
msgid ""
"The string that contains the invalid command. Note that this has had "
"mentions removed to prevent abuse."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_not_found:12 of
msgid "The string to use when a command has not been found."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.subcommand_not_found:3 of
msgid ""
"A method called when a command did not have a subcommand requested in the"
" help command. This is useful to override for i18n."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.subcommand_not_found:6 of
msgid "Defaults to either:"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.subcommand_not_found:8 of
msgid "``'Command \"{command.qualified_name}\" has no subcommands.'``"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.subcommand_not_found:9 of
msgid "If there is no subcommand in the ``command`` parameter."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.subcommand_not_found:11 of
msgid ""
"``'Command \"{command.qualified_name}\" has no subcommand named "
"{string}'``"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.subcommand_not_found:11 of
msgid "If the ``command`` parameter has subcommands but not one named ``string``."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.subcommand_not_found:13 of
msgid "The command that did not have the subcommand requested."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.subcommand_not_found:15 of
msgid ""
"The string that contains the invalid subcommand. Note that this has had "
"mentions removed to prevent abuse."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.subcommand_not_found:19 of
msgid "The string to use when the command did not have the subcommand requested."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.filter_commands:3 of
msgid "Returns a filtered list of commands and optionally sorts them."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.filter_commands:5 of
msgid ""
"This takes into account the :attr:`verify_checks` and :attr:`show_hidden`"
" attributes."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.filter_commands:8 of
msgid "An iterable of commands that are getting filtered."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.filter_commands:10 of
msgid "Whether to sort the result."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.filter_commands:12 of
msgid ""
"An optional key function to pass to :func:`py:sorted` that takes a "
":class:`Command` as its sole parameter. If ``sort`` is passed as ``True``"
" then this will default as the command name."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.filter_commands:17 of
msgid "A list of commands that passed the filter."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.filter_commands:18 of
msgid "List[:class:`Command`]"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.get_max_size:1 of
msgid "Returns the largest name length of the specified command list."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.get_max_size:3 of
msgid "A sequence of commands to check for the largest size."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.get_max_size:6 of
msgid "The maximum width of the commands."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown:7
#: disnake.ext.commands.cooldowns.Cooldown.get_tokens:8
#: disnake.ext.commands.errors.MaxConcurrencyReached:9
#: disnake.ext.commands.flags.Flag:42
#: disnake.ext.commands.help.DefaultHelpCommand:12
#: disnake.ext.commands.help.DefaultHelpCommand:42
#: disnake.ext.commands.help.HelpCommand.get_max_size:7
#: disnake.ext.commands.help.Paginator:25 of
msgid ":class:`int`"
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.get_destination:1
#: disnake.ext.commands.help.HelpCommand.get_destination:1
#: disnake.ext.commands.help.MinimalHelpCommand.get_destination:1 of
msgid ""
"Returns the :class:`~disnake.abc.Messageable` where the help command will"
" be output."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.get_destination:3
#: disnake.ext.commands.help.HelpCommand.get_destination:3
#: disnake.ext.commands.help.HelpCommand.send_bot_help:11
#: disnake.ext.commands.help.HelpCommand.send_cog_help:11
#: disnake.ext.commands.help.HelpCommand.send_command_help:10
#: disnake.ext.commands.help.HelpCommand.send_error_message:6
#: disnake.ext.commands.help.HelpCommand.send_group_help:11
#: disnake.ext.commands.help.MinimalHelpCommand.get_destination:3 of
msgid "You can override this method to customise the behaviour."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.get_destination:5
#: disnake.ext.commands.help.HelpCommand.get_destination:5
#: disnake.ext.commands.help.MinimalHelpCommand.get_destination:5 of
msgid "By default this returns the context's channel."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.get_destination:7
#: disnake.ext.commands.help.HelpCommand.get_destination:7
#: disnake.ext.commands.help.MinimalHelpCommand.get_destination:7 of
msgid "The destination where the help command will be output."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.get_destination:8
#: disnake.ext.commands.help.HelpCommand.get_destination:8
#: disnake.ext.commands.help.MinimalHelpCommand.get_destination:8 of
msgid ":class:`.abc.Messageable`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_error_message:3 of
msgid ""
"Handles the implementation when an error happens in the help command. For"
" example, the result of :meth:`command_not_found` will be passed here."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_error_message:8 of
msgid ""
"By default, this sends the error message to the destination specified by "
":meth:`get_destination`."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_bot_help:15
#: disnake.ext.commands.help.HelpCommand.send_cog_help:15
#: disnake.ext.commands.help.HelpCommand.send_command_help:14
#: disnake.ext.commands.help.HelpCommand.send_error_message:13
#: disnake.ext.commands.help.HelpCommand.send_group_help:15 of
msgid "You can access the invocation context with :attr:`HelpCommand.context`."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_error_message:15 of
msgid ""
"The error message to display to the user. Note that this has had mentions"
" removed to prevent abuse."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.on_help_command_error:3 of
msgid ""
"The help command's error handler, as specified by "
":ref:`ext_commands_error_handler`."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.on_help_command_error:5 of
msgid ""
"Useful to override if you need some specific behaviour when the error "
"handler is called."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.on_help_command_error:8 of
msgid ""
"By default this method does nothing and just propagates to the default "
"error handlers."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_bot_help:3 of
msgid ""
"Handles the implementation of the bot command page in the help command. "
"This function is called when the help command is called with no "
"arguments."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_bot_help:6
#: disnake.ext.commands.help.HelpCommand.send_cog_help:6
#: disnake.ext.commands.help.HelpCommand.send_command_help:5
#: disnake.ext.commands.help.HelpCommand.send_group_help:6 of
msgid ""
"It should be noted that this method does not return anything -- rather "
"the actual message sending should be done inside this method. Well "
"behaved subclasses should use :meth:`get_destination` to know where to "
"send, as this is a customisation point for other users."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_bot_help:17 of
msgid ""
"Also, the commands in the mapping are not filtered. To do the filtering "
"you will have to call :meth:`filter_commands` yourself."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_bot_help:20 of
msgid ""
"A mapping of cogs to commands that have been requested by the user for "
"help. The key of the mapping is the :class:`~.commands.Cog` that the "
"command belongs to, or ``None`` if there isn't one, and the value is a "
"list of commands that belongs to that cog."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_cog_help:3 of
msgid ""
"Handles the implementation of the cog page in the help command. This "
"function is called when the help command is called with a cog as the "
"argument."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_cog_help:17 of
msgid ""
"To get the commands that belong to this cog see :meth:`Cog.get_commands`."
" The commands returned not filtered. To do the filtering you will have to"
" call :meth:`filter_commands` yourself."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_cog_help:21 of
msgid "The cog that was requested for help."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_group_help:3 of
msgid ""
"Handles the implementation of the group page in the help command. This "
"function is called when the help command is called with a group as the "
"argument."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_group_help:17 of
msgid ""
"To get the commands that belong to this group without aliases see "
":attr:`Group.commands`. The commands returned are not filtered. To do the"
" filtering you will have to call :meth:`filter_commands` yourself."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_group_help:21 of
msgid "The group that was requested for help."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_command_help:3 of
msgid "Handles the implementation of the single command page in the help command."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_command_help:16 of
msgid "Showing Help"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_command_help:19 of
msgid ""
"There are certain attributes and methods that are helpful for a help "
"command to show such as the following:"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_command_help:22 of
msgid ":attr:`Command.help`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_command_help:23 of
msgid ":attr:`Command.brief`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_command_help:24 of
msgid ":attr:`Command.short_doc`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_command_help:25 of
msgid ":attr:`Command.description`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_command_help:26 of
msgid ":meth:`get_command_signature`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_command_help:28 of
msgid ""
"There are more than just these attributes but feel free to play around "
"with these to help you get started to get the output that you want."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.send_command_help:31 of
msgid "The command that was requested for help."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.prepare_help_command:3 of
msgid ""
"A low level method that can be used to prepare the help command before it"
" does anything. For example, if you need to prepare some state in your "
"subclass before the command does its processing then this would be the "
"place to do it."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.prepare_help_command:8
#: disnake.ext.commands.help.MinimalHelpCommand.get_ending_note:3 of
msgid "The default implementation does nothing."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.prepare_help_command:12 of
msgid ""
"This is called *inside* the help command callback body. So all the usual "
"rules that happen inside apply here as well."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.prepare_help_command:17 of
msgid "The argument passed to the help command."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_callback:3 of
msgid "The actual implementation of the help command."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_callback:5 of
msgid ""
"It is not recommended to override this method and instead change the "
"behaviour through the methods that actually get dispatched."
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_callback:8 of
msgid ":meth:`send_bot_help`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_callback:9 of
msgid ":meth:`send_cog_help`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_callback:10 of
msgid ":meth:`send_group_help`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_callback:11 of
msgid ":meth:`send_command_help`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_callback:12 of
msgid ":meth:`get_destination`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_callback:13 of
msgid ":meth:`command_not_found`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_callback:14 of
msgid ":meth:`subcommand_not_found`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_callback:15 of
msgid ":meth:`send_error_message`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_callback:16 of
msgid ":meth:`on_help_command_error`"
msgstr ""

#: disnake.ext.commands.help.HelpCommand.command_callback:17 of
msgid ":meth:`prepare_help_command`"
msgstr ""

#: ../../ext/commands/api.rst:412
msgid "DefaultHelpCommand"
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand:1 of
msgid "The implementation of the default help command."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand:3
#: disnake.ext.commands.help.MinimalHelpCommand:3 of
msgid "This inherits from :class:`HelpCommand`."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand:5 of
msgid "It extends it with the following attributes."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand:9 of
msgid "The maximum number of characters that fit in a line. Defaults to 80."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand:16
#: disnake.ext.commands.help.MinimalHelpCommand:7 of
msgid ""
"Whether to sort the commands in the output alphabetically. Defaults to "
"``True``."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand:22
#: disnake.ext.commands.help.MinimalHelpCommand:27 of
msgid ""
"A tribool that indicates if the help command should DM the user instead "
"of sending it to the channel it received it from. If the boolean is set "
"to ``True``, then all help output is DM'd. If ``False``, none of the help"
" output is DM'd. If ``None``, then the bot will only DM when the help "
"message becomes too long (dictated by more than :attr:`dm_help_threshold`"
" characters). Defaults to ``False``."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand:33
#: disnake.ext.commands.help.MinimalHelpCommand:38 of
msgid ""
"The number of characters the paginator must accumulate before getting "
"DM'd to the user if :attr:`dm_help` is set to ``None``. Defaults to 1000."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand:40 of
msgid "How much to indent the commands from a heading. Defaults to ``2``."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand:46 of
msgid ""
"The command list's heading string used when the help command is invoked "
"with a category name. Useful for i18n. Defaults to ``\"Commands:\"``"
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand:53
#: disnake.ext.commands.help.MinimalHelpCommand:45 of
msgid ""
"The string used when there is a command which does not belong to any "
"category(cog). Useful for i18n. Defaults to ``\"No Category\"``"
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand:60
#: disnake.ext.commands.help.MinimalHelpCommand:52 of
msgid "The paginator used to paginate the help command output."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand:62
#: disnake.ext.commands.help.MinimalHelpCommand:54 of
msgid ":class:`Paginator`"
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.shorten_text:1 of
msgid ":class:`str`: Shortens text to fit into the :attr:`width`."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.get_ending_note:1 of
msgid ""
":class:`str`: Returns help command's ending note. This is mainly useful "
"to override for i18n purposes."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.add_indented_commands:1 of
msgid "Indents a list of commands after the specified heading."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.add_indented_commands:3 of
msgid "The formatting is added to the :attr:`paginator`."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.add_indented_commands:5 of
msgid ""
"The default implementation is the command name indented by :attr:`indent`"
" spaces, padded to ``max_size`` followed by the command's "
":attr:`Command.short_doc` and then shortened to fit into the "
":attr:`width`."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.add_indented_commands:10 of
msgid "A list of commands to indent for output."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.add_indented_commands:12 of
msgid ""
"The heading to add to the output. This is only added if the list of "
"commands is greater than 0."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.add_indented_commands:15 of
msgid ""
"The max size to use for the gap between indents. If unspecified, calls "
":meth:`~HelpCommand.get_max_size` on the commands parameter."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.send_pages:1
#: disnake.ext.commands.help.MinimalHelpCommand.send_pages:1 of
msgid ""
"A helper utility to send the page output from :attr:`paginator` to the "
"destination."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.add_command_formatting:1 of
msgid ""
"A utility function to format the non-indented block of commands and "
"groups."
msgstr ""

#: disnake.ext.commands.help.DefaultHelpCommand.add_command_formatting:3
#: disnake.ext.commands.help.MinimalHelpCommand.add_command_formatting:3 of
msgid "The command to format."
msgstr ""

#: ../../ext/commands/api.rst:421
msgid "MinimalHelpCommand"
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand:1 of
msgid "An implementation of a help command with minimal output."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand:13 of
msgid ""
"The command list's heading string used when the help command is invoked "
"with a category name. Useful for i18n. Defaults to ``\"Commands\"``"
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand:20 of
msgid ""
"The alias list's heading string used to list the aliases of the command. "
"Useful for i18n. Defaults to ``\"Aliases:\"``."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.get_opening_note:1 of
msgid ""
"Returns help command's opening note. This is mainly useful to override "
"for i18n purposes."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.get_opening_note:3 of
msgid "The default implementation returns ::"
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.get_opening_note:8 of
msgid "The help command opening note."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.get_ending_note:1 of
msgid ""
"Return the help command's ending note. This is mainly useful to override "
"for i18n purposes."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.get_ending_note:5 of
msgid "The help command ending note."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.add_bot_commands_formatting:1
#: of
msgid "Adds the minified bot heading with commands to the output."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.add_aliases_formatting:3
#: disnake.ext.commands.help.MinimalHelpCommand.add_bot_commands_formatting:3
#: disnake.ext.commands.help.MinimalHelpCommand.add_subcommand_formatting:3 of
msgid "The formatting should be added to the :attr:`paginator`."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.add_bot_commands_formatting:5
#: of
msgid ""
"The default implementation is a bold underline heading followed by "
"commands separated by an EN SPACE (U+2002) in the next line."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.add_bot_commands_formatting:8
#: of
msgid "A list of commands that belong to the heading."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.add_bot_commands_formatting:10
#: of
msgid "The heading to add to the line."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.add_subcommand_formatting:1 of
msgid "Adds formatting information on a subcommand."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.add_subcommand_formatting:5 of
msgid ""
"The default implementation is the prefix and the "
":attr:`Command.qualified_name` optionally followed by an En dash and the "
"command's :attr:`Command.short_doc`."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.add_subcommand_formatting:8 of
msgid "The command to show information of."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.add_aliases_formatting:1 of
msgid "Adds the formatting information on a command's aliases."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.add_aliases_formatting:5 of
msgid ""
"The default implementation is the :attr:`aliases_heading` bolded followed"
" by a comma separated list of aliases."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.add_aliases_formatting:8 of
msgid "This is not called if there are no aliases to format."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.add_aliases_formatting:10 of
msgid "A list of aliases to format."
msgstr ""

#: disnake.ext.commands.help.MinimalHelpCommand.add_command_formatting:1 of
msgid "A utility function to format commands and groups."
msgstr ""

#: ../../ext/commands/api.rst:430
msgid "Paginator"
msgstr ""

#: disnake.ext.commands.help.Paginator:1 of
msgid "A class that aids in paginating code blocks for Discord messages."
msgstr ""

#: disnake.ext.commands.help.Paginator:7 of
msgid "Returns the total number of characters in the paginator."
msgstr ""

#: disnake.ext.commands.help.Paginator:11 of
msgid "The prefix inserted to every page. e.g. three backticks."
msgstr ""

#: disnake.ext.commands.help.Paginator:17 of
msgid "The suffix appended at the end of every page. e.g. three backticks."
msgstr ""

#: disnake.ext.commands.help.Paginator:23 of
msgid "The maximum amount of codepoints allowed in a page."
msgstr ""

#: disnake.ext.commands.help.Paginator:32 of
msgid "The character string inserted between lines. e.g. a newline character."
msgstr ""

#: disnake.ext.commands.help.Paginator.clear:1 of
msgid "Clears the paginator to have no pages."
msgstr ""

#: disnake.ext.commands.help.Paginator.add_line:1 of
msgid "Adds a line to the current page."
msgstr ""

#: disnake.ext.commands.help.Paginator.add_line:3 of
msgid "If the line exceeds the :attr:`max_size` then an exception is raised."
msgstr ""

#: disnake.ext.commands.help.Paginator.add_line:6 of
msgid "The line to add."
msgstr ""

#: disnake.ext.commands.help.Paginator.add_line:8 of
msgid "Indicates if another empty line should be added."
msgstr ""

#: disnake.ext.commands.help.Paginator.add_line:11 of
msgid "The line was too big for the current :attr:`max_size`."
msgstr ""

#: disnake.ext.commands.help.Paginator.close_page:1 of
msgid "Prematurely terminate a page."
msgstr ""

#: disnake.ext.commands.Paginator.pages:1 of
msgid "Returns the rendered list of pages."
msgstr ""

#: disnake.ext.commands.Paginator.pages:3
#: disnake.ext.commands.context.Context:74
#: disnake.ext.commands.errors.BotMissingPermissions:10
#: disnake.ext.commands.errors.MissingPermissions:10
#: disnake.ext.commands.errors.TooManyFlags:17
#: disnake.ext.commands.flags.Flag:17 of
msgid "List[:class:`str`]"
msgstr ""

#: ../../ext/commands/api.rst:438
msgid "Enums"
msgstr ""

#: ../../ext/commands/api.rst:443
msgid "Specifies a type of bucket for, e.g. a cooldown."
msgstr ""

#: ../../ext/commands/api.rst:447
msgid "The default bucket operates on a global basis."
msgstr ""

#: ../../ext/commands/api.rst:450
msgid "The user bucket operates on a per-user basis."
msgstr ""

#: ../../ext/commands/api.rst:453
msgid "The guild bucket operates on a per-guild basis."
msgstr ""

#: ../../ext/commands/api.rst:456
msgid "The channel bucket operates on a per-channel basis."
msgstr ""

#: ../../ext/commands/api.rst:459
msgid "The member bucket operates on a per-member basis."
msgstr ""

#: ../../ext/commands/api.rst:462
msgid "The category bucket operates on a per-category basis."
msgstr ""

#: ../../ext/commands/api.rst:465
msgid "The role bucket operates on a per-role basis."
msgstr ""

#: ../../ext/commands/api.rst:473
msgid "Checks"
msgstr ""

#: disnake.ext.commands.core.check:1 of
msgid ""
"A decorator that adds a check to the :class:`.Command` or its subclasses."
" These checks could be accessed via :attr:`.Command.checks`."
msgstr ""

#: disnake.ext.commands.core.check:4 of
msgid ""
"These checks should be predicates that take in a single parameter taking "
"a :class:`.Context`. If the check returns a ``False``\\-like value then "
"during invocation a :exc:`.CheckFailure` exception is raised and sent to "
"the :func:`.on_command_error` event."
msgstr ""

#: disnake.ext.commands.core.check:9 of
msgid ""
"If an exception should be thrown in the predicate then it should be a "
"subclass of :exc:`.CommandError`. Any exception not subclassed from it "
"will be propagated while those subclassed will be sent to "
":func:`.on_command_error`."
msgstr ""

#: disnake.ext.commands.core.check:14 of
msgid ""
"A special attribute named ``predicate`` is bound to the value returned by"
" this decorator to retrieve the predicate passed to the decorator. This "
"allows the following introspection and chaining to be done:"
msgstr ""

#: disnake.ext.commands.core.check:30 of
msgid ""
"The function returned by ``predicate`` is **always** a coroutine, even if"
" the original function was not a coroutine."
msgstr ""

#: disnake.ext.commands.core.check:33 of
msgid "The ``predicate`` attribute was added."
msgstr ""

#: disnake.ext.commands.core.check:38 of
msgid "Creating a basic check to see if the command invoker is you."
msgstr ""

#: disnake.ext.commands.core.check:50 of
msgid "Transforming common checks into its own decorator:"
msgstr ""

#: disnake.ext.commands.core.check:64 of
msgid "The predicate to check if the command should be invoked."
msgstr ""

#: disnake.ext.commands.core.check_any:1 of
msgid ""
"A :func:`check` that is added that checks if any of the checks passed "
"will pass, i.e. using logical OR."
msgstr ""

#: disnake.ext.commands.core.check_any:4 of
msgid ""
"If all checks fail then :exc:`.CheckAnyFailure` is raised to signal the "
"failure. It inherits from :exc:`.CheckFailure`."
msgstr ""

#: disnake.ext.commands.core.check_any:9 of
msgid "The ``predicate`` attribute for this function **is** a coroutine."
msgstr ""

#: disnake.ext.commands.core.check_any:13 of
msgid ""
"An argument list of checks that have been decorated with the "
":func:`check` decorator."
msgstr ""

#: disnake.ext.commands.core.check_any:17 of
msgid ""
"A check passed has not been decorated with the :func:`check`     "
"decorator."
msgstr ""

#: disnake.ext.commands.core.check_any:21 of
msgid "Creating a basic check to see if it's the bot owner or the server owner:"
msgstr ""

#: disnake.ext.commands.core.has_role:1 of
msgid ""
"A :func:`.check` that is added that checks if the member invoking the "
"command has the role specified via the name or ID specified."
msgstr ""

#: disnake.ext.commands.core.has_role:4 of
msgid ""
"If a string is specified, you must give the exact name of the role, "
"including caps and spelling."
msgstr ""

#: disnake.ext.commands.core.has_role:7 of
msgid ""
"If an integer is specified, you must give the exact snowflake ID of the "
"role."
msgstr ""

#: disnake.ext.commands.core.has_role:9 of
msgid ""
"If the message is invoked in a private message context then the check "
"will return ``False``."
msgstr ""

#: disnake.ext.commands.core.has_role:12 of
msgid ""
"This check raises one of two special exceptions, :exc:`.MissingRole` if "
"the user is missing a role, or :exc:`.NoPrivateMessage` if it is used in "
"a private message. Both inherit from :exc:`.CheckFailure`."
msgstr ""

#: disnake.ext.commands.core.has_role:18 of
msgid ""
"Raise :exc:`.MissingRole` or :exc:`.NoPrivateMessage` instead of generic "
":exc:`.CheckFailure`"
msgstr ""

#: disnake.ext.commands.core.has_role:21 of
msgid "The name or ID of the role to check."
msgstr ""

#: disnake.ext.commands.core.has_permissions:1 of
msgid ""
"A :func:`.check` that is added that checks if the member has all of the "
"permissions necessary."
msgstr ""

#: disnake.ext.commands.core.has_permissions:4 of
msgid ""
"Note that this check operates on the current channel permissions, not the"
" guild wide permissions."
msgstr ""

#: disnake.ext.commands.core.has_permissions:7 of
msgid ""
"The permissions passed in must be exactly like the properties shown under"
" :class:`.disnake.Permissions`."
msgstr ""

#: disnake.ext.commands.core.has_permissions:10 of
msgid ""
"This check raises a special exception, :exc:`.MissingPermissions` that is"
" inherited from :exc:`.CheckFailure`."
msgstr ""

#: disnake.ext.commands.core.has_permissions:13 of
msgid "An argument list of permissions to check for."
msgstr ""

#: disnake.ext.commands.core.has_guild_permissions:1 of
msgid ""
"Similar to :func:`.has_permissions`, but operates on guild wide "
"permissions instead of the current channel permissions."
msgstr ""

#: disnake.ext.commands.core.has_guild_permissions:4 of
msgid ""
"If this check is called in a DM context, it will raise an exception, "
":exc:`.NoPrivateMessage`."
msgstr ""

#: disnake.ext.commands.core.has_any_role:1 of
msgid ""
"A :func:`.check` that is added that checks if the member invoking the "
"command has **any** of the roles specified. This means that if they have "
"one out of the three roles specified, then this check will return `True`."
msgstr ""

#: disnake.ext.commands.core.has_any_role:5 of
msgid "Similar to :func:`.has_role`\\, the names or IDs passed in must be exact."
msgstr ""

#: disnake.ext.commands.core.has_any_role:7 of
msgid ""
"This check raises one of two special exceptions, :exc:`.MissingAnyRole` "
"if the user is missing all roles, or :exc:`.NoPrivateMessage` if it is "
"used in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr ""

#: disnake.ext.commands.core.has_any_role:13 of
msgid ""
"Raise :exc:`.MissingAnyRole` or :exc:`.NoPrivateMessage` instead of "
"generic :exc:`.CheckFailure`"
msgstr ""

#: disnake.ext.commands.core.has_any_role:16 of
msgid "An argument list of names or IDs to check that the member has roles wise."
msgstr ""

#: disnake.ext.commands.core.bot_has_role:1 of
msgid "Similar to :func:`.has_role` except checks if the bot itself has the role."
msgstr ""

#: disnake.ext.commands.core.bot_has_role:4 of
msgid ""
"This check raises one of two special exceptions, :exc:`.BotMissingRole` "
"if the bot is missing the role, or :exc:`.NoPrivateMessage` if it is used"
" in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr ""

#: disnake.ext.commands.core.bot_has_role:10 of
msgid ""
"Raise :exc:`.BotMissingRole` or :exc:`.NoPrivateMessage` instead of "
"generic :exc:`.CheckFailure`"
msgstr ""

#: disnake.ext.commands.core.bot_has_permissions:1 of
msgid ""
"Similar to :func:`.has_permissions` except checks if the bot itself has "
"the permissions listed."
msgstr ""

#: disnake.ext.commands.core.bot_has_permissions:4 of
msgid ""
"This check raises a special exception, :exc:`.BotMissingPermissions` that"
" is inherited from :exc:`.CheckFailure`."
msgstr ""

#: disnake.ext.commands.core.bot_has_guild_permissions:1 of
msgid ""
"Similar to :func:`.has_guild_permissions`, but checks the bot members "
"guild permissions."
msgstr ""

#: disnake.ext.commands.core.bot_has_any_role:1 of
msgid ""
"Similar to :func:`.has_any_role` except checks if the bot itself has any "
"of the roles listed."
msgstr ""

#: disnake.ext.commands.core.bot_has_any_role:4 of
msgid ""
"This check raises one of two special exceptions, "
":exc:`.BotMissingAnyRole` if the bot is missing all roles, or "
":exc:`.NoPrivateMessage` if it is used in a private message. Both inherit"
" from :exc:`.CheckFailure`."
msgstr ""

#: disnake.ext.commands.core.bot_has_any_role:10 of
msgid ""
"Raise :exc:`.BotMissingAnyRole` or :exc:`.NoPrivateMessage` instead of "
"generic checkfailure"
msgstr ""

#: disnake.ext.commands.core.cooldown:1 of
msgid "A decorator that adds a cooldown to a :class:`.Command`"
msgstr ""

#: disnake.ext.commands.core.cooldown:3
#: disnake.ext.commands.core.dynamic_cooldown:8 of
msgid ""
"A cooldown allows a command to only be used a specific amount of times in"
" a specific time frame. These cooldowns can be based either on a per-"
"guild, per-channel, per-user, per-role or global basis. Denoted by the "
"third argument of ``type`` which must be of enum type "
":class:`.BucketType`."
msgstr ""

#: disnake.ext.commands.core.cooldown:9
#: disnake.ext.commands.core.dynamic_cooldown:14 of
msgid ""
"If a cooldown is triggered, then :exc:`.CommandOnCooldown` is triggered "
"in :func:`.on_command_error` and the local error handler."
msgstr ""

#: disnake.ext.commands.core.cooldown:12
#: disnake.ext.commands.core.dynamic_cooldown:17 of
msgid "A command can only have a single cooldown."
msgstr ""

#: disnake.ext.commands.core.cooldown:14 of
msgid "The number of times a command can be used before triggering a cooldown."
msgstr ""

#: disnake.ext.commands.core.cooldown:16 of
msgid "The amount of seconds to wait for a cooldown when it's been triggered."
msgstr ""

#: disnake.ext.commands.core.cooldown:18 of
msgid ""
"The type of cooldown to have. If callable, should return a key for the "
"mapping.  .. versionchanged:: 1.7     Callables are now supported for "
"custom bucket types."
msgstr ""

#: disnake.ext.commands.core.cooldown:18 of
msgid ""
"The type of cooldown to have. If callable, should return a key for the "
"mapping."
msgstr ""

#: disnake.ext.commands.core.cooldown:20 of
msgid "Callables are now supported for custom bucket types."
msgstr ""

#: disnake.ext.commands.core.dynamic_cooldown:1 of
msgid "A decorator that adds a dynamic cooldown to a :class:`.Command`"
msgstr ""

#: disnake.ext.commands.core.dynamic_cooldown:3 of
msgid ""
"This differs from :func:`.cooldown` in that it takes a function that "
"accepts a single parameter of type :class:`.disnake.Message` and must "
"return a :class:`.Cooldown` or ``None``. If ``None`` is returned then "
"that cooldown is effectively bypassed."
msgstr ""

#: disnake.ext.commands.core.dynamic_cooldown:21 of
msgid ""
"A function that takes a message and returns a cooldown that will apply to"
" this invocation or ``None`` if the cooldown should be bypassed."
msgstr ""

#: disnake.ext.commands.core.dynamic_cooldown:24 of
msgid "The type of cooldown to have."
msgstr ""

#: disnake.ext.commands.core.max_concurrency:1 of
msgid ""
"A decorator that adds a maximum concurrency to a :class:`.Command` or its"
" subclasses."
msgstr ""

#: disnake.ext.commands.core.max_concurrency:3 of
msgid ""
"This enables you to only allow a certain number of command invocations at"
" the same time, for example if a command takes too long or if only one "
"user can use it at a time. This differs from a cooldown in that there is "
"no set waiting period or token bucket -- only a set number of people can "
"run the command."
msgstr ""

#: disnake.ext.commands.core.max_concurrency:10 of
msgid ""
"The maximum number of invocations of this command that can be running at "
"the same time."
msgstr ""

#: disnake.ext.commands.core.max_concurrency:12 of
msgid ""
"The bucket that this concurrency is based on, e.g. ``BucketType.guild`` "
"would allow it to be used up to ``number`` times per guild."
msgstr ""

#: disnake.ext.commands.core.max_concurrency:15 of
msgid ""
"Whether the command should wait for the queue to be over. If this is set "
"to ``False`` then instead of waiting until the command can run again, the"
" command raises :exc:`.MaxConcurrencyReached` to its error handler. If "
"this is set to ``True`` then the command waits until it can be executed."
msgstr ""

#: disnake.ext.commands.core.before_invoke:3 of
msgid ""
"This allows you to refer to one before invoke hook for several commands "
"that do not have to be within the same cog."
msgstr ""

#: disnake.ext.commands.core.after_invoke:3 of
msgid ""
"This allows you to refer to one after invoke hook for several commands "
"that do not have to be within the same cog."
msgstr ""

#: disnake.ext.commands.core.guild_only:1 of
msgid ""
"A :func:`.check` that indicates this command must only be used in a guild"
" context only. Basically, no private messages are allowed when using the "
"command."
msgstr ""

#: disnake.ext.commands.core.guild_only:5 of
msgid ""
"This check raises a special exception, :exc:`.NoPrivateMessage` that is "
"inherited from :exc:`.CheckFailure`."
msgstr ""

#: disnake.ext.commands.core.dm_only:1 of
msgid ""
"A :func:`.check` that indicates this command must only be used in a DM "
"context. Only private messages are allowed when using the command."
msgstr ""

#: disnake.ext.commands.core.dm_only:5 of
msgid ""
"This check raises a special exception, :exc:`.PrivateMessageOnly` that is"
" inherited from :exc:`.CheckFailure`."
msgstr ""

#: disnake.ext.commands.core.is_owner:1 of
msgid ""
"A :func:`.check` that checks if the person invoking this command is the "
"owner of the bot."
msgstr ""

#: disnake.ext.commands.core.is_owner:4 of
msgid "This is powered by :meth:`.Bot.is_owner`."
msgstr ""

#: disnake.ext.commands.core.is_owner:6 of
msgid ""
"This check raises a special exception, :exc:`.NotOwner` that is derived "
"from :exc:`.CheckFailure`."
msgstr ""

#: disnake.ext.commands.core.is_nsfw:1 of
msgid "A :func:`.check` that checks if the channel is a NSFW channel."
msgstr ""

#: disnake.ext.commands.core.is_nsfw:3 of
msgid ""
"This check raises a special exception, :exc:`.NSFWChannelRequired` that "
"is derived from :exc:`.CheckFailure`."
msgstr ""

#: disnake.ext.commands.core.is_nsfw:8 of
msgid ""
"Raise :exc:`.NSFWChannelRequired` instead of generic "
":exc:`.CheckFailure`. DM channels will also now pass this check."
msgstr ""

#: disnake.ext.commands.base_core.guild_permissions:1 of
msgid ""
"A decorator that sets application command permissions in the specified "
"guild. This type of permissions \"greys out\" the command in the command "
"picker. If you want to change this type of permissions dynamically, this "
"decorator is not useful."
msgstr ""

#: disnake.ext.commands.base_core.guild_permissions:5 of
msgid "the ID of the guild to apply the permissions to."
msgstr ""

#: disnake.ext.commands.base_core.guild_permissions:7 of
msgid ""
"a mapping of role IDs to boolean values indicating the permission. "
"``True`` = allow, ``False`` = deny."
msgstr ""

#: disnake.ext.commands.base_core.guild_permissions:9 of
msgid ""
"a mapping of user IDs to boolean values indicating the permission. "
"``True`` = allow, ``False`` = deny."
msgstr ""

#: disnake.ext.commands.base_core.guild_permissions:11 of
msgid ""
"whether to allow/deny the bot owner(s) to use the command. Set to "
"``None`` to ignore."
msgstr ""

#: ../../ext/commands/api.rst:538
msgid "Cooldown"
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown:1 of
msgid "Represents a cooldown for a command."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown:5 of
msgid "The total number of tokens available per :attr:`per` seconds."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown:11 of
msgid "The length of the cooldown period in seconds."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.get_tokens:1 of
msgid "Returns the number of available tokens before rate limiting is applied."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.get_tokens:3 of
msgid ""
"The time in seconds since Unix epoch to calculate tokens at. If not "
"supplied then :func:`time.time()` is used."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.get_tokens:7 of
msgid "The number of tokens available before the cooldown is to be applied."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.get_retry_after:1 of
msgid "Returns the time in seconds until the cooldown will be reset."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.get_retry_after:3 of
msgid ""
"The current time in seconds since Unix epoch. If not supplied, then "
":func:`time.time()` is used."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.get_retry_after:7 of
msgid "The number of seconds to wait before this cooldown will be reset."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.update_rate_limit:1 of
msgid "Updates the cooldown rate limit."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.update_rate_limit:3 of
msgid ""
"The time in seconds since Unix epoch to update the rate limit at. If not "
"supplied, then :func:`time.time()` is used."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.update_rate_limit:7 of
msgid "The retry-after time in seconds if rate limited."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.update_rate_limit:8 of
msgid "Optional[:class:`float`]"
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.reset:1 of
msgid "Reset the cooldown to its initial state."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.copy:1 of
msgid "Creates a copy of this cooldown."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.copy:3 of
msgid "A new instance of this cooldown."
msgstr ""

#: disnake.ext.commands.cooldowns.Cooldown.copy:4 of
msgid ":class:`Cooldown`"
msgstr ""

#: ../../ext/commands/api.rst:546
msgid "Context"
msgstr ""

#: disnake.ext.commands.context.Context:1 of
msgid "Represents the context in which a command is being invoked under."
msgstr ""

#: disnake.ext.commands.context.Context:3 of
msgid ""
"This class contains a lot of meta data to help you understand more about "
"the invocation context. This class is not created manually and is instead"
" passed around to commands as the first parameter."
msgstr ""

#: disnake.ext.commands.context.Context:7 of
msgid "This class implements the :class:`~disnake.abc.Messageable` ABC."
msgstr ""

#: disnake.ext.commands.context.Context:11 of
msgid "The message that triggered the command being executed."
msgstr ""

#: disnake.ext.commands.context.Context:13
#: disnake.ext.commands.context.Context.reply:13 of
msgid ":class:`.Message`"
msgstr ""

#: disnake.ext.commands.context.Context:17 of
msgid "The bot that contains the command being executed."
msgstr ""

#: disnake.ext.commands.context.Context:19 of
msgid ":class:`.Bot`"
msgstr ""

#: disnake.ext.commands.context.Context:23 of
msgid ""
"The list of transformed arguments that were passed into the command. If "
"this is accessed during the :func:`.on_command_error` event then this "
"list could be incomplete."
msgstr ""

#: disnake.ext.commands.context.Context:27 of
msgid ":class:`list`"
msgstr ""

#: disnake.ext.commands.context.Context:31 of
msgid ""
"A dictionary of transformed arguments that were passed into the command. "
"Similar to :attr:`args`\\, if this is accessed in the "
":func:`.on_command_error` event then this dict could be incomplete."
msgstr ""

#: disnake.ext.commands.context.Context:39 of
msgid ""
"The parameter that is currently being inspected and converted. This is "
"only of use for within converters."
msgstr ""

#: disnake.ext.commands.context.Context:44 of
msgid "Optional[:class:`inspect.Parameter`]"
msgstr ""

#: disnake.ext.commands.context.Context:48 of
msgid "The prefix that was used to invoke the command."
msgstr ""

#: disnake.ext.commands.context.Context:54 of
msgid "The command that is being invoked currently."
msgstr ""

#: disnake.ext.commands.context.Context:60 of
msgid ""
"The command name that triggered this invocation. Useful for finding out "
"which alias called the command."
msgstr ""

#: disnake.ext.commands.context.Context:67 of
msgid ""
"The command names of the parents that triggered this invocation. Useful "
"for finding out which aliases called the command."
msgstr ""

#: disnake.ext.commands.context.Context:70 of
msgid ""
"For example in commands ``?a b c test``, the invoked parents are ``['a', "
"'b', 'c']``."
msgstr ""

#: disnake.ext.commands.context.Context:78 of
msgid ""
"The subcommand that was invoked. If no valid subcommand was invoked then "
"this is equal to ``None``."
msgstr ""

#: disnake.ext.commands.context.Context:85 of
msgid ""
"The string that was attempted to call a subcommand. This does not have to"
" point to a valid registered subcommand and could just point to a "
"nonsense string. If nothing was passed to attempt a call to a subcommand "
"then this is set to ``None``."
msgstr ""

#: disnake.ext.commands.context.Context:94 of
msgid ""
"A boolean that indicates if the command failed to be parsed, checked, or "
"invoked."
msgstr ""

#: disnake.abc.Messageable.history:1 of
msgid ""
"Returns an :class:`~disnake.AsyncIterator` that enables receiving the "
"destination's message history."
msgstr ""

#: disnake.abc.Messageable.history:3 of
msgid ""
"You must have :attr:`~disnake.Permissions.read_message_history` "
"permissions to use this."
msgstr ""

#: disnake.abc.Messageable.history:14 of
msgid "Flattening into a list: ::"
msgstr ""

#: disnake.abc.Messageable.history:21 of
msgid ""
"The number of messages to retrieve. If ``None``, retrieves every message "
"in the channel. Note, however, that this would make it a slow operation."
msgstr ""

#: disnake.abc.Messageable.history:25 of
msgid ""
"Retrieve messages before this date or message. If a datetime is provided,"
" it is recommended to use a UTC aware datetime. If the datetime is naive,"
" it is assumed to be local time."
msgstr ""

#: disnake.abc.Messageable.history:29 of
msgid ""
"Retrieve messages after this date or message. If a datetime is provided, "
"it is recommended to use a UTC aware datetime. If the datetime is naive, "
"it is assumed to be local time."
msgstr ""

#: disnake.abc.Messageable.history:33 of
msgid ""
"Retrieve messages around this date or message. If a datetime is provided,"
" it is recommended to use a UTC aware datetime. If the datetime is naive,"
" it is assumed to be local time. When using this argument, the maximum "
"limit is 101. Note that if the limit is an even number then this will "
"return at most limit + 1 messages."
msgstr ""

#: disnake.abc.Messageable.history:39 of
msgid ""
"If set to ``True``, return messages in oldest->newest order. Defaults to "
"``True`` if ``after`` is specified, otherwise ``False``."
msgstr ""

#: disnake.abc.Messageable.history:43 of
msgid "You do not have permissions to get channel message history."
msgstr ""

#: disnake.abc.Messageable.history:44 of
msgid "The request to get message history failed."
msgstr ""

#: disnake.abc.Messageable.history:46 of
msgid ":class:`~disnake.Message` -- The message with the message data parsed."
msgstr ""

#: disnake.abc.Messageable.typing:1 of
msgid ""
"Returns a context manager that allows you to type for an indefinite "
"period of time."
msgstr ""

#: disnake.abc.Messageable.typing:3 of
msgid "This is useful for denoting long computations in your bot."
msgstr ""

#: disnake.abc.Messageable.typing:7 of
msgid ""
"This is both a regular context manager and an async context manager. This"
" means that both ``with`` and ``async with`` work with this."
msgstr ""

#: disnake.abc.Messageable.typing:10 of
msgid "Example Usage: ::"
msgstr ""

#: disnake.ext.commands.context.Context.invoke:3 of
msgid "Calls a command with the arguments given."
msgstr ""

#: disnake.ext.commands.context.Context.invoke:5 of
msgid ""
"This is useful if you want to just call the callback that a "
":class:`.Command` holds internally."
msgstr ""

#: disnake.ext.commands.context.Context.invoke:10 of
msgid ""
"This does not handle converters, checks, cooldowns, pre-invoke, or after-"
"invoke hooks in any matter. It calls the internal callback directly as-if"
" it was a regular function."
msgstr ""

#: disnake.ext.commands.context.Context.invoke:14 of
msgid ""
"You must take care in passing the proper arguments when using this "
"function."
msgstr ""

#: disnake.ext.commands.context.Context.invoke:17 of
msgid "The command that is going to be called."
msgstr ""

#: disnake.ext.commands.context.Context.invoke:19 of
msgid "The arguments to use."
msgstr ""

#: disnake.ext.commands.context.Context.invoke:20 of
msgid "The keyword arguments to use."
msgstr ""

#: disnake.ext.commands.context.Context.invoke:22 of
msgid "The command argument to invoke is missing."
msgstr ""

#: disnake.ext.commands.context.Context.reinvoke:3 of
msgid "Calls the command again."
msgstr ""

#: disnake.ext.commands.context.Context.reinvoke:5 of
msgid ""
"This is similar to :meth:`~.Context.invoke` except that it bypasses "
"checks, cooldowns, and error handlers."
msgstr ""

#: disnake.ext.commands.context.Context.reinvoke:10 of
msgid ""
"If you want to bypass :exc:`.UserInputError` derived exceptions, it is "
"recommended to use the regular :meth:`~.Context.invoke` as it will work "
"more naturally. After all, this will end up using the old arguments the "
"user has used and will thus just fail again."
msgstr ""

#: disnake.ext.commands.context.Context.reinvoke:16 of
msgid "Whether to call the before and after invoke hooks."
msgstr ""

#: disnake.ext.commands.context.Context.reinvoke:18 of
msgid ""
"Whether to start the call chain from the very beginning or where we left "
"off (i.e. the command that caused the error). The default is to start "
"where we left off."
msgstr ""

#: disnake.ext.commands.context.Context.reinvoke:23 of
msgid "The context to reinvoke is not valid."
msgstr ""

#: disnake.ext.commands.Context.valid:1 of
msgid "Checks if the invocation context is valid to be invoked with."
msgstr ""

#: disnake.ext.commands.Context.clean_prefix:1 of
msgid ""
"The cleaned up invoke prefix. i.e. mentions are ``@name`` instead of "
"``<@id>``."
msgstr ""

#: disnake.ext.commands.Context.cog:1 of
msgid ""
"Returns the cog associated with this context's command. None if it does "
"not exist."
msgstr ""

#: ../../docstring disnake.ext.commands.Context.guild:1 of
msgid ""
"Returns the guild associated with this context's command. None if not "
"available."
msgstr ""

#: ../../docstring disnake.ext.commands.Context.channel:1 of
msgid ""
"Returns the channel associated with this context's command. Shorthand for"
" :attr:`.Message.channel`."
msgstr ""

#: ../../docstring disnake.ext.commands.Context.channel:4 of
msgid "Union[:class:`.abc.Messageable`]"
msgstr ""

#: ../../docstring disnake.ext.commands.Context.author:1 of
msgid ""
"Union[:class:`~disnake.User`, :class:`.Member`]: Returns the author "
"associated with this context's command. Shorthand for "
":attr:`.Message.author`"
msgstr ""

#: ../../docstring disnake.ext.commands.Context.me:1 of
msgid ""
"Union[:class:`.Member`, :class:`.ClientUser`]: Similar to "
":attr:`.Guild.me` except it may return the :class:`.ClientUser` in "
"private message contexts."
msgstr ""

#: disnake.ext.commands.Context.voice_client:1 of
msgid "A shortcut to :attr:`.Guild.voice_client`\\, if applicable."
msgstr ""

#: disnake.ext.commands.Context.voice_client:3 of
msgid "Optional[:class:`.VoiceProtocol`]"
msgstr ""

#: disnake.ext.commands.context.Context.send_help:3 of
msgid ""
"Shows the help command for the specified entity if given. The entity can "
"be a command or a cog."
msgstr ""

#: disnake.ext.commands.context.Context.send_help:6 of
msgid "If no entity is given, then it'll show help for the entire bot."
msgstr ""

#: disnake.ext.commands.context.Context.send_help:9 of
msgid ""
"If the entity is a string, then it looks up whether it's a :class:`Cog` "
"or a :class:`Command`."
msgstr ""

#: disnake.ext.commands.context.Context.send_help:14 of
msgid ""
"Due to the way this function works, instead of returning something "
"similar to :meth:`~.commands.HelpCommand.command_not_found` this returns "
":class:`None` on bad input or no help command."
msgstr ""

#: disnake.ext.commands.context.Context.send_help:18 of
msgid "The entity to show help for."
msgstr ""

#: disnake.ext.commands.context.Context.send_help:21 of
msgid "The result of the help command, if any."
msgstr ""

#: disnake.ext.commands.context.Context.reply:3 of
msgid ""
"A shortcut method to :meth:`.abc.Messageable.send` to reply to the "
":class:`.Message`."
msgstr ""

#: disnake.abc.Messageable.send:70 disnake.ext.commands.context.Context.reply:8
#: of
msgid "Sending the message failed."
msgstr ""

#: disnake.abc.Messageable.send:71 disnake.ext.commands.context.Context.reply:9
#: of
msgid "You do not have the proper permissions to send the message."
msgstr ""

#: disnake.ext.commands.context.Context.reply:10 of
msgid ""
"The ``files`` list is not of the appropriate size or     you specified "
"both ``file`` and ``files``."
msgstr ""

#: disnake.abc.Messageable.send:74
#: disnake.ext.commands.context.Context.reply:12 of
msgid "The message that was sent."
msgstr ""

#: disnake.abc.Messageable.fetch_message:3 of
msgid "Retrieves a single :class:`~disnake.Message` from the destination."
msgstr ""

#: disnake.abc.Messageable.fetch_message:5 of
msgid "The message ID to look for."
msgstr ""

#: disnake.abc.Messageable.fetch_message:8 of
msgid "The specified message was not found."
msgstr ""

#: disnake.abc.Messageable.fetch_message:9 of
msgid "You do not have the permissions required to get a message."
msgstr ""

#: disnake.abc.Messageable.fetch_message:10 of
msgid "Retrieving the message failed."
msgstr ""

#: disnake.abc.Messageable.fetch_message:12 of
msgid "The message asked for."
msgstr ""

#: disnake.abc.Messageable.fetch_message:13 disnake.abc.Messageable.send:75 of
msgid ":class:`~disnake.Message`"
msgstr ""

#: disnake.abc.Messageable.pins:3 of
msgid "Retrieves all messages that are currently pinned in the channel."
msgstr ""

#: disnake.abc.Messageable.pins:7 of
msgid ""
"Due to a limitation with the Discord API, the :class:`.Message` objects "
"returned by this method do not contain complete "
":attr:`.Message.reactions` data."
msgstr ""

#: disnake.abc.Messageable.pins:11 of
msgid "Retrieving the pinned messages failed."
msgstr ""

#: disnake.abc.Messageable.pins:13 of
msgid "The messages that are currently pinned."
msgstr ""

#: disnake.abc.Messageable.pins:14 of
msgid "List[:class:`~disnake.Message`]"
msgstr ""

#: disnake.abc.Messageable.send:3 of
msgid "Sends a message to the destination with the content given."
msgstr ""

#: disnake.abc.Messageable.send:5 of
msgid ""
"The content must be a type that can convert to a string through "
"``str(content)``. If the content is set to ``None`` (the default), then "
"the ``embed`` parameter must be provided."
msgstr ""

#: disnake.abc.Messageable.send:9 of
msgid ""
"To upload a single file, the ``file`` parameter should be used with a "
"single :class:`~disnake.File` object. To upload multiple files, the "
"``files`` parameter should be used with a :class:`list` of "
":class:`~disnake.File` objects. **Specifying both parameters will lead to"
" an exception**."
msgstr ""

#: disnake.abc.Messageable.send:14 of
msgid ""
"To upload a single embed, the ``embed`` parameter should be used with a "
"single :class:`~disnake.Embed` object. To upload multiple embeds, the "
"``embeds`` parameter should be used with a :class:`list` of "
":class:`~disnake.Embed` objects. **Specifying both parameters will lead "
"to an exception**."
msgstr ""

#: disnake.abc.Messageable.send:19 of
msgid "The content of the message to send."
msgstr ""

#: disnake.abc.Messageable.send:21 of
msgid "Indicates if the message should be sent using text-to-speech."
msgstr ""

#: disnake.abc.Messageable.send:23 of
msgid ""
"The rich embed for the content to send. This cannot be mixed with "
"``embeds`` parameter."
msgstr ""

#: disnake.abc.Messageable.send:26 of
msgid ""
"A list of embeds to send with the content. Must be a maximum of 10. This "
"cannot be mixed with the ``embed`` parameter.  .. versionadded:: 2.0"
msgstr ""

#: disnake.abc.Messageable.send:26 of
msgid ""
"A list of embeds to send with the content. Must be a maximum of 10. This "
"cannot be mixed with the ``embed`` parameter."
msgstr ""

#: disnake.abc.Messageable.send:31 of
msgid "The file to upload. This cannot be mixed with ``files`` parameter."
msgstr ""

#: disnake.abc.Messageable.send:33 of
msgid ""
"A list of files to upload. Must be a maximum of 10. This cannot be mixed "
"with the ``file`` parameter."
msgstr ""

#: disnake.abc.Messageable.send:36 of
msgid ""
"A list of stickers to upload. Must be a maximum of 3.  .. versionadded:: "
"2.0"
msgstr ""

#: disnake.abc.Messageable.send:36 of
msgid "A list of stickers to upload. Must be a maximum of 3."
msgstr ""

#: disnake.abc.Messageable.send:40 of
msgid ""
"The nonce to use for sending this message. If the message was "
"successfully sent, then the message will have a nonce with this value."
msgstr ""

#: disnake.abc.Messageable.send:43 of
msgid ""
"If provided, the number of seconds to wait in the background before "
"deleting the message we just sent. If the deletion fails, then it is "
"silently ignored."
msgstr ""

#: disnake.abc.Messageable.send:47 of
msgid ""
"Controls the mentions being processed in this message. If this is passed,"
" then the object is merged with :attr:`Client.allowed_mentions "
"<disnake.Client.allowed_mentions>`. The merging behaviour only overrides "
"attributes that have been explicitly passed to the object, otherwise it "
"uses the attributes set in :attr:`Client.allowed_mentions "
"<disnake.Client.allowed_mentions>`. If no object is passed at all then "
"the defaults given by :attr:`Client.allowed_mentions "
"<disnake.Client.allowed_mentions>` are used instead.  .. versionadded:: "
"1.4"
msgstr ""

#: disnake.abc.Messageable.send:47 of
msgid ""
"Controls the mentions being processed in this message. If this is passed,"
" then the object is merged with :attr:`Client.allowed_mentions "
"<disnake.Client.allowed_mentions>`. The merging behaviour only overrides "
"attributes that have been explicitly passed to the object, otherwise it "
"uses the attributes set in :attr:`Client.allowed_mentions "
"<disnake.Client.allowed_mentions>`. If no object is passed at all then "
"the defaults given by :attr:`Client.allowed_mentions "
"<disnake.Client.allowed_mentions>` are used instead."
msgstr ""

#: disnake.abc.Messageable.send:56 of
msgid ""
"A reference to the :class:`~disnake.Message` to which you are replying, "
"this can be created using :meth:`~disnake.Message.to_reference` or passed"
" directly as a :class:`~disnake.Message`. You can control whether this "
"mentions the author of the referenced message using the "
":attr:`~disnake.AllowedMentions.replied_user` attribute of "
"``allowed_mentions`` or by setting ``mention_author``.  .. versionadded::"
" 1.6"
msgstr ""

#: disnake.abc.Messageable.send:56 of
msgid ""
"A reference to the :class:`~disnake.Message` to which you are replying, "
"this can be created using :meth:`~disnake.Message.to_reference` or passed"
" directly as a :class:`~disnake.Message`. You can control whether this "
"mentions the author of the referenced message using the "
":attr:`~disnake.AllowedMentions.replied_user` attribute of "
"``allowed_mentions`` or by setting ``mention_author``."
msgstr ""

#: disnake.abc.Messageable.send:63 of
msgid ""
"If set, overrides the :attr:`~disnake.AllowedMentions.replied_user` "
"attribute of ``allowed_mentions``.  .. versionadded:: 1.6"
msgstr ""

#: disnake.abc.Messageable.send:63 of
msgid ""
"If set, overrides the :attr:`~disnake.AllowedMentions.replied_user` "
"attribute of ``allowed_mentions``."
msgstr ""

#: disnake.abc.Messageable.send:67 of
msgid "A Discord UI View to add to the message."
msgstr ""

#: disnake.abc.Messageable.send:72 of
msgid ""
"The ``files`` list is not of the appropriate size,     you specified both"
" ``file`` and ``files``,     or you specified both ``embed`` and "
"``embeds``,     or the ``reference`` object is not a "
":class:`~disnake.Message`,     :class:`~disnake.MessageReference` or "
":class:`~disnake.PartialMessage`."
msgstr ""

#: disnake.abc.Messageable.trigger_typing:3 of
msgid "Triggers a *typing* indicator to the destination."
msgstr ""

#: disnake.abc.Messageable.trigger_typing:5 of
msgid ""
"*Typing* indicator will go away after 10 seconds, or after a message is "
"sent."
msgstr ""

#: ../../ext/commands/api.rst:564
msgid "Converters"
msgstr ""

#: disnake.ext.commands.converter.Converter:1 of
msgid ""
"The base class of custom converters that require the :class:`.Context` to"
" be passed to be useful."
msgstr ""

#: disnake.ext.commands.converter.Converter:4 of
msgid ""
"This allows you to implement converters that function similar to the "
"special cased ``disnake`` classes."
msgstr ""

#: disnake.ext.commands.converter.Converter:7 of
msgid ""
"Classes that derive from this should override the "
":meth:`~.Converter.convert` method to do its conversion logic. This "
"method must be a :ref:`coroutine <coroutine>`."
msgstr ""

#: disnake.ext.commands.converter.CategoryChannelConverter.convert:3
#: disnake.ext.commands.converter.ColourConverter.convert:3
#: disnake.ext.commands.converter.Converter.convert:3
#: disnake.ext.commands.converter.EmojiConverter.convert:3
#: disnake.ext.commands.converter.GameConverter.convert:3
#: disnake.ext.commands.converter.GuildChannelConverter.convert:3
#: disnake.ext.commands.converter.GuildConverter.convert:3
#: disnake.ext.commands.converter.GuildStickerConverter.convert:3
#: disnake.ext.commands.converter.InviteConverter.convert:3
#: disnake.ext.commands.converter.MemberConverter.convert:3
#: disnake.ext.commands.converter.MessageConverter.convert:3
#: disnake.ext.commands.converter.ObjectConverter.convert:3
#: disnake.ext.commands.converter.PartialEmojiConverter.convert:3
#: disnake.ext.commands.converter.PartialMessageConverter.convert:3
#: disnake.ext.commands.converter.RoleConverter.convert:3
#: disnake.ext.commands.converter.StageChannelConverter.convert:3
#: disnake.ext.commands.converter.StoreChannelConverter.convert:3
#: disnake.ext.commands.converter.TextChannelConverter.convert:3
#: disnake.ext.commands.converter.ThreadConverter.convert:3
#: disnake.ext.commands.converter.UserConverter.convert:3
#: disnake.ext.commands.converter.VoiceChannelConverter.convert:3
#: disnake.ext.commands.converter.clean_content.convert:3 of
msgid "The method to override to do conversion logic."
msgstr ""

#: disnake.ext.commands.converter.CategoryChannelConverter.convert:5
#: disnake.ext.commands.converter.ColourConverter.convert:5
#: disnake.ext.commands.converter.Converter.convert:5
#: disnake.ext.commands.converter.EmojiConverter.convert:5
#: disnake.ext.commands.converter.GameConverter.convert:5
#: disnake.ext.commands.converter.GuildChannelConverter.convert:5
#: disnake.ext.commands.converter.GuildConverter.convert:5
#: disnake.ext.commands.converter.GuildStickerConverter.convert:5
#: disnake.ext.commands.converter.InviteConverter.convert:5
#: disnake.ext.commands.converter.MemberConverter.convert:5
#: disnake.ext.commands.converter.MessageConverter.convert:5
#: disnake.ext.commands.converter.ObjectConverter.convert:5
#: disnake.ext.commands.converter.PartialEmojiConverter.convert:5
#: disnake.ext.commands.converter.PartialMessageConverter.convert:5
#: disnake.ext.commands.converter.RoleConverter.convert:5
#: disnake.ext.commands.converter.StageChannelConverter.convert:5
#: disnake.ext.commands.converter.StoreChannelConverter.convert:5
#: disnake.ext.commands.converter.TextChannelConverter.convert:5
#: disnake.ext.commands.converter.ThreadConverter.convert:5
#: disnake.ext.commands.converter.UserConverter.convert:5
#: disnake.ext.commands.converter.VoiceChannelConverter.convert:5
#: disnake.ext.commands.converter.clean_content.convert:5 of
msgid ""
"If an error is found while converting, it is recommended to raise a "
":exc:`.CommandError` derived exception as it will properly propagate to "
"the error handlers."
msgstr ""

#: disnake.ext.commands.converter.CategoryChannelConverter.convert:9
#: disnake.ext.commands.converter.ColourConverter.convert:9
#: disnake.ext.commands.converter.Converter.convert:9
#: disnake.ext.commands.converter.EmojiConverter.convert:9
#: disnake.ext.commands.converter.GameConverter.convert:9
#: disnake.ext.commands.converter.GuildChannelConverter.convert:9
#: disnake.ext.commands.converter.GuildConverter.convert:9
#: disnake.ext.commands.converter.GuildStickerConverter.convert:9
#: disnake.ext.commands.converter.InviteConverter.convert:9
#: disnake.ext.commands.converter.MemberConverter.convert:9
#: disnake.ext.commands.converter.MessageConverter.convert:9
#: disnake.ext.commands.converter.ObjectConverter.convert:9
#: disnake.ext.commands.converter.PartialEmojiConverter.convert:9
#: disnake.ext.commands.converter.PartialMessageConverter.convert:9
#: disnake.ext.commands.converter.RoleConverter.convert:9
#: disnake.ext.commands.converter.StageChannelConverter.convert:9
#: disnake.ext.commands.converter.StoreChannelConverter.convert:9
#: disnake.ext.commands.converter.TextChannelConverter.convert:9
#: disnake.ext.commands.converter.ThreadConverter.convert:9
#: disnake.ext.commands.converter.UserConverter.convert:9
#: disnake.ext.commands.converter.VoiceChannelConverter.convert:9
#: disnake.ext.commands.converter.clean_content.convert:9 of
msgid "The invocation context that the argument is being used in."
msgstr ""

#: disnake.ext.commands.converter.CategoryChannelConverter.convert:11
#: disnake.ext.commands.converter.ColourConverter.convert:11
#: disnake.ext.commands.converter.Converter.convert:11
#: disnake.ext.commands.converter.EmojiConverter.convert:11
#: disnake.ext.commands.converter.GameConverter.convert:11
#: disnake.ext.commands.converter.GuildChannelConverter.convert:11
#: disnake.ext.commands.converter.GuildConverter.convert:11
#: disnake.ext.commands.converter.GuildStickerConverter.convert:11
#: disnake.ext.commands.converter.InviteConverter.convert:11
#: disnake.ext.commands.converter.MemberConverter.convert:11
#: disnake.ext.commands.converter.MessageConverter.convert:11
#: disnake.ext.commands.converter.ObjectConverter.convert:11
#: disnake.ext.commands.converter.PartialEmojiConverter.convert:11
#: disnake.ext.commands.converter.PartialMessageConverter.convert:11
#: disnake.ext.commands.converter.RoleConverter.convert:11
#: disnake.ext.commands.converter.StageChannelConverter.convert:11
#: disnake.ext.commands.converter.StoreChannelConverter.convert:11
#: disnake.ext.commands.converter.TextChannelConverter.convert:11
#: disnake.ext.commands.converter.ThreadConverter.convert:11
#: disnake.ext.commands.converter.UserConverter.convert:11
#: disnake.ext.commands.converter.VoiceChannelConverter.convert:11
#: disnake.ext.commands.converter.clean_content.convert:11 of
msgid "The argument that is being converted."
msgstr ""

#: disnake.ext.commands.converter.CategoryChannelConverter.convert:14
#: disnake.ext.commands.converter.ColourConverter.convert:14
#: disnake.ext.commands.converter.Converter.convert:14
#: disnake.ext.commands.converter.EmojiConverter.convert:14
#: disnake.ext.commands.converter.GameConverter.convert:14
#: disnake.ext.commands.converter.GuildChannelConverter.convert:14
#: disnake.ext.commands.converter.GuildConverter.convert:14
#: disnake.ext.commands.converter.GuildStickerConverter.convert:14
#: disnake.ext.commands.converter.InviteConverter.convert:14
#: disnake.ext.commands.converter.MemberConverter.convert:14
#: disnake.ext.commands.converter.MessageConverter.convert:14
#: disnake.ext.commands.converter.ObjectConverter.convert:14
#: disnake.ext.commands.converter.PartialEmojiConverter.convert:14
#: disnake.ext.commands.converter.PartialMessageConverter.convert:14
#: disnake.ext.commands.converter.RoleConverter.convert:14
#: disnake.ext.commands.converter.StageChannelConverter.convert:14
#: disnake.ext.commands.converter.StoreChannelConverter.convert:14
#: disnake.ext.commands.converter.TextChannelConverter.convert:14
#: disnake.ext.commands.converter.ThreadConverter.convert:14
#: disnake.ext.commands.converter.UserConverter.convert:14
#: disnake.ext.commands.converter.VoiceChannelConverter.convert:14
#: disnake.ext.commands.converter.clean_content.convert:14 of
msgid "A generic exception occurred when converting the argument."
msgstr ""

#: disnake.ext.commands.converter.CategoryChannelConverter.convert:15
#: disnake.ext.commands.converter.ColourConverter.convert:15
#: disnake.ext.commands.converter.Converter.convert:15
#: disnake.ext.commands.converter.EmojiConverter.convert:15
#: disnake.ext.commands.converter.GameConverter.convert:15
#: disnake.ext.commands.converter.GuildChannelConverter.convert:15
#: disnake.ext.commands.converter.GuildConverter.convert:15
#: disnake.ext.commands.converter.GuildStickerConverter.convert:15
#: disnake.ext.commands.converter.InviteConverter.convert:15
#: disnake.ext.commands.converter.MemberConverter.convert:15
#: disnake.ext.commands.converter.MessageConverter.convert:15
#: disnake.ext.commands.converter.ObjectConverter.convert:15
#: disnake.ext.commands.converter.PartialEmojiConverter.convert:15
#: disnake.ext.commands.converter.PartialMessageConverter.convert:15
#: disnake.ext.commands.converter.RoleConverter.convert:15
#: disnake.ext.commands.converter.StageChannelConverter.convert:15
#: disnake.ext.commands.converter.StoreChannelConverter.convert:15
#: disnake.ext.commands.converter.TextChannelConverter.convert:15
#: disnake.ext.commands.converter.ThreadConverter.convert:15
#: disnake.ext.commands.converter.UserConverter.convert:15
#: disnake.ext.commands.converter.VoiceChannelConverter.convert:15
#: disnake.ext.commands.converter.clean_content.convert:15 of
msgid "The converter failed to convert the argument."
msgstr ""

#: disnake.ext.commands.converter.ObjectConverter:1 of
msgid "Converts to a :class:`~disnake.Object`."
msgstr ""

#: disnake.ext.commands.converter.ObjectConverter:3 of
msgid ""
"The argument must follow the valid ID or mention formats (e.g. "
"`<@80088516616269824>`)."
msgstr ""

#: disnake.ext.commands.converter.CategoryChannelConverter:6
#: disnake.ext.commands.converter.EmojiConverter:6
#: disnake.ext.commands.converter.GuildChannelConverter:6
#: disnake.ext.commands.converter.GuildConverter:3
#: disnake.ext.commands.converter.GuildStickerConverter:6
#: disnake.ext.commands.converter.MemberConverter:6
#: disnake.ext.commands.converter.MessageConverter:5
#: disnake.ext.commands.converter.ObjectConverter:7
#: disnake.ext.commands.converter.RoleConverter:6
#: disnake.ext.commands.converter.StageChannelConverter:8
#: disnake.ext.commands.converter.StoreChannelConverter:6
#: disnake.ext.commands.converter.TextChannelConverter:6
#: disnake.ext.commands.converter.ThreadConverter:5
#: disnake.ext.commands.converter.UserConverter:5
#: disnake.ext.commands.converter.VoiceChannelConverter:6 of
msgid "The lookup strategy is as follows (in order):"
msgstr ""

#: disnake.ext.commands.converter.CategoryChannelConverter:8
#: disnake.ext.commands.converter.EmojiConverter:8
#: disnake.ext.commands.converter.GuildChannelConverter:8
#: disnake.ext.commands.converter.GuildConverter:5
#: disnake.ext.commands.converter.MemberConverter:8
#: disnake.ext.commands.converter.ObjectConverter:9
#: disnake.ext.commands.converter.RoleConverter:8
#: disnake.ext.commands.converter.StageChannelConverter:10
#: disnake.ext.commands.converter.StoreChannelConverter:8
#: disnake.ext.commands.converter.TextChannelConverter:8
#: disnake.ext.commands.converter.ThreadConverter:7
#: disnake.ext.commands.converter.UserConverter:7
#: disnake.ext.commands.converter.VoiceChannelConverter:8 of
msgid "Lookup by ID."
msgstr ""

#: disnake.ext.commands.converter.ObjectConverter:10 of
msgid "Lookup by member, role, or channel mention."
msgstr ""

#: disnake.ext.commands.converter.MemberConverter:1 of
msgid "Converts to a :class:`~disnake.Member`."
msgstr ""

#: disnake.ext.commands.converter.CategoryChannelConverter:3
#: disnake.ext.commands.converter.GuildChannelConverter:3
#: disnake.ext.commands.converter.MemberConverter:3
#: disnake.ext.commands.converter.StageChannelConverter:5
#: disnake.ext.commands.converter.StoreChannelConverter:3
#: disnake.ext.commands.converter.TextChannelConverter:3
#: disnake.ext.commands.converter.VoiceChannelConverter:3 of
msgid ""
"All lookups are via the local guild. If in a DM context, then the lookup "
"is done by the global cache."
msgstr ""

#: disnake.ext.commands.converter.CategoryChannelConverter:9
#: disnake.ext.commands.converter.GuildChannelConverter:9
#: disnake.ext.commands.converter.MemberConverter:9
#: disnake.ext.commands.converter.RoleConverter:9
#: disnake.ext.commands.converter.StageChannelConverter:11
#: disnake.ext.commands.converter.StoreChannelConverter:9
#: disnake.ext.commands.converter.TextChannelConverter:9
#: disnake.ext.commands.converter.ThreadConverter:8
#: disnake.ext.commands.converter.UserConverter:8
#: disnake.ext.commands.converter.VoiceChannelConverter:9 of
msgid "Lookup by mention."
msgstr ""

#: disnake.ext.commands.converter.MemberConverter:10
#: disnake.ext.commands.converter.UserConverter:9 of
msgid "Lookup by name#discrim"
msgstr ""

#: disnake.ext.commands.converter.CategoryChannelConverter:10
#: disnake.ext.commands.converter.EmojiConverter:10
#: disnake.ext.commands.converter.MemberConverter:11
#: disnake.ext.commands.converter.RoleConverter:10
#: disnake.ext.commands.converter.StageChannelConverter:12
#: disnake.ext.commands.converter.TextChannelConverter:10
#: disnake.ext.commands.converter.UserConverter:10
#: disnake.ext.commands.converter.VoiceChannelConverter:10 of
msgid "Lookup by name"
msgstr ""

#: disnake.ext.commands.converter.MemberConverter:12 of
msgid "Lookup by nickname"
msgstr ""

#: disnake.ext.commands.converter.MemberConverter:14 of
msgid "Raise :exc:`.MemberNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: disnake.ext.commands.converter.MemberConverter:17 of
msgid ""
"This converter now lazily fetches members from the gateway and HTTP APIs,"
" optionally caching the result if :attr:`.MemberCacheFlags.joined` is "
"enabled."
msgstr ""

#: disnake.ext.commands.converter.UserConverter:1 of
msgid "Converts to a :class:`~disnake.User`."
msgstr ""

#: disnake.ext.commands.converter.UserConverter:3 of
msgid "All lookups are via the global user cache."
msgstr ""

#: disnake.ext.commands.converter.UserConverter:12 of
msgid "Raise :exc:`.UserNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: disnake.ext.commands.converter.UserConverter:15 of
msgid ""
"This converter now lazily fetches users from the HTTP APIs if an ID is "
"passed and it's not available in cache."
msgstr ""

#: disnake.ext.commands.converter.MessageConverter:1 of
msgid "Converts to a :class:`disnake.Message`."
msgstr ""

#: disnake.ext.commands.converter.MessageConverter:7 of
msgid ""
"Lookup by \"{channel ID}-{message ID}\" (retrieved by shift-clicking on "
"\"Copy ID\")"
msgstr ""

#: disnake.ext.commands.converter.MessageConverter:8 of
msgid "Lookup by message ID (the message **must** be in the context channel)"
msgstr ""

#: disnake.ext.commands.converter.MessageConverter:9 of
msgid "Lookup by message URL"
msgstr ""

#: disnake.ext.commands.converter.MessageConverter:11 of
msgid ""
"Raise :exc:`.ChannelNotFound`, :exc:`.MessageNotFound` or "
":exc:`.ChannelNotReadable` instead of generic :exc:`.BadArgument`"
msgstr ""

#: disnake.ext.commands.converter.PartialMessageConverter:1 of
msgid "Converts to a :class:`disnake.PartialMessage`."
msgstr ""

#: disnake.ext.commands.converter.PartialMessageConverter:5 of
msgid "The creation strategy is as follows (in order):"
msgstr ""

#: disnake.ext.commands.converter.PartialMessageConverter:7 of
msgid ""
"By \"{channel ID}-{message ID}\" (retrieved by shift-clicking on \"Copy "
"ID\")"
msgstr ""

#: disnake.ext.commands.converter.PartialMessageConverter:8 of
msgid "By message ID (The message is assumed to be in the context channel.)"
msgstr ""

#: disnake.ext.commands.converter.PartialMessageConverter:9 of
msgid "By message URL"
msgstr ""

#: disnake.ext.commands.converter.GuildChannelConverter:1 of
msgid "Converts to a :class:`~disnake.abc.GuildChannel`."
msgstr ""

#: disnake.ext.commands.converter.GuildChannelConverter:10
#: disnake.ext.commands.converter.StoreChannelConverter:10
#: disnake.ext.commands.converter.ThreadConverter:9 of
msgid "Lookup by name."
msgstr ""

#: disnake.ext.commands.converter.TextChannelConverter:1 of
msgid "Converts to a :class:`~disnake.TextChannel`."
msgstr ""

#: disnake.ext.commands.converter.CategoryChannelConverter:12
#: disnake.ext.commands.converter.TextChannelConverter:12
#: disnake.ext.commands.converter.VoiceChannelConverter:12 of
msgid "Raise :exc:`.ChannelNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: disnake.ext.commands.converter.VoiceChannelConverter:1 of
msgid "Converts to a :class:`~disnake.VoiceChannel`."
msgstr ""

#: disnake.ext.commands.converter.StoreChannelConverter:1 of
msgid "Converts to a :class:`~disnake.StoreChannel`."
msgstr ""

#: disnake.ext.commands.converter.StageChannelConverter:1 of
msgid "Converts to a :class:`~disnake.StageChannel`."
msgstr ""

#: disnake.ext.commands.converter.CategoryChannelConverter:1 of
msgid "Converts to a :class:`~disnake.CategoryChannel`."
msgstr ""

#: disnake.ext.commands.converter.InviteConverter:1 of
msgid "Converts to a :class:`~disnake.Invite`."
msgstr ""

#: disnake.ext.commands.converter.InviteConverter:3 of
msgid "This is done via an HTTP request using :meth:`.Bot.fetch_invite`."
msgstr ""

#: disnake.ext.commands.converter.InviteConverter:5 of
msgid "Raise :exc:`.BadInviteArgument` instead of generic :exc:`.BadArgument`"
msgstr ""

#: disnake.ext.commands.converter.GuildConverter:1 of
msgid "Converts to a :class:`~disnake.Guild`."
msgstr ""

#: disnake.ext.commands.converter.GuildConverter:6 of
msgid ""
"Lookup by name. (There is no disambiguation for Guilds with multiple "
"matching names)."
msgstr ""

#: disnake.ext.commands.converter.RoleConverter:1 of
msgid "Converts to a :class:`~disnake.Role`."
msgstr ""

#: disnake.ext.commands.converter.RoleConverter:3 of
msgid ""
"All lookups are via the local guild. If in a DM context, the converter "
"raises :exc:`.NoPrivateMessage` exception."
msgstr ""

#: disnake.ext.commands.converter.RoleConverter:12 of
msgid "Raise :exc:`.RoleNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: disnake.ext.commands.converter.GameConverter:1 of
msgid "Converts to :class:`~disnake.Game`."
msgstr ""

#: disnake.ext.commands.converter.ColourConverter:1 of
msgid "Converts to a :class:`~disnake.Colour`."
msgstr ""

#: disnake.ext.commands.converter.ColourConverter:3 of
msgid "Add an alias named ColorConverter"
msgstr ""

#: disnake.ext.commands.converter.ColourConverter:6 of
msgid "The following formats are accepted:"
msgstr ""

#: disnake.ext.commands.converter.ColourConverter:8 of
msgid "``0x<hex>``"
msgstr ""

#: disnake.ext.commands.converter.ColourConverter:9 of
msgid "``#<hex>``"
msgstr ""

#: disnake.ext.commands.converter.ColourConverter:10 of
msgid "``0x#<hex>``"
msgstr ""

#: disnake.ext.commands.converter.ColourConverter:11 of
msgid "``rgb(<number>, <number>, <number>)``"
msgstr ""

#: disnake.ext.commands.converter.ColourConverter:12 of
msgid "Any of the ``classmethod`` in :class:`~disnake.Colour`"
msgstr ""

#: disnake.ext.commands.converter.ColourConverter:14 of
msgid "The ``_`` in the name can be optionally replaced with spaces."
msgstr ""

#: disnake.ext.commands.converter.ColourConverter:16 of
msgid ""
"Like CSS, ``<number>`` can be either 0-255 or 0-100% and ``<hex>`` can be"
" either a 6 digit hex number or a 3 digit hex shortcut (e.g. #fff)."
msgstr ""

#: disnake.ext.commands.converter.ColourConverter:19 of
msgid "Raise :exc:`.BadColourArgument` instead of generic :exc:`.BadArgument`"
msgstr ""

#: disnake.ext.commands.converter.ColourConverter:22 of
msgid "Added support for ``rgb`` function and 3-digit hex shortcuts"
msgstr ""

#: disnake.ext.commands.converter.EmojiConverter:1 of
msgid "Converts to a :class:`~disnake.Emoji`."
msgstr ""

#: disnake.ext.commands.converter.EmojiConverter:3
#: disnake.ext.commands.converter.GuildStickerConverter:3 of
msgid ""
"All lookups are done for the local guild first, if available. If that "
"lookup fails, then it checks the client's global cache."
msgstr ""

#: disnake.ext.commands.converter.EmojiConverter:9 of
msgid "Lookup by extracting ID from the emoji."
msgstr ""

#: disnake.ext.commands.converter.EmojiConverter:12 of
msgid "Raise :exc:`.EmojiNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: disnake.ext.commands.converter.PartialEmojiConverter:1 of
msgid "Converts to a :class:`~disnake.PartialEmoji`."
msgstr ""

#: disnake.ext.commands.converter.PartialEmojiConverter:3 of
msgid "This is done by extracting the animated flag, name and ID from the emoji."
msgstr ""

#: disnake.ext.commands.converter.PartialEmojiConverter:5 of
msgid ""
"Raise :exc:`.PartialEmojiConversionFailure` instead of generic "
":exc:`.BadArgument`"
msgstr ""

#: disnake.ext.commands.converter.ThreadConverter:1 of
msgid "Coverts to a :class:`~disnake.Thread`."
msgstr ""

#: disnake.ext.commands.converter.ThreadConverter:3 of
msgid "All lookups are via the local guild."
msgstr ""

#: disnake.ext.commands.converter.GuildStickerConverter:1 of
msgid "Converts to a :class:`~disnake.GuildSticker`."
msgstr ""

#: disnake.ext.commands.converter.GuildStickerConverter:8 of
msgid "1. Lookup by ID. 3. Lookup by name"
msgstr ""

#: disnake.ext.commands.converter.clean_content:1 of
msgid "Converts the argument to mention scrubbed version of said content."
msgstr ""

#: disnake.ext.commands.converter.clean_content:4 of
msgid "This behaves similarly to :attr:`~disnake.Message.clean_content`."
msgstr ""

#: disnake.ext.commands.converter.clean_content:8 of
msgid "Whether to clean channel mentions."
msgstr ""

#: disnake.ext.commands.converter.clean_content:14 of
msgid "Whether to use nicknames when transforming mentions."
msgstr ""

#: disnake.ext.commands.converter.clean_content:20 of
msgid "Whether to also escape special markdown characters."
msgstr ""

#: disnake.ext.commands.converter.clean_content:26 of
msgid ""
"Whether to also remove special markdown characters. This option is not "
"supported with ``escape_markdown``"
msgstr ""

#: disnake.ext.commands.converter.Greedy:1 of
msgid ""
"A special converter that greedily consumes arguments until it can't. As a"
" consequence of this behaviour, most input errors are silently discarded,"
" since it is used as an indicator of when to stop parsing."
msgstr ""

#: disnake.ext.commands.converter.Greedy:5 of
msgid ""
"When a parser error is met the greedy converter stops converting, undoes "
"the internal string parsing routine, and continues parsing regularly."
msgstr ""

#: disnake.ext.commands.converter.Greedy:8 of
msgid "For example, in the following code:"
msgstr ""

#: disnake.ext.commands.converter.Greedy:16 of
msgid ""
"An invocation of ``[p]test 1 2 3 4 5 6 hello`` would pass ``numbers`` "
"with ``[1, 2, 3, 4, 5, 6]`` and ``reason`` with ``hello``\\."
msgstr ""

#: disnake.ext.commands.converter.Greedy:19 of
msgid "For more information, check :ref:`ext_commands_special_converters`."
msgstr ""

#: disnake.ext.commands.converter.run_converters:3 of
msgid "Runs converters for a given converter, argument, and parameter."
msgstr ""

#: disnake.ext.commands.converter.run_converters:5 of
msgid "This function does the same work that the library does under the hood."
msgstr ""

#: disnake.ext.commands.converter.run_converters:9 of
msgid "The invocation context to run the converters under."
msgstr ""

#: disnake.ext.commands.converter.run_converters:11 of
msgid "The converter to run, this corresponds to the annotation in the function."
msgstr ""

#: disnake.ext.commands.converter.run_converters:13 of
msgid "The argument to convert to."
msgstr ""

#: disnake.ext.commands.converter.run_converters:15 of
msgid "The parameter being converted. This is mainly for error reporting."
msgstr ""

#: disnake.ext.commands.converter.run_converters:18 of
msgid "The converter failed to convert."
msgstr ""

#: disnake.ext.commands.converter.run_converters:20 of
msgid "The resulting conversion."
msgstr ""

#: ../../ext/commands/api.rst:637
msgid "Flag Converter"
msgstr ""

#: disnake.ext.commands.flags.FlagConverter:1 of
msgid "A converter that allows for a user-friendly flag syntax."
msgstr ""

#: disnake.ext.commands.flags.FlagConverter:3 of
msgid ""
"The flags are defined using :pep:`526` type annotations similar to the "
":mod:`dataclasses` Python module. For more information on how this "
"converter works, check the appropriate :ref:`documentation "
"<ext_commands_flag_converter>`."
msgstr ""

#: disnake.ext.commands.flags.FlagConverter:12 of
msgid ""
"Returns an iterator of ``(flag_name, flag_value)`` pairs. This allows it "
"to be, for example, constructed as a dict or a list of pairs. Note that "
"aliases are not shown."
msgstr ""

#: disnake.ext.commands.flags.FlagConverter:18 of
msgid ""
"A class parameter to toggle case insensitivity of the flag parsing. If "
"``True`` then flags are parsed in a case insensitive manner. Defaults to "
"``False``."
msgstr ""

#: disnake.ext.commands.flags.FlagConverter:22 of
msgid ""
"The prefix that all flags must be prefixed with. By default there is no "
"prefix."
msgstr ""

#: disnake.ext.commands.flags.FlagConverter:25 of
msgid ""
"The delimiter that separates a flag's argument from the flag's name. By "
"default this is ``:``."
msgstr ""

#: disnake.ext.commands.flags.FlagConverter.get_flags:1 of
msgid ""
"Dict[:class:`str`, :class:`Flag`]: A mapping of flag name to flag object "
"this converter has."
msgstr ""

#: disnake.ext.commands.flags.FlagConverter.convert:3 of
msgid "The method that actually converters an argument to the flag mapping."
msgstr ""

#: disnake.ext.commands.flags.FlagConverter.convert:5 of
msgid "The flag converter class."
msgstr ""

#: disnake.ext.commands.flags.FlagConverter.convert:9 of
msgid "The argument to convert from."
msgstr ""

#: disnake.ext.commands.flags.FlagConverter.convert:12 of
msgid "A flag related parsing error."
msgstr ""

#: disnake.ext.commands.flags.FlagConverter.convert:13 of
msgid "A command related error."
msgstr ""

#: disnake.ext.commands.flags.FlagConverter.convert:15 of
msgid "The flag converter instance with all flags parsed."
msgstr ""

#: disnake.ext.commands.flags.FlagConverter.convert:16 of
msgid ":class:`FlagConverter`"
msgstr ""

#: disnake.ext.commands.flags.Flag:1 of
msgid "Represents a flag parameter for :class:`FlagConverter`."
msgstr ""

#: disnake.ext.commands.flags.Flag:3 of
msgid ""
"The :func:`~disnake.ext.commands.flag` function helps create these flag "
"objects, but it is not necessary to do so. These cannot be constructed "
"manually."
msgstr ""

#: disnake.ext.commands.flags.Flag:9 of
msgid "The name of the flag."
msgstr ""

#: disnake.ext.commands.flags.Flag:15 of
msgid "The aliases of the flag name."
msgstr ""

#: disnake.ext.commands.flags.Flag:21 of
msgid "The attribute in the class that corresponds to this flag."
msgstr ""

#: disnake.ext.commands.flags.Flag:27 of
msgid "The default value of the flag, if available."
msgstr ""

#: disnake.ext.commands.flags.Flag:33 of
msgid "The underlying evaluated annotation of the flag."
msgstr ""

#: disnake.ext.commands.flags.Flag:39 of
msgid ""
"The maximum number of arguments the flag can accept. A negative value "
"indicates an unlimited amount of arguments."
msgstr ""

#: disnake.ext.commands.flags.Flag:46 of
msgid "Whether multiple given values overrides the previous value."
msgstr ""

#: disnake.ext.commands.Flag.required:1 of
msgid "Whether the flag is required."
msgstr ""

#: disnake.ext.commands.Flag.required:3 of
msgid "A required flag has no default value."
msgstr ""

#: disnake.ext.commands.flags.flag:1 of
msgid ""
"Override default functionality and parameters of the underlying "
":class:`FlagConverter` class attributes."
msgstr ""

#: disnake.ext.commands.flags.flag:4 of
msgid "The flag name. If not given, defaults to the attribute name."
msgstr ""

#: disnake.ext.commands.flags.flag:6 of
msgid "Aliases to the flag name. If not given no aliases are set."
msgstr ""

#: disnake.ext.commands.flags.flag:8 of
msgid ""
"The default parameter. This could be either a value or a callable that "
"takes :class:`Context` as its sole parameter. If not given then it "
"defaults to the default value given to the attribute."
msgstr ""

#: disnake.ext.commands.flags.flag:12 of
msgid ""
"The maximum number of arguments the flag can accept. A negative value "
"indicates an unlimited amount of arguments. The default value depends on "
"the annotation given."
msgstr ""

#: disnake.ext.commands.flags.flag:16 of
msgid ""
"Whether multiple given values overrides the previous value. The default "
"value depends on the annotation given."
msgstr ""

#: ../../ext/commands/api.rst:650
msgid "Exceptions"
msgstr ""

#: disnake.ext.commands.errors.CommandError:1 of
msgid "The base exception type for all command related errors."
msgstr ""

#: disnake.ext.commands.errors.CommandError:3 of
msgid "This inherits from :exc:`disnake.DiscordException`."
msgstr ""

#: disnake.ext.commands.errors.CommandError:5 of
msgid ""
"This exception and exceptions inherited from it are handled in a special "
"way as they are caught and passed into a special event from "
":class:`.Bot`\\, :func:`.on_command_error`."
msgstr ""

#: disnake.ext.commands.errors.ConversionError:1 of
msgid "Exception raised when a Converter class raises non-CommandError."
msgstr ""

#: disnake.ext.commands.errors.CommandNotFound:7
#: disnake.ext.commands.errors.ConversionError:3
#: disnake.ext.commands.errors.MaxConcurrencyReached:3
#: disnake.ext.commands.errors.UserInputError:4 of
msgid "This inherits from :exc:`CommandError`."
msgstr ""

#: disnake.ext.commands.errors.ConversionError:7 of
msgid "The converter that failed."
msgstr ""

#: disnake.ext.commands.errors.ConversionError:9 of
msgid ":class:`disnake.ext.commands.Converter`"
msgstr ""

#: disnake.ext.commands.errors.CommandInvokeError:7
#: disnake.ext.commands.errors.ConversionError:13
#: disnake.ext.commands.errors.ExtensionFailed:13 of
msgid ""
"The original exception that was raised. You can also get this via the "
"``__cause__`` attribute."
msgstr ""

#: disnake.ext.commands.errors.CommandInvokeError:10
#: disnake.ext.commands.errors.ConversionError:16
#: disnake.ext.commands.errors.ExtensionFailed:16 of
msgid ":exc:`Exception`"
msgstr ""

#: disnake.ext.commands.errors.MissingRequiredArgument:1 of
msgid ""
"Exception raised when parsing a command and a parameter that is required "
"is not encountered."
msgstr ""

#: disnake.ext.commands.errors.BadArgument:4
#: disnake.ext.commands.errors.BadLiteralArgument:4
#: disnake.ext.commands.errors.BadUnionArgument:4
#: disnake.ext.commands.errors.MissingRequiredArgument:4
#: disnake.ext.commands.errors.TooManyArguments:4 of
msgid "This inherits from :exc:`UserInputError`"
msgstr ""

#: disnake.ext.commands.errors.MissingRequiredArgument:8 of
msgid "The argument that is missing."
msgstr ""

#: disnake.ext.commands.errors.BadLiteralArgument:12
#: disnake.ext.commands.errors.BadUnionArgument:10
#: disnake.ext.commands.errors.MissingRequiredArgument:10 of
msgid ":class:`inspect.Parameter`"
msgstr ""

#: disnake.ext.commands.errors.ArgumentParsingError:1 of
msgid "An exception raised when the parser fails to parse a user's input."
msgstr ""

#: disnake.ext.commands.errors.ArgumentParsingError:3 of
msgid "This inherits from :exc:`UserInputError`."
msgstr ""

#: disnake.ext.commands.errors.ArgumentParsingError:5 of
msgid ""
"There are child classes that implement more granular parsing errors for "
"i18n purposes."
msgstr ""

#: disnake.ext.commands.errors.UnexpectedQuoteError:1 of
msgid ""
"An exception raised when the parser encounters a quote mark inside a non-"
"quoted string."
msgstr ""

#: disnake.ext.commands.errors.ExpectedClosingQuoteError:3
#: disnake.ext.commands.errors.InvalidEndOfQuotedStringError:4
#: disnake.ext.commands.errors.UnexpectedQuoteError:3 of
msgid "This inherits from :exc:`ArgumentParsingError`."
msgstr ""

#: disnake.ext.commands.errors.UnexpectedQuoteError:7 of
msgid "The quote mark that was found inside the non-quoted string."
msgstr ""

#: disnake.ext.commands.errors.InvalidEndOfQuotedStringError:1 of
msgid ""
"An exception raised when a space is expected after the closing quote in a"
" string but a different character is found."
msgstr ""

#: disnake.ext.commands.errors.InvalidEndOfQuotedStringError:8 of
msgid "The character found instead of the expected string."
msgstr ""

#: disnake.ext.commands.errors.ExpectedClosingQuoteError:1 of
msgid "An exception raised when a quote character is expected but not found."
msgstr ""

#: disnake.ext.commands.errors.ExpectedClosingQuoteError:7 of
msgid "The quote character expected."
msgstr ""

#: disnake.ext.commands.errors.BadArgument:1 of
msgid ""
"Exception raised when a parsing or conversion failure is encountered on "
"an argument to pass into a command."
msgstr ""

#: disnake.ext.commands.errors.BadUnionArgument:1 of
msgid ""
"Exception raised when a :data:`typing.Union` converter fails for all its "
"associated types."
msgstr ""

#: disnake.ext.commands.errors.BadLiteralArgument:10
#: disnake.ext.commands.errors.BadUnionArgument:8 of
msgid "The parameter that failed being converted."
msgstr ""

#: disnake.ext.commands.errors.BadUnionArgument:14 of
msgid "A tuple of converters attempted in conversion, in order of failure."
msgstr ""

#: disnake.ext.commands.errors.BadUnionArgument:16 of
msgid "Tuple[Type, ``...``]"
msgstr ""

#: disnake.ext.commands.errors.BadLiteralArgument:22
#: disnake.ext.commands.errors.BadUnionArgument:20 of
msgid "A list of errors that were caught from failing the conversion."
msgstr ""

#: disnake.ext.commands.errors.BadLiteralArgument:24
#: disnake.ext.commands.errors.BadUnionArgument:22 of
msgid "List[:class:`CommandError`]"
msgstr ""

#: disnake.ext.commands.errors.BadLiteralArgument:1 of
msgid ""
"Exception raised when a :data:`typing.Literal` converter fails for all "
"its associated values."
msgstr ""

#: disnake.ext.commands.errors.BadLiteralArgument:16 of
msgid "A tuple of values compared against in conversion, in order of failure."
msgstr ""

#: disnake.ext.commands.errors.BadLiteralArgument:18 of
msgid "Tuple[Any, ``...``]"
msgstr ""

#: disnake.ext.commands.errors.PrivateMessageOnly:1 of
msgid ""
"Exception raised when an operation does not work outside of private "
"message contexts."
msgstr ""

#: disnake.ext.commands.errors.BotMissingAnyRole:4
#: disnake.ext.commands.errors.BotMissingPermissions:4
#: disnake.ext.commands.errors.BotMissingRole:3
#: disnake.ext.commands.errors.MissingAnyRole:4
#: disnake.ext.commands.errors.MissingPermissions:4
#: disnake.ext.commands.errors.MissingRole:3
#: disnake.ext.commands.errors.NoPrivateMessage:4
#: disnake.ext.commands.errors.NotOwner:3
#: disnake.ext.commands.errors.PrivateMessageOnly:4 of
msgid "This inherits from :exc:`CheckFailure`"
msgstr ""

#: disnake.ext.commands.errors.NoPrivateMessage:1 of
msgid ""
"Exception raised when an operation does not work in private message "
"contexts."
msgstr ""

#: disnake.ext.commands.errors.CheckFailure:1 of
msgid ""
"Exception raised when the predicates in :attr:`.Command.checks` have "
"failed."
msgstr ""

#: disnake.ext.commands.errors.CheckFailure:3
#: disnake.ext.commands.errors.CommandInvokeError:3
#: disnake.ext.commands.errors.CommandOnCooldown:3
#: disnake.ext.commands.errors.DisabledCommand:3 of
msgid "This inherits from :exc:`CommandError`"
msgstr ""

#: disnake.ext.commands.errors.CheckAnyFailure:1 of
msgid "Exception raised when all predicates in :func:`check_any` fail."
msgstr ""

#: disnake.ext.commands.errors.CheckAnyFailure:3
#: disnake.ext.commands.errors.NSFWChannelRequired:3 of
msgid "This inherits from :exc:`CheckFailure`."
msgstr ""

#: disnake.ext.commands.errors.CheckAnyFailure:9 of
msgid "A list of errors that were caught during execution."
msgstr ""

#: disnake.ext.commands.errors.CheckAnyFailure:11 of
msgid "List[:class:`CheckFailure`]"
msgstr ""

#: disnake.ext.commands.errors.CheckAnyFailure:15 of
msgid "A list of check predicates that failed."
msgstr ""

#: disnake.ext.commands.errors.CheckAnyFailure:17 of
msgid "List[Callable[[:class:`Context`], :class:`bool`]]"
msgstr ""

#: disnake.ext.commands.errors.CommandNotFound:1 of
msgid ""
"Exception raised when a command is attempted to be invoked but no command"
" under that name is found."
msgstr ""

#: disnake.ext.commands.errors.CommandNotFound:4 of
msgid ""
"This is not raised for invalid subcommands, rather just the initial main "
"command that is attempted to be invoked."
msgstr ""

#: disnake.ext.commands.errors.DisabledCommand:1 of
msgid "Exception raised when the command being invoked is disabled."
msgstr ""

#: disnake.ext.commands.errors.CommandInvokeError:1 of
msgid "Exception raised when the command being invoked raised an exception."
msgstr ""

#: disnake.ext.commands.errors.TooManyArguments:1 of
msgid ""
"Exception raised when the command was passed too many arguments and its "
":attr:`.Command.ignore_extra` attribute was not set to ``True``."
msgstr ""

#: disnake.ext.commands.errors.UserInputError:1 of
msgid ""
"The base exception type for errors that involve errors regarding user "
"input."
msgstr ""

#: disnake.ext.commands.errors.CommandOnCooldown:1 of
msgid "Exception raised when the command being invoked is on cooldown."
msgstr ""

#: disnake.ext.commands.errors.CommandOnCooldown:7 of
msgid ""
"A class with attributes ``rate`` and ``per`` similar to the "
":func:`.cooldown` decorator."
msgstr ""

#: disnake.ext.commands.errors.CommandOnCooldown:10 of
msgid ":class:`.Cooldown`"
msgstr ""

#: disnake.ext.commands.errors.CommandOnCooldown:14 of
msgid "The type associated with the cooldown."
msgstr ""

#: disnake.ext.commands.errors.CommandOnCooldown:16 of
msgid ":class:`BucketType`"
msgstr ""

#: disnake.ext.commands.errors.CommandOnCooldown:20 of
msgid "The amount of seconds to wait before you can retry again."
msgstr ""

#: disnake.ext.commands.errors.MaxConcurrencyReached:1 of
msgid ""
"Exception raised when the command being invoked has reached its maximum "
"concurrency."
msgstr ""

#: disnake.ext.commands.errors.MaxConcurrencyReached:7 of
msgid "The maximum number of concurrent invokers allowed."
msgstr ""

#: disnake.ext.commands.errors.MaxConcurrencyReached:13 of
msgid "The bucket type passed to the :func:`.max_concurrency` decorator."
msgstr ""

#: disnake.ext.commands.errors.MaxConcurrencyReached:15 of
msgid ":class:`.BucketType`"
msgstr ""

#: disnake.ext.commands.errors.NotOwner:1 of
msgid "Exception raised when the message author is not the owner of the bot."
msgstr ""

#: disnake.ext.commands.errors.MessageNotFound:1 of
msgid "Exception raised when the message provided was not found in the channel."
msgstr ""

#: disnake.ext.commands.errors.BadBoolArgument:3
#: disnake.ext.commands.errors.BadColourArgument:3
#: disnake.ext.commands.errors.BadInviteArgument:3
#: disnake.ext.commands.errors.ChannelNotFound:3
#: disnake.ext.commands.errors.ChannelNotReadable:4
#: disnake.ext.commands.errors.EmojiNotFound:3
#: disnake.ext.commands.errors.GuildNotFound:3
#: disnake.ext.commands.errors.GuildStickerNotFound:3
#: disnake.ext.commands.errors.MemberNotFound:4
#: disnake.ext.commands.errors.MessageNotFound:3
#: disnake.ext.commands.errors.PartialEmojiConversionFailure:4
#: disnake.ext.commands.errors.RoleNotFound:3
#: disnake.ext.commands.errors.ThreadNotFound:3
#: disnake.ext.commands.errors.UserNotFound:4 of
msgid "This inherits from :exc:`BadArgument`"
msgstr ""

#: disnake.ext.commands.errors.MessageNotFound:9 of
msgid "The message supplied by the caller that was not found"
msgstr ""

#: disnake.ext.commands.errors.MemberNotFound:1 of
msgid ""
"Exception raised when the member provided was not found in the bot's "
"cache."
msgstr ""

#: disnake.ext.commands.errors.MemberNotFound:10 of
msgid "The member supplied by the caller that was not found"
msgstr ""

#: disnake.ext.commands.errors.GuildNotFound:1 of
msgid "Exception raised when the guild provided was not found in the bot's cache."
msgstr ""

#: disnake.ext.commands.errors.GuildNotFound:9 of
msgid "The guild supplied by the called that was not found"
msgstr ""

#: disnake.ext.commands.errors.UserNotFound:1 of
msgid "Exception raised when the user provided was not found in the bot's cache."
msgstr ""

#: disnake.ext.commands.errors.UserNotFound:10 of
msgid "The user supplied by the caller that was not found"
msgstr ""

#: disnake.ext.commands.errors.ChannelNotFound:1 of
msgid "Exception raised when the bot can not find the channel."
msgstr ""

#: disnake.ext.commands.errors.ChannelNotFound:9 of
msgid "The channel supplied by the caller that was not found"
msgstr ""

#: disnake.ext.commands.errors.ChannelNotReadable:1 of
msgid ""
"Exception raised when the bot does not have permission to read messages "
"in the channel."
msgstr ""

#: disnake.ext.commands.errors.ChannelNotReadable:10 of
msgid "The channel supplied by the caller that was not readable"
msgstr ""

#: disnake.ext.commands.errors.ChannelNotReadable:12 of
msgid "Union[:class:`.abc.GuildChannel`, :class:`.Thread`]"
msgstr ""

#: disnake.ext.commands.errors.ThreadNotFound:1 of
msgid "Exception raised when the bot can not find the thread."
msgstr ""

#: disnake.ext.commands.errors.ThreadNotFound:9 of
msgid "The thread supplied by the caller that was not found"
msgstr ""

#: disnake.ext.commands.errors.BadColourArgument:1 of
msgid "Exception raised when the colour is not valid."
msgstr ""

#: disnake.ext.commands.errors.BadColourArgument:9 of
msgid "The colour supplied by the caller that was not valid"
msgstr ""

#: disnake.ext.commands.errors.RoleNotFound:1 of
msgid "Exception raised when the bot can not find the role."
msgstr ""

#: disnake.ext.commands.errors.RoleNotFound:9 of
msgid "The role supplied by the caller that was not found"
msgstr ""

#: disnake.ext.commands.errors.BadInviteArgument:1 of
msgid "Exception raised when the invite is invalid or expired."
msgstr ""

#: disnake.ext.commands.errors.EmojiNotFound:1 of
msgid "Exception raised when the bot can not find the emoji."
msgstr ""

#: disnake.ext.commands.errors.EmojiNotFound:9 of
msgid "The emoji supplied by the caller that was not found"
msgstr ""

#: disnake.ext.commands.errors.PartialEmojiConversionFailure:1 of
msgid ""
"Exception raised when the emoji provided does not match the correct "
"format."
msgstr ""

#: disnake.ext.commands.errors.PartialEmojiConversionFailure:10 of
msgid "The emoji supplied by the caller that did not match the regex"
msgstr ""

#: disnake.ext.commands.errors.GuildStickerNotFound:1 of
msgid "Exception raised when the bot can not find the sticker."
msgstr ""

#: disnake.ext.commands.errors.GuildStickerNotFound:9 of
msgid "The sticker supplied by the caller that was not found"
msgstr ""

#: disnake.ext.commands.errors.BadBoolArgument:1 of
msgid "Exception raised when a boolean argument was not convertable."
msgstr ""

#: disnake.ext.commands.errors.BadBoolArgument:9 of
msgid ""
"The boolean argument supplied by the caller that is not in the predefined"
" list"
msgstr ""

#: disnake.ext.commands.errors.MissingPermissions:1 of
msgid ""
"Exception raised when the command invoker lacks permissions to run a "
"command."
msgstr ""

#: disnake.ext.commands.errors.BotMissingPermissions:8
#: disnake.ext.commands.errors.MissingPermissions:8 of
msgid "The required permissions that are missing."
msgstr ""

#: disnake.ext.commands.errors.BotMissingPermissions:1 of
msgid "Exception raised when the bot's member lacks permissions to run a command."
msgstr ""

#: disnake.ext.commands.errors.MissingRole:1 of
msgid "Exception raised when the command invoker lacks a role to run a command."
msgstr ""

#: disnake.ext.commands.errors.BotMissingRole:9
#: disnake.ext.commands.errors.MissingRole:9 of
msgid ""
"The required role that is missing. This is the parameter passed to "
":func:`~.commands.has_role`."
msgstr ""

#: disnake.ext.commands.errors.BotMissingRole:12
#: disnake.ext.commands.errors.MissingRole:12 of
msgid "Union[:class:`str`, :class:`int`]"
msgstr ""

#: disnake.ext.commands.errors.BotMissingRole:1 of
msgid "Exception raised when the bot's member lacks a role to run a command."
msgstr ""

#: disnake.ext.commands.errors.MissingAnyRole:1 of
msgid ""
"Exception raised when the command invoker lacks any of the roles "
"specified to run a command."
msgstr ""

#: disnake.ext.commands.errors.MissingAnyRole:10 of
msgid ""
"The roles that the invoker is missing. These are the parameters passed to"
" :func:`~.commands.has_any_role`."
msgstr ""

#: disnake.ext.commands.errors.BotMissingAnyRole:13
#: disnake.ext.commands.errors.MissingAnyRole:13 of
msgid "List[Union[:class:`str`, :class:`int`]]"
msgstr ""

#: disnake.ext.commands.errors.BotMissingAnyRole:1 of
msgid ""
"Exception raised when the bot's member lacks any of the roles specified "
"to run a command."
msgstr ""

#: disnake.ext.commands.errors.BotMissingAnyRole:10 of
msgid ""
"The roles that the bot's member is missing. These are the parameters "
"passed to :func:`~.commands.has_any_role`."
msgstr ""

#: disnake.ext.commands.errors.NSFWChannelRequired:1 of
msgid "Exception raised when a channel does not have the required NSFW setting."
msgstr ""

#: disnake.ext.commands.errors.NSFWChannelRequired:7 of
msgid "The channel that does not have NSFW enabled."
msgstr ""

#: disnake.ext.commands.errors.FlagError:1 of
msgid "The base exception type for all flag parsing related errors."
msgstr ""

#: disnake.ext.commands.errors.FlagError:3 of
msgid "This inherits from :exc:`BadArgument`."
msgstr ""

#: disnake.ext.commands.errors.BadFlagArgument:1 of
msgid "An exception raised when a flag failed to convert a value."
msgstr ""

#: disnake.ext.commands.errors.BadFlagArgument:3
#: disnake.ext.commands.errors.MissingFlagArgument:3
#: disnake.ext.commands.errors.MissingRequiredFlag:3 of
msgid "This inherits from :exc:`FlagError`"
msgstr ""

#: disnake.ext.commands.errors.BadFlagArgument:9 of
msgid "The flag that failed to convert."
msgstr ""

#: disnake.ext.commands.errors.BadFlagArgument:11
#: disnake.ext.commands.errors.MissingFlagArgument:11
#: disnake.ext.commands.errors.MissingRequiredFlag:11
#: disnake.ext.commands.errors.TooManyFlags:11 of
msgid ":class:`~disnake.ext.commands.Flag`"
msgstr ""

#: disnake.ext.commands.errors.MissingFlagArgument:1 of
msgid "An exception raised when a flag did not get a value."
msgstr ""

#: disnake.ext.commands.errors.MissingFlagArgument:9 of
msgid "The flag that did not get a value."
msgstr ""

#: disnake.ext.commands.errors.TooManyFlags:1 of
msgid "An exception raised when a flag has received too many values."
msgstr ""

#: disnake.ext.commands.errors.TooManyFlags:3 of
msgid "This inherits from :exc:`FlagError`."
msgstr ""

#: disnake.ext.commands.errors.TooManyFlags:9 of
msgid "The flag that received too many values."
msgstr ""

#: disnake.ext.commands.errors.TooManyFlags:15 of
msgid "The values that were passed."
msgstr ""

#: disnake.ext.commands.errors.MissingRequiredFlag:1 of
msgid "An exception raised when a required flag was not given."
msgstr ""

#: disnake.ext.commands.errors.MissingRequiredFlag:9 of
msgid "The required flag that was not found."
msgstr ""

#: disnake.ext.commands.errors.ExtensionError:1 of
msgid "Base exception for extension related errors."
msgstr ""

#: disnake.ext.commands.errors.ExtensionError:3 of
msgid "This inherits from :exc:`~disnake.DiscordException`."
msgstr ""

#: disnake.ext.commands.errors.ExtensionError:7 of
msgid "The extension that had an error."
msgstr ""

#: disnake.ext.commands.errors.ExtensionAlreadyLoaded:1 of
msgid "An exception raised when an extension has already been loaded."
msgstr ""

#: disnake.ext.commands.errors.ExtensionAlreadyLoaded:3
#: disnake.ext.commands.errors.ExtensionFailed:3
#: disnake.ext.commands.errors.ExtensionNotFound:3
#: disnake.ext.commands.errors.ExtensionNotLoaded:3
#: disnake.ext.commands.errors.NoEntryPointError:3 of
msgid "This inherits from :exc:`ExtensionError`"
msgstr ""

#: disnake.ext.commands.errors.ExtensionNotLoaded:1 of
msgid "An exception raised when an extension was not loaded."
msgstr ""

#: disnake.ext.commands.errors.NoEntryPointError:1 of
msgid ""
"An exception raised when an extension does not have a ``setup`` entry "
"point function."
msgstr ""

#: disnake.ext.commands.errors.ExtensionFailed:1 of
msgid ""
"An exception raised when an extension failed to load during execution of "
"the module or ``setup`` entry point."
msgstr ""

#: disnake.ext.commands.errors.ExtensionFailed:7
#: disnake.ext.commands.errors.ExtensionNotFound:10 of
msgid "The extension that had the error."
msgstr ""

#: disnake.ext.commands.errors.ExtensionNotFound:1 of
msgid "An exception raised when an extension is not found."
msgstr ""

#: disnake.ext.commands.errors.ExtensionNotFound:5 of
msgid "Made the ``original`` attribute always None."
msgstr ""

#: disnake.ext.commands.errors.CommandRegistrationError:1 of
msgid ""
"An exception raised when the command can't be added because the name is "
"already taken by a different command."
msgstr ""

#: disnake.ext.commands.errors.CommandRegistrationError:4 of
msgid "This inherits from :exc:`disnake.ClientException`"
msgstr ""

#: disnake.ext.commands.errors.CommandRegistrationError:10 of
msgid "The command name that had the error."
msgstr ""

#: disnake.ext.commands.errors.CommandRegistrationError:16 of
msgid "Whether the name that conflicts is an alias of the command we try to add."
msgstr ""

#: ../../ext/commands/api.rst:819
msgid "Exception Hierarchy"
msgstr ""

#: ../../ext/commands/api.rst:876
msgid ":exc:`~.DiscordException`"
msgstr ""

#: ../../ext/commands/api.rst:870
msgid ":exc:`~.commands.CommandError`"
msgstr ""

#: ../../ext/commands/api.rst:825
msgid ":exc:`~.commands.ConversionError`"
msgstr ""

#: ../../ext/commands/api.rst:853
msgid ":exc:`~.commands.UserInputError`"
msgstr ""

#: ../../ext/commands/api.rst:827
msgid ":exc:`~.commands.MissingRequiredArgument`"
msgstr ""

#: ../../ext/commands/api.rst:828
msgid ":exc:`~.commands.TooManyArguments`"
msgstr ""

#: ../../ext/commands/api.rst:847
msgid ":exc:`~.commands.BadArgument`"
msgstr ""

#: ../../ext/commands/api.rst:830
msgid ":exc:`~.commands.MessageNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:831
msgid ":exc:`~.commands.MemberNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:832
msgid ":exc:`~.commands.GuildNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:833
msgid ":exc:`~.commands.UserNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:834
msgid ":exc:`~.commands.ChannelNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:835
msgid ":exc:`~.commands.ChannelNotReadable`"
msgstr ""

#: ../../ext/commands/api.rst:836
msgid ":exc:`~.commands.BadColourArgument`"
msgstr ""

#: ../../ext/commands/api.rst:837
msgid ":exc:`~.commands.RoleNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:838
msgid ":exc:`~.commands.BadInviteArgument`"
msgstr ""

#: ../../ext/commands/api.rst:839
msgid ":exc:`~.commands.EmojiNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:840
msgid ":exc:`~.commands.GuildStickerNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:841
msgid ":exc:`~.commands.PartialEmojiConversionFailure`"
msgstr ""

#: ../../ext/commands/api.rst:842
msgid ":exc:`~.commands.BadBoolArgument`"
msgstr ""

#: ../../ext/commands/api.rst:843
msgid ":exc:`~.commands.ThreadNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:847
msgid ":exc:`~.commands.FlagError`"
msgstr ""

#: ../../ext/commands/api.rst:845
msgid ":exc:`~.commands.BadFlagArgument`"
msgstr ""

#: ../../ext/commands/api.rst:846
msgid ":exc:`~.commands.MissingFlagArgument`"
msgstr ""

#: ../../ext/commands/api.rst:847
msgid ":exc:`~.commands.TooManyFlags`"
msgstr ""

#: ../../ext/commands/api.rst:848
msgid ":exc:`~.commands.MissingRequiredFlag`"
msgstr ""

#: ../../ext/commands/api.rst:849
msgid ":exc:`~.commands.BadUnionArgument`"
msgstr ""

#: ../../ext/commands/api.rst:850
msgid ":exc:`~.commands.BadLiteralArgument`"
msgstr ""

#: ../../ext/commands/api.rst:853
msgid ":exc:`~.commands.ArgumentParsingError`"
msgstr ""

#: ../../ext/commands/api.rst:852
msgid ":exc:`~.commands.UnexpectedQuoteError`"
msgstr ""

#: ../../ext/commands/api.rst:853
msgid ":exc:`~.commands.InvalidEndOfQuotedStringError`"
msgstr ""

#: ../../ext/commands/api.rst:854
msgid ":exc:`~.commands.ExpectedClosingQuoteError`"
msgstr ""

#: ../../ext/commands/api.rst:855
msgid ":exc:`~.commands.CommandNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:866
msgid ":exc:`~.commands.CheckFailure`"
msgstr ""

#: ../../ext/commands/api.rst:857
msgid ":exc:`~.commands.CheckAnyFailure`"
msgstr ""

#: ../../ext/commands/api.rst:858
msgid ":exc:`~.commands.PrivateMessageOnly`"
msgstr ""

#: ../../ext/commands/api.rst:859
msgid ":exc:`~.commands.NoPrivateMessage`"
msgstr ""

#: ../../ext/commands/api.rst:860
msgid ":exc:`~.commands.NotOwner`"
msgstr ""

#: ../../ext/commands/api.rst:861
msgid ":exc:`~.commands.MissingPermissions`"
msgstr ""

#: ../../ext/commands/api.rst:862
msgid ":exc:`~.commands.BotMissingPermissions`"
msgstr ""

#: ../../ext/commands/api.rst:863
msgid ":exc:`~.commands.MissingRole`"
msgstr ""

#: ../../ext/commands/api.rst:864
msgid ":exc:`~.commands.BotMissingRole`"
msgstr ""

#: ../../ext/commands/api.rst:865
msgid ":exc:`~.commands.MissingAnyRole`"
msgstr ""

#: ../../ext/commands/api.rst:866
msgid ":exc:`~.commands.BotMissingAnyRole`"
msgstr ""

#: ../../ext/commands/api.rst:867
msgid ":exc:`~.commands.NSFWChannelRequired`"
msgstr ""

#: ../../ext/commands/api.rst:868
msgid ":exc:`~.commands.DisabledCommand`"
msgstr ""

#: ../../ext/commands/api.rst:869
msgid ":exc:`~.commands.CommandInvokeError`"
msgstr ""

#: ../../ext/commands/api.rst:870
msgid ":exc:`~.commands.CommandOnCooldown`"
msgstr ""

#: ../../ext/commands/api.rst:871
msgid ":exc:`~.commands.MaxConcurrencyReached`"
msgstr ""

#: ../../ext/commands/api.rst:876
msgid ":exc:`~.commands.ExtensionError`"
msgstr ""

#: ../../ext/commands/api.rst:873
msgid ":exc:`~.commands.ExtensionAlreadyLoaded`"
msgstr ""

#: ../../ext/commands/api.rst:874
msgid ":exc:`~.commands.ExtensionNotLoaded`"
msgstr ""

#: ../../ext/commands/api.rst:875
msgid ":exc:`~.commands.NoEntryPointError`"
msgstr ""

#: ../../ext/commands/api.rst:876
msgid ":exc:`~.commands.ExtensionFailed`"
msgstr ""

#: ../../ext/commands/api.rst:877
msgid ":exc:`~.commands.ExtensionNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:878
msgid ":exc:`~.ClientException`"
msgstr ""

#: ../../ext/commands/api.rst:879
msgid ":exc:`~.commands.CommandRegistrationError`"
msgstr ""

